// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: publicrpc/v1/publicrpc.proto

package publicrpcv1

import (
	v1 "github.com/certusone/wormhole/node/pkg/proto/gossip/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChainID int32

const (
	ChainID_CHAIN_ID_UNSPECIFIED ChainID = 0
	ChainID_CHAIN_ID_SOLANA      ChainID = 1
	ChainID_CHAIN_ID_ETHEREUM    ChainID = 2
	ChainID_CHAIN_ID_TERRA       ChainID = 3
	ChainID_CHAIN_ID_BSC         ChainID = 4
	ChainID_CHAIN_ID_POLYGON     ChainID = 5
	ChainID_CHAIN_ID_AVALANCHE   ChainID = 6
	ChainID_CHAIN_ID_OASIS       ChainID = 7
	ChainID_CHAIN_ID_ALGORAND    ChainID = 8
	ChainID_CHAIN_ID_AURORA      ChainID = 9
	ChainID_CHAIN_ID_FANTOM      ChainID = 10
	ChainID_CHAIN_ID_KARURA      ChainID = 11
	ChainID_CHAIN_ID_ACALA       ChainID = 12
	ChainID_CHAIN_ID_KLAYTN      ChainID = 13
	ChainID_CHAIN_ID_CELO        ChainID = 14
	ChainID_CHAIN_ID_NEAR        ChainID = 15
	ChainID_CHAIN_ID_MOONBEAM    ChainID = 16
	ChainID_CHAIN_ID_NEON        ChainID = 17
	ChainID_CHAIN_ID_TERRA2      ChainID = 18
	ChainID_CHAIN_ID_INJECTIVE   ChainID = 19
	ChainID_CHAIN_ID_OSMOSIS     ChainID = 20
	ChainID_CHAIN_ID_SUI         ChainID = 21
	ChainID_CHAIN_ID_APTOS       ChainID = 22
	ChainID_CHAIN_ID_ARBITRUM    ChainID = 23
	ChainID_CHAIN_ID_OPTIMISM    ChainID = 24
	ChainID_CHAIN_ID_GNOSIS      ChainID = 25
	ChainID_CHAIN_ID_PYTHNET     ChainID = 26
	ChainID_CHAIN_ID_XPLA        ChainID = 28
	ChainID_CHAIN_ID_BTC         ChainID = 29
	ChainID_CHAIN_ID_BASE        ChainID = 30
	ChainID_CHAIN_ID_SEPOLIA     ChainID = 10002
)

// Enum value maps for ChainID.
var (
	ChainID_name = map[int32]string{
		0:     "CHAIN_ID_UNSPECIFIED",
		1:     "CHAIN_ID_SOLANA",
		2:     "CHAIN_ID_ETHEREUM",
		3:     "CHAIN_ID_TERRA",
		4:     "CHAIN_ID_BSC",
		5:     "CHAIN_ID_POLYGON",
		6:     "CHAIN_ID_AVALANCHE",
		7:     "CHAIN_ID_OASIS",
		8:     "CHAIN_ID_ALGORAND",
		9:     "CHAIN_ID_AURORA",
		10:    "CHAIN_ID_FANTOM",
		11:    "CHAIN_ID_KARURA",
		12:    "CHAIN_ID_ACALA",
		13:    "CHAIN_ID_KLAYTN",
		14:    "CHAIN_ID_CELO",
		15:    "CHAIN_ID_NEAR",
		16:    "CHAIN_ID_MOONBEAM",
		17:    "CHAIN_ID_NEON",
		18:    "CHAIN_ID_TERRA2",
		19:    "CHAIN_ID_INJECTIVE",
		20:    "CHAIN_ID_OSMOSIS",
		21:    "CHAIN_ID_SUI",
		22:    "CHAIN_ID_APTOS",
		23:    "CHAIN_ID_ARBITRUM",
		24:    "CHAIN_ID_OPTIMISM",
		25:    "CHAIN_ID_GNOSIS",
		26:    "CHAIN_ID_PYTHNET",
		28:    "CHAIN_ID_XPLA",
		29:    "CHAIN_ID_BTC",
		30:    "CHAIN_ID_BASE",
		10002: "CHAIN_ID_SEPOLIA",
	}
	ChainID_value = map[string]int32{
		"CHAIN_ID_UNSPECIFIED": 0,
		"CHAIN_ID_SOLANA":      1,
		"CHAIN_ID_ETHEREUM":    2,
		"CHAIN_ID_TERRA":       3,
		"CHAIN_ID_BSC":         4,
		"CHAIN_ID_POLYGON":     5,
		"CHAIN_ID_AVALANCHE":   6,
		"CHAIN_ID_OASIS":       7,
		"CHAIN_ID_ALGORAND":    8,
		"CHAIN_ID_AURORA":      9,
		"CHAIN_ID_FANTOM":      10,
		"CHAIN_ID_KARURA":      11,
		"CHAIN_ID_ACALA":       12,
		"CHAIN_ID_KLAYTN":      13,
		"CHAIN_ID_CELO":        14,
		"CHAIN_ID_NEAR":        15,
		"CHAIN_ID_MOONBEAM":    16,
		"CHAIN_ID_NEON":        17,
		"CHAIN_ID_TERRA2":      18,
		"CHAIN_ID_INJECTIVE":   19,
		"CHAIN_ID_OSMOSIS":     20,
		"CHAIN_ID_SUI":         21,
		"CHAIN_ID_APTOS":       22,
		"CHAIN_ID_ARBITRUM":    23,
		"CHAIN_ID_OPTIMISM":    24,
		"CHAIN_ID_GNOSIS":      25,
		"CHAIN_ID_PYTHNET":     26,
		"CHAIN_ID_XPLA":        28,
		"CHAIN_ID_BTC":         29,
		"CHAIN_ID_BASE":        30,
		"CHAIN_ID_SEPOLIA":     10002,
	}
)

func (x ChainID) Enum() *ChainID {
	p := new(ChainID)
	*p = x
	return p
}

func (x ChainID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainID) Descriptor() protoreflect.EnumDescriptor {
	return file_publicrpc_v1_publicrpc_proto_enumTypes[0].Descriptor()
}

func (ChainID) Type() protoreflect.EnumType {
	return &file_publicrpc_v1_publicrpc_proto_enumTypes[0]
}

func (x ChainID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainID.Descriptor instead.
func (ChainID) EnumDescriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{0}
}

// MessageID is a VAA's globally unique identifier (see data availability design document).
type MessageID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Emitter chain ID.
	EmitterChain ChainID `protobuf:"varint,1,opt,name=emitter_chain,json=emitterChain,proto3,enum=publicrpc.v1.ChainID" json:"emitter_chain,omitempty"`
	// Hex-encoded (without leading 0x) emitter address.
	EmitterAddress string `protobuf:"bytes,2,opt,name=emitter_address,json=emitterAddress,proto3" json:"emitter_address,omitempty"`
	// Sequence number for (emitter_chain, emitter_address).
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *MessageID) Reset() {
	*x = MessageID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageID) ProtoMessage() {}

func (x *MessageID) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageID.ProtoReflect.Descriptor instead.
func (*MessageID) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{0}
}

func (x *MessageID) GetEmitterChain() ChainID {
	if x != nil {
		return x.EmitterChain
	}
	return ChainID_CHAIN_ID_UNSPECIFIED
}

func (x *MessageID) GetEmitterAddress() string {
	if x != nil {
		return x.EmitterAddress
	}
	return ""
}

func (x *MessageID) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type BatchID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Emitter chain ID.
	EmitterChain ChainID `protobuf:"varint,1,opt,name=emitter_chain,json=emitterChain,proto3,enum=publicrpc.v1.ChainID" json:"emitter_chain,omitempty"`
	// Transaction's unique identifier.
	TxId []byte `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Nonce of the messages in the batch.
	Nonce uint32 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *BatchID) Reset() {
	*x = BatchID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchID) ProtoMessage() {}

func (x *BatchID) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchID.ProtoReflect.Descriptor instead.
func (*BatchID) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{1}
}

func (x *BatchID) GetEmitterChain() ChainID {
	if x != nil {
		return x.EmitterChain
	}
	return ChainID_CHAIN_ID_UNSPECIFIED
}

func (x *BatchID) GetTxId() []byte {
	if x != nil {
		return x.TxId
	}
	return nil
}

func (x *BatchID) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type GetSignedVAARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *MessageID `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GetSignedVAARequest) Reset() {
	*x = GetSignedVAARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignedVAARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignedVAARequest) ProtoMessage() {}

func (x *GetSignedVAARequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignedVAARequest.ProtoReflect.Descriptor instead.
func (*GetSignedVAARequest) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetSignedVAARequest) GetMessageId() *MessageID {
	if x != nil {
		return x.MessageId
	}
	return nil
}

type GetSignedVAAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaaBytes []byte `protobuf:"bytes,1,opt,name=vaa_bytes,json=vaaBytes,proto3" json:"vaa_bytes,omitempty"`
}

func (x *GetSignedVAAResponse) Reset() {
	*x = GetSignedVAAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignedVAAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignedVAAResponse) ProtoMessage() {}

func (x *GetSignedVAAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignedVAAResponse.ProtoReflect.Descriptor instead.
func (*GetSignedVAAResponse) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetSignedVAAResponse) GetVaaBytes() []byte {
	if x != nil {
		return x.VaaBytes
	}
	return nil
}

type GetSignedBatchVAARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId *BatchID `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *GetSignedBatchVAARequest) Reset() {
	*x = GetSignedBatchVAARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignedBatchVAARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignedBatchVAARequest) ProtoMessage() {}

func (x *GetSignedBatchVAARequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignedBatchVAARequest.ProtoReflect.Descriptor instead.
func (*GetSignedBatchVAARequest) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{4}
}

func (x *GetSignedBatchVAARequest) GetBatchId() *BatchID {
	if x != nil {
		return x.BatchId
	}
	return nil
}

type GetSignedBatchVAAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedBatchVaa *v1.SignedBatchVAAWithQuorum `protobuf:"bytes,1,opt,name=signed_batch_vaa,json=signedBatchVaa,proto3" json:"signed_batch_vaa,omitempty"`
}

func (x *GetSignedBatchVAAResponse) Reset() {
	*x = GetSignedBatchVAAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSignedBatchVAAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSignedBatchVAAResponse) ProtoMessage() {}

func (x *GetSignedBatchVAAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSignedBatchVAAResponse.ProtoReflect.Descriptor instead.
func (*GetSignedBatchVAAResponse) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetSignedBatchVAAResponse) GetSignedBatchVaa() *v1.SignedBatchVAAWithQuorum {
	if x != nil {
		return x.SignedBatchVaa
	}
	return nil
}

type GetLastHeartbeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLastHeartbeatsRequest) Reset() {
	*x = GetLastHeartbeatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastHeartbeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastHeartbeatsRequest) ProtoMessage() {}

func (x *GetLastHeartbeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastHeartbeatsRequest.ProtoReflect.Descriptor instead.
func (*GetLastHeartbeatsRequest) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{6}
}

type GetLastHeartbeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*GetLastHeartbeatsResponse_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GetLastHeartbeatsResponse) Reset() {
	*x = GetLastHeartbeatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastHeartbeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastHeartbeatsResponse) ProtoMessage() {}

func (x *GetLastHeartbeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastHeartbeatsResponse.ProtoReflect.Descriptor instead.
func (*GetLastHeartbeatsResponse) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetLastHeartbeatsResponse) GetEntries() []*GetLastHeartbeatsResponse_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetCurrentGuardianSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentGuardianSetRequest) Reset() {
	*x = GetCurrentGuardianSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentGuardianSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentGuardianSetRequest) ProtoMessage() {}

func (x *GetCurrentGuardianSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentGuardianSetRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentGuardianSetRequest) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{8}
}

type GetCurrentGuardianSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuardianSet *GuardianSet `protobuf:"bytes,1,opt,name=guardian_set,json=guardianSet,proto3" json:"guardian_set,omitempty"`
}

func (x *GetCurrentGuardianSetResponse) Reset() {
	*x = GetCurrentGuardianSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentGuardianSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentGuardianSetResponse) ProtoMessage() {}

func (x *GetCurrentGuardianSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentGuardianSetResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentGuardianSetResponse) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{9}
}

func (x *GetCurrentGuardianSetResponse) GetGuardianSet() *GuardianSet {
	if x != nil {
		return x.GuardianSet
	}
	return nil
}

type GuardianSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guardian set index
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// List of guardian addresses as human-readable hex-encoded (leading 0x) addresses.
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *GuardianSet) Reset() {
	*x = GuardianSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianSet) ProtoMessage() {}

func (x *GuardianSet) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianSet.ProtoReflect.Descriptor instead.
func (*GuardianSet) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{10}
}

func (x *GuardianSet) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GuardianSet) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type GovernorGetAvailableNotionalByChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GovernorGetAvailableNotionalByChainRequest) Reset() {
	*x = GovernorGetAvailableNotionalByChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetAvailableNotionalByChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetAvailableNotionalByChainRequest) ProtoMessage() {}

func (x *GovernorGetAvailableNotionalByChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetAvailableNotionalByChainRequest.ProtoReflect.Descriptor instead.
func (*GovernorGetAvailableNotionalByChainRequest) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{11}
}

type GovernorGetAvailableNotionalByChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// There is an entry for each chain that is being governed.
	// Chains that are not being governed are not listed, and assumed to be unlimited.
	Entries []*GovernorGetAvailableNotionalByChainResponse_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GovernorGetAvailableNotionalByChainResponse) Reset() {
	*x = GovernorGetAvailableNotionalByChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetAvailableNotionalByChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetAvailableNotionalByChainResponse) ProtoMessage() {}

func (x *GovernorGetAvailableNotionalByChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetAvailableNotionalByChainResponse.ProtoReflect.Descriptor instead.
func (*GovernorGetAvailableNotionalByChainResponse) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{12}
}

func (x *GovernorGetAvailableNotionalByChainResponse) GetEntries() []*GovernorGetAvailableNotionalByChainResponse_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GovernorGetEnqueuedVAAsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GovernorGetEnqueuedVAAsRequest) Reset() {
	*x = GovernorGetEnqueuedVAAsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetEnqueuedVAAsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetEnqueuedVAAsRequest) ProtoMessage() {}

func (x *GovernorGetEnqueuedVAAsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetEnqueuedVAAsRequest.ProtoReflect.Descriptor instead.
func (*GovernorGetEnqueuedVAAsRequest) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{13}
}

type GovernorGetEnqueuedVAAsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// There is an entry for each enqueued vaa.
	Entries []*GovernorGetEnqueuedVAAsResponse_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GovernorGetEnqueuedVAAsResponse) Reset() {
	*x = GovernorGetEnqueuedVAAsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetEnqueuedVAAsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetEnqueuedVAAsResponse) ProtoMessage() {}

func (x *GovernorGetEnqueuedVAAsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetEnqueuedVAAsResponse.ProtoReflect.Descriptor instead.
func (*GovernorGetEnqueuedVAAsResponse) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{14}
}

func (x *GovernorGetEnqueuedVAAsResponse) GetEntries() []*GovernorGetEnqueuedVAAsResponse_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GovernorIsVAAEnqueuedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *MessageID `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GovernorIsVAAEnqueuedRequest) Reset() {
	*x = GovernorIsVAAEnqueuedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorIsVAAEnqueuedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorIsVAAEnqueuedRequest) ProtoMessage() {}

func (x *GovernorIsVAAEnqueuedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorIsVAAEnqueuedRequest.ProtoReflect.Descriptor instead.
func (*GovernorIsVAAEnqueuedRequest) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{15}
}

func (x *GovernorIsVAAEnqueuedRequest) GetMessageId() *MessageID {
	if x != nil {
		return x.MessageId
	}
	return nil
}

type GovernorIsVAAEnqueuedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnqueued bool `protobuf:"varint,1,opt,name=is_enqueued,json=isEnqueued,proto3" json:"is_enqueued,omitempty"`
}

func (x *GovernorIsVAAEnqueuedResponse) Reset() {
	*x = GovernorIsVAAEnqueuedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorIsVAAEnqueuedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorIsVAAEnqueuedResponse) ProtoMessage() {}

func (x *GovernorIsVAAEnqueuedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorIsVAAEnqueuedResponse.ProtoReflect.Descriptor instead.
func (*GovernorIsVAAEnqueuedResponse) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{16}
}

func (x *GovernorIsVAAEnqueuedResponse) GetIsEnqueued() bool {
	if x != nil {
		return x.IsEnqueued
	}
	return false
}

type GovernorGetTokenListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GovernorGetTokenListRequest) Reset() {
	*x = GovernorGetTokenListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetTokenListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetTokenListRequest) ProtoMessage() {}

func (x *GovernorGetTokenListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetTokenListRequest.ProtoReflect.Descriptor instead.
func (*GovernorGetTokenListRequest) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{17}
}

type GovernorGetTokenListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// There is an entry for each token that applies to the notional TVL calcuation.
	Entries []*GovernorGetTokenListResponse_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GovernorGetTokenListResponse) Reset() {
	*x = GovernorGetTokenListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetTokenListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetTokenListResponse) ProtoMessage() {}

func (x *GovernorGetTokenListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetTokenListResponse.ProtoReflect.Descriptor instead.
func (*GovernorGetTokenListResponse) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{18}
}

func (x *GovernorGetTokenListResponse) GetEntries() []*GovernorGetTokenListResponse_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetLastHeartbeatsResponse_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Verified, hex-encoded (with leading 0x) guardian address. This is the guardian address
	// which signed this heartbeat. The GuardianAddr field inside the heartbeat
	// is NOT verified - remote nodes can put arbitrary data in it.
	VerifiedGuardianAddr string `protobuf:"bytes,1,opt,name=verified_guardian_addr,json=verifiedGuardianAddr,proto3" json:"verified_guardian_addr,omitempty"`
	// Base58-encoded libp2p node address that sent this heartbeat, used to
	// distinguish between multiple nodes running for the same guardian.
	P2PNodeAddr string `protobuf:"bytes,2,opt,name=p2p_node_addr,json=p2pNodeAddr,proto3" json:"p2p_node_addr,omitempty"`
	// Raw heartbeat received from the network. Data is only as trusted
	// as the guardian node that sent it - none of the fields are verified.
	RawHeartbeat *v1.Heartbeat `protobuf:"bytes,3,opt,name=raw_heartbeat,json=rawHeartbeat,proto3" json:"raw_heartbeat,omitempty"`
}

func (x *GetLastHeartbeatsResponse_Entry) Reset() {
	*x = GetLastHeartbeatsResponse_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastHeartbeatsResponse_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastHeartbeatsResponse_Entry) ProtoMessage() {}

func (x *GetLastHeartbeatsResponse_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastHeartbeatsResponse_Entry.ProtoReflect.Descriptor instead.
func (*GetLastHeartbeatsResponse_Entry) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetLastHeartbeatsResponse_Entry) GetVerifiedGuardianAddr() string {
	if x != nil {
		return x.VerifiedGuardianAddr
	}
	return ""
}

func (x *GetLastHeartbeatsResponse_Entry) GetP2PNodeAddr() string {
	if x != nil {
		return x.P2PNodeAddr
	}
	return ""
}

func (x *GetLastHeartbeatsResponse_Entry) GetRawHeartbeat() *v1.Heartbeat {
	if x != nil {
		return x.RawHeartbeat
	}
	return nil
}

type GovernorGetAvailableNotionalByChainResponse_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId                    uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	RemainingAvailableNotional uint64 `protobuf:"varint,2,opt,name=remaining_available_notional,json=remainingAvailableNotional,proto3" json:"remaining_available_notional,omitempty"`
	NotionalLimit              uint64 `protobuf:"varint,3,opt,name=notional_limit,json=notionalLimit,proto3" json:"notional_limit,omitempty"`
	BigTransactionSize         uint64 `protobuf:"varint,4,opt,name=big_transaction_size,json=bigTransactionSize,proto3" json:"big_transaction_size,omitempty"`
}

func (x *GovernorGetAvailableNotionalByChainResponse_Entry) Reset() {
	*x = GovernorGetAvailableNotionalByChainResponse_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetAvailableNotionalByChainResponse_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetAvailableNotionalByChainResponse_Entry) ProtoMessage() {}

func (x *GovernorGetAvailableNotionalByChainResponse_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetAvailableNotionalByChainResponse_Entry.ProtoReflect.Descriptor instead.
func (*GovernorGetAvailableNotionalByChainResponse_Entry) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GovernorGetAvailableNotionalByChainResponse_Entry) GetChainId() uint32 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *GovernorGetAvailableNotionalByChainResponse_Entry) GetRemainingAvailableNotional() uint64 {
	if x != nil {
		return x.RemainingAvailableNotional
	}
	return 0
}

func (x *GovernorGetAvailableNotionalByChainResponse_Entry) GetNotionalLimit() uint64 {
	if x != nil {
		return x.NotionalLimit
	}
	return 0
}

func (x *GovernorGetAvailableNotionalByChainResponse_Entry) GetBigTransactionSize() uint64 {
	if x != nil {
		return x.BigTransactionSize
	}
	return 0
}

type GovernorGetEnqueuedVAAsResponse_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmitterChain   uint32 `protobuf:"varint,1,opt,name=emitter_chain,json=emitterChain,proto3" json:"emitter_chain,omitempty"`
	EmitterAddress string `protobuf:"bytes,2,opt,name=emitter_address,json=emitterAddress,proto3" json:"emitter_address,omitempty"` // human-readable hex-encoded (leading 0x)
	Sequence       uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ReleaseTime    uint32 `protobuf:"varint,4,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`
	NotionalValue  uint64 `protobuf:"varint,5,opt,name=notional_value,json=notionalValue,proto3" json:"notional_value,omitempty"`
	TxHash         string `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) Reset() {
	*x = GovernorGetEnqueuedVAAsResponse_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetEnqueuedVAAsResponse_Entry) ProtoMessage() {}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetEnqueuedVAAsResponse_Entry.ProtoReflect.Descriptor instead.
func (*GovernorGetEnqueuedVAAsResponse_Entry) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) GetEmitterChain() uint32 {
	if x != nil {
		return x.EmitterChain
	}
	return 0
}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) GetEmitterAddress() string {
	if x != nil {
		return x.EmitterAddress
	}
	return ""
}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) GetReleaseTime() uint32 {
	if x != nil {
		return x.ReleaseTime
	}
	return 0
}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) GetNotionalValue() uint64 {
	if x != nil {
		return x.NotionalValue
	}
	return 0
}

func (x *GovernorGetEnqueuedVAAsResponse_Entry) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type GovernorGetTokenListResponse_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginChainId uint32  `protobuf:"varint,1,opt,name=origin_chain_id,json=originChainId,proto3" json:"origin_chain_id,omitempty"`
	OriginAddress string  `protobuf:"bytes,2,opt,name=origin_address,json=originAddress,proto3" json:"origin_address,omitempty"` // human-readable hex-encoded (leading 0x)
	Price         float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *GovernorGetTokenListResponse_Entry) Reset() {
	*x = GovernorGetTokenListResponse_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernorGetTokenListResponse_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernorGetTokenListResponse_Entry) ProtoMessage() {}

func (x *GovernorGetTokenListResponse_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_publicrpc_v1_publicrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernorGetTokenListResponse_Entry.ProtoReflect.Descriptor instead.
func (*GovernorGetTokenListResponse_Entry) Descriptor() ([]byte, []int) {
	return file_publicrpc_v1_publicrpc_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GovernorGetTokenListResponse_Entry) GetOriginChainId() uint32 {
	if x != nil {
		return x.OriginChainId
	}
	return 0
}

func (x *GovernorGetTokenListResponse_Entry) GetOriginAddress() string {
	if x != nil {
		return x.OriginAddress
	}
	return ""
}

func (x *GovernorGetTokenListResponse_Entry) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

var File_publicrpc_v1_publicrpc_proto protoreflect.FileDescriptor

var file_publicrpc_v1_publicrpc_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x67, 0x6f,
	0x73, 0x73, 0x69, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x3a, 0x0a, 0x0d, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x0c,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x70, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0d,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x0c, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x56, 0x41, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x33, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56,
	0x41, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61,
	0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76,
	0x61, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x41, 0x41, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x41, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x76, 0x61, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x56, 0x41, 0x41, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x61,
	0x61, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x02,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x32, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x32, 0x70,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69,
	0x61, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x22, 0x41, 0x0a, 0x0b, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x2a, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f,
	0x72, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x2b, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xbd,
	0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x62, 0x69, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x62, 0x69, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x20,
	0x0a, 0x1e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x56, 0x41, 0x41, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xc7, 0x02, 0x0a, 0x1f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x56, 0x41, 0x41, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x56, 0x41, 0x41, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x1a, 0xd4, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x56, 0x0a, 0x1c, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x49, 0x73, 0x56, 0x41, 0x41, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x40, 0x0a, 0x1d, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x49, 0x73,
	0x56, 0x41, 0x41, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0x6c, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2a, 0x97,
	0x05, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x52,
	0x52, 0x41, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x42, 0x53, 0x43, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x56, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x48, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x41, 0x53, 0x49, 0x53, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x08, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x52, 0x4f,
	0x52, 0x41, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x4e, 0x54, 0x4f, 0x4d, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x41, 0x52, 0x55, 0x52, 0x41, 0x10, 0x0b, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x41, 0x4c, 0x41,
	0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4b,
	0x4c, 0x41, 0x59, 0x54, 0x4e, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4f, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x0f, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x4f, 0x4e, 0x42, 0x45,
	0x41, 0x4d, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x45, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x41, 0x32, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x4a, 0x45, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x53, 0x4d, 0x4f, 0x53, 0x49, 0x53, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x49, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x54, 0x4f, 0x53, 0x10, 0x16,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x42,
	0x49, 0x54, 0x52, 0x55, 0x4d, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x4d, 0x10, 0x18, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x4e, 0x4f, 0x53, 0x49,
	0x53, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x59, 0x54, 0x48, 0x4e, 0x45, 0x54, 0x10, 0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x58, 0x50, 0x4c, 0x41, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x54, 0x43, 0x10, 0x1d, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x1e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x50, 0x4f, 0x4c, 0x49, 0x41, 0x10, 0x92, 0x4e, 0x32, 0x86, 0x0b, 0x0a, 0x10, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x50, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x41, 0x41, 0x12, 0x21, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x41, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x56, 0x41, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x12, 0x5c, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x2e, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x2e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x41, 0x41, 0x12,
	0x26, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x41, 0x41,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x41, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x12, 0x4f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x61, 0x2f, 0x7b,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x2e, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x2e, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x2e, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69,
	0x61, 0x6e, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xcc, 0x01,
	0x0a, 0x23, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x38, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72,
	0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x9a, 0x01, 0x0a,
	0x17, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x56, 0x41, 0x41, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x56, 0x41, 0x41, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x56, 0x41, 0x41, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x2f, 0x65, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x61, 0x73, 0x12, 0xe4, 0x01, 0x0a, 0x15, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x49, 0x73, 0x56, 0x41, 0x41, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x49, 0x73, 0x56, 0x41, 0x41,
	0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x49, 0x73, 0x56, 0x41, 0x41, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6c, 0x12, 0x6a, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6f, 0x72, 0x2f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x61, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x65,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x7b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x7d,
	0x12, 0x8e, 0x01, 0x0a, 0x14, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f,
	0x72, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x75, 0x73, 0x6f, 0x6e, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6d, 0x68, 0x6f,
	0x6c, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x70, 0x63, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_publicrpc_v1_publicrpc_proto_rawDescOnce sync.Once
	file_publicrpc_v1_publicrpc_proto_rawDescData = file_publicrpc_v1_publicrpc_proto_rawDesc
)

func file_publicrpc_v1_publicrpc_proto_rawDescGZIP() []byte {
	file_publicrpc_v1_publicrpc_proto_rawDescOnce.Do(func() {
		file_publicrpc_v1_publicrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_publicrpc_v1_publicrpc_proto_rawDescData)
	})
	return file_publicrpc_v1_publicrpc_proto_rawDescData
}

var file_publicrpc_v1_publicrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_publicrpc_v1_publicrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_publicrpc_v1_publicrpc_proto_goTypes = []interface{}{
	(ChainID)(0),                                              // 0: publicrpc.v1.ChainID
	(*MessageID)(nil),                                         // 1: publicrpc.v1.MessageID
	(*BatchID)(nil),                                           // 2: publicrpc.v1.BatchID
	(*GetSignedVAARequest)(nil),                               // 3: publicrpc.v1.GetSignedVAARequest
	(*GetSignedVAAResponse)(nil),                              // 4: publicrpc.v1.GetSignedVAAResponse
	(*GetSignedBatchVAARequest)(nil),                          // 5: publicrpc.v1.GetSignedBatchVAARequest
	(*GetSignedBatchVAAResponse)(nil),                         // 6: publicrpc.v1.GetSignedBatchVAAResponse
	(*GetLastHeartbeatsRequest)(nil),                          // 7: publicrpc.v1.GetLastHeartbeatsRequest
	(*GetLastHeartbeatsResponse)(nil),                         // 8: publicrpc.v1.GetLastHeartbeatsResponse
	(*GetCurrentGuardianSetRequest)(nil),                      // 9: publicrpc.v1.GetCurrentGuardianSetRequest
	(*GetCurrentGuardianSetResponse)(nil),                     // 10: publicrpc.v1.GetCurrentGuardianSetResponse
	(*GuardianSet)(nil),                                       // 11: publicrpc.v1.GuardianSet
	(*GovernorGetAvailableNotionalByChainRequest)(nil),        // 12: publicrpc.v1.GovernorGetAvailableNotionalByChainRequest
	(*GovernorGetAvailableNotionalByChainResponse)(nil),       // 13: publicrpc.v1.GovernorGetAvailableNotionalByChainResponse
	(*GovernorGetEnqueuedVAAsRequest)(nil),                    // 14: publicrpc.v1.GovernorGetEnqueuedVAAsRequest
	(*GovernorGetEnqueuedVAAsResponse)(nil),                   // 15: publicrpc.v1.GovernorGetEnqueuedVAAsResponse
	(*GovernorIsVAAEnqueuedRequest)(nil),                      // 16: publicrpc.v1.GovernorIsVAAEnqueuedRequest
	(*GovernorIsVAAEnqueuedResponse)(nil),                     // 17: publicrpc.v1.GovernorIsVAAEnqueuedResponse
	(*GovernorGetTokenListRequest)(nil),                       // 18: publicrpc.v1.GovernorGetTokenListRequest
	(*GovernorGetTokenListResponse)(nil),                      // 19: publicrpc.v1.GovernorGetTokenListResponse
	(*GetLastHeartbeatsResponse_Entry)(nil),                   // 20: publicrpc.v1.GetLastHeartbeatsResponse.Entry
	(*GovernorGetAvailableNotionalByChainResponse_Entry)(nil), // 21: publicrpc.v1.GovernorGetAvailableNotionalByChainResponse.Entry
	(*GovernorGetEnqueuedVAAsResponse_Entry)(nil),             // 22: publicrpc.v1.GovernorGetEnqueuedVAAsResponse.Entry
	(*GovernorGetTokenListResponse_Entry)(nil),                // 23: publicrpc.v1.GovernorGetTokenListResponse.Entry
	(*v1.SignedBatchVAAWithQuorum)(nil),                       // 24: gossip.v1.SignedBatchVAAWithQuorum
	(*v1.Heartbeat)(nil),                                      // 25: gossip.v1.Heartbeat
}
var file_publicrpc_v1_publicrpc_proto_depIdxs = []int32{
	0,  // 0: publicrpc.v1.MessageID.emitter_chain:type_name -> publicrpc.v1.ChainID
	0,  // 1: publicrpc.v1.BatchID.emitter_chain:type_name -> publicrpc.v1.ChainID
	1,  // 2: publicrpc.v1.GetSignedVAARequest.message_id:type_name -> publicrpc.v1.MessageID
	2,  // 3: publicrpc.v1.GetSignedBatchVAARequest.batch_id:type_name -> publicrpc.v1.BatchID
	24, // 4: publicrpc.v1.GetSignedBatchVAAResponse.signed_batch_vaa:type_name -> gossip.v1.SignedBatchVAAWithQuorum
	20, // 5: publicrpc.v1.GetLastHeartbeatsResponse.entries:type_name -> publicrpc.v1.GetLastHeartbeatsResponse.Entry
	11, // 6: publicrpc.v1.GetCurrentGuardianSetResponse.guardian_set:type_name -> publicrpc.v1.GuardianSet
	21, // 7: publicrpc.v1.GovernorGetAvailableNotionalByChainResponse.entries:type_name -> publicrpc.v1.GovernorGetAvailableNotionalByChainResponse.Entry
	22, // 8: publicrpc.v1.GovernorGetEnqueuedVAAsResponse.entries:type_name -> publicrpc.v1.GovernorGetEnqueuedVAAsResponse.Entry
	1,  // 9: publicrpc.v1.GovernorIsVAAEnqueuedRequest.message_id:type_name -> publicrpc.v1.MessageID
	23, // 10: publicrpc.v1.GovernorGetTokenListResponse.entries:type_name -> publicrpc.v1.GovernorGetTokenListResponse.Entry
	25, // 11: publicrpc.v1.GetLastHeartbeatsResponse.Entry.raw_heartbeat:type_name -> gossip.v1.Heartbeat
	7,  // 12: publicrpc.v1.PublicRPCService.GetLastHeartbeats:input_type -> publicrpc.v1.GetLastHeartbeatsRequest
	3,  // 13: publicrpc.v1.PublicRPCService.GetSignedVAA:input_type -> publicrpc.v1.GetSignedVAARequest
	5,  // 14: publicrpc.v1.PublicRPCService.GetSignedBatchVAA:input_type -> publicrpc.v1.GetSignedBatchVAARequest
	9,  // 15: publicrpc.v1.PublicRPCService.GetCurrentGuardianSet:input_type -> publicrpc.v1.GetCurrentGuardianSetRequest
	12, // 16: publicrpc.v1.PublicRPCService.GovernorGetAvailableNotionalByChain:input_type -> publicrpc.v1.GovernorGetAvailableNotionalByChainRequest
	14, // 17: publicrpc.v1.PublicRPCService.GovernorGetEnqueuedVAAs:input_type -> publicrpc.v1.GovernorGetEnqueuedVAAsRequest
	16, // 18: publicrpc.v1.PublicRPCService.GovernorIsVAAEnqueued:input_type -> publicrpc.v1.GovernorIsVAAEnqueuedRequest
	18, // 19: publicrpc.v1.PublicRPCService.GovernorGetTokenList:input_type -> publicrpc.v1.GovernorGetTokenListRequest
	8,  // 20: publicrpc.v1.PublicRPCService.GetLastHeartbeats:output_type -> publicrpc.v1.GetLastHeartbeatsResponse
	4,  // 21: publicrpc.v1.PublicRPCService.GetSignedVAA:output_type -> publicrpc.v1.GetSignedVAAResponse
	6,  // 22: publicrpc.v1.PublicRPCService.GetSignedBatchVAA:output_type -> publicrpc.v1.GetSignedBatchVAAResponse
	10, // 23: publicrpc.v1.PublicRPCService.GetCurrentGuardianSet:output_type -> publicrpc.v1.GetCurrentGuardianSetResponse
	13, // 24: publicrpc.v1.PublicRPCService.GovernorGetAvailableNotionalByChain:output_type -> publicrpc.v1.GovernorGetAvailableNotionalByChainResponse
	15, // 25: publicrpc.v1.PublicRPCService.GovernorGetEnqueuedVAAs:output_type -> publicrpc.v1.GovernorGetEnqueuedVAAsResponse
	17, // 26: publicrpc.v1.PublicRPCService.GovernorIsVAAEnqueued:output_type -> publicrpc.v1.GovernorIsVAAEnqueuedResponse
	19, // 27: publicrpc.v1.PublicRPCService.GovernorGetTokenList:output_type -> publicrpc.v1.GovernorGetTokenListResponse
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_publicrpc_v1_publicrpc_proto_init() }
func file_publicrpc_v1_publicrpc_proto_init() {
	if File_publicrpc_v1_publicrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_publicrpc_v1_publicrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignedVAARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignedVAAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignedBatchVAARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSignedBatchVAAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastHeartbeatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastHeartbeatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentGuardianSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentGuardianSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetAvailableNotionalByChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetAvailableNotionalByChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetEnqueuedVAAsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetEnqueuedVAAsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorIsVAAEnqueuedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorIsVAAEnqueuedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetTokenListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetTokenListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastHeartbeatsResponse_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetAvailableNotionalByChainResponse_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetEnqueuedVAAsResponse_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicrpc_v1_publicrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernorGetTokenListResponse_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_publicrpc_v1_publicrpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_publicrpc_v1_publicrpc_proto_goTypes,
		DependencyIndexes: file_publicrpc_v1_publicrpc_proto_depIdxs,
		EnumInfos:         file_publicrpc_v1_publicrpc_proto_enumTypes,
		MessageInfos:      file_publicrpc_v1_publicrpc_proto_msgTypes,
	}.Build()
	File_publicrpc_v1_publicrpc_proto = out.File
	file_publicrpc_v1_publicrpc_proto_rawDesc = nil
	file_publicrpc_v1_publicrpc_proto_goTypes = nil
	file_publicrpc_v1_publicrpc_proto_depIdxs = nil
}
