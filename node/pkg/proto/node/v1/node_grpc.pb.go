// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nodev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodePrivilegedServiceClient is the client API for NodePrivilegedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodePrivilegedServiceClient interface {
	// InjectGovernanceVAA injects a governance VAA into the guardian node.
	// The node will inject the VAA into the aggregator and sign/broadcast the VAA signature.
	//
	// A consensus majority of nodes on the network will have to inject the VAA within the
	// VAA timeout window for it to reach consensus.
	InjectGovernanceVAA(ctx context.Context, in *InjectGovernanceVAARequest, opts ...grpc.CallOption) (*InjectGovernanceVAAResponse, error)
	// FindMissingMessages will detect message sequence gaps in the local VAA store for a
	// specific emitter chain and address. Start and end slots are the lowest and highest
	// sequence numbers available in the local store, respectively.
	//
	// An error is returned if more than 1000 gaps are found.
	FindMissingMessages(ctx context.Context, in *FindMissingMessagesRequest, opts ...grpc.CallOption) (*FindMissingMessagesResponse, error)
	// SendObservationRequest broadcasts a signed observation request to the gossip network
	// using the node's guardian key. The network rate limits these requests to one per second.
	// Requests at higher rates will fail silently.
	SendObservationRequest(ctx context.Context, in *SendObservationRequestRequest, opts ...grpc.CallOption) (*SendObservationRequestResponse, error)
	// ReobserveWithEndpoint performs a local reobservation request using the specified endpoint.
	ReobserveWithEndpoint(ctx context.Context, in *ReobserveWithEndpointRequest, opts ...grpc.CallOption) (*ReobserveWithEndpointResponse, error)
	// ChainGovernorStatus displays the status of the chain governor.
	ChainGovernorStatus(ctx context.Context, in *ChainGovernorStatusRequest, opts ...grpc.CallOption) (*ChainGovernorStatusResponse, error)
	// ChainGovernorReload clears the chain governor history and reloads it from the database.
	ChainGovernorReload(ctx context.Context, in *ChainGovernorReloadRequest, opts ...grpc.CallOption) (*ChainGovernorReloadResponse, error)
	// ChainGovernorDropPendingVAA drops a VAA from the chain governor pending list.
	ChainGovernorDropPendingVAA(ctx context.Context, in *ChainGovernorDropPendingVAARequest, opts ...grpc.CallOption) (*ChainGovernorDropPendingVAAResponse, error)
	// ChainGovernorReleasePendingVAA release a VAA from the chain governor pending list, publishing it immediately.
	ChainGovernorReleasePendingVAA(ctx context.Context, in *ChainGovernorReleasePendingVAARequest, opts ...grpc.CallOption) (*ChainGovernorReleasePendingVAAResponse, error)
	// ChainGovernorResetReleaseTimer resets the release timer for a chain governor pending VAA to the configured maximum.
	ChainGovernorResetReleaseTimer(ctx context.Context, in *ChainGovernorResetReleaseTimerRequest, opts ...grpc.CallOption) (*ChainGovernorResetReleaseTimerResponse, error)
	// NotaryBlackholeDelayedMessage blacklists a VAA from the notary pending list.
	NotaryBlackholeDelayedMessage(ctx context.Context, in *NotaryBlackholeDelayedMessageRequest, opts ...grpc.CallOption) (*NotaryBlackholeDelayedMessageResponse, error)
	// NotaryReleaseDelayedMessage releases a VAA from the notary pending list, publishing it immediately.
	NotaryReleaseDelayedMessage(ctx context.Context, in *NotaryReleaseDelayedMessageRequest, opts ...grpc.CallOption) (*NotaryReleaseDelayedMessageResponse, error)
	// NotaryRemoveBlackholedMessage removes a VAA from the notary's blackholed list and adds it to the pending list with a release timer of 0.
	NotaryRemoveBlackholedMessage(ctx context.Context, in *NotaryRemoveBlackholedMessageRequest, opts ...grpc.CallOption) (*NotaryRemoveBlackholedMessageResponse, error)
	// NotaryResetReleaseTimer resets the release timer for a notary pending VAA to supplied number of days.
	NotaryResetReleaseTimer(ctx context.Context, in *NotaryResetReleaseTimerRequest, opts ...grpc.CallOption) (*NotaryResetReleaseTimerResponse, error)
	// NotaryInjectDelayedMessage creates a synthetic delayed message for testing (dev mode only).
	NotaryInjectDelayedMessage(ctx context.Context, in *NotaryInjectDelayedMessageRequest, opts ...grpc.CallOption) (*NotaryInjectDelayedMessageResponse, error)
	// NotaryInjectBlackholedMessage creates a synthetic blackholed message for testing (dev mode only).
	NotaryInjectBlackholedMessage(ctx context.Context, in *NotaryInjectBlackholedMessageRequest, opts ...grpc.CallOption) (*NotaryInjectBlackholedMessageResponse, error)
	// NotaryGetDelayedMessage retrieves details about a delayed message.
	NotaryGetDelayedMessage(ctx context.Context, in *NotaryGetDelayedMessageRequest, opts ...grpc.CallOption) (*NotaryGetDelayedMessageResponse, error)
	// NotaryGetBlackholedMessage retrieves details about a blackholed message.
	NotaryGetBlackholedMessage(ctx context.Context, in *NotaryGetBlackholedMessageRequest, opts ...grpc.CallOption) (*NotaryGetBlackholedMessageResponse, error)
	// NotaryListDelayedMessages lists all delayed message IDs.
	NotaryListDelayedMessages(ctx context.Context, in *NotaryListDelayedMessagesRequest, opts ...grpc.CallOption) (*NotaryListDelayedMessagesResponse, error)
	// NotaryListBlackholedMessages lists all blackholed message IDs.
	NotaryListBlackholedMessages(ctx context.Context, in *NotaryListBlackholedMessagesRequest, opts ...grpc.CallOption) (*NotaryListBlackholedMessagesResponse, error)
	// PurgePythNetVaas deletes PythNet VAAs from the database that are more than the specified number of days old.
	PurgePythNetVaas(ctx context.Context, in *PurgePythNetVaasRequest, opts ...grpc.CallOption) (*PurgePythNetVaasResponse, error)
	// SignExistingVAA signs an existing VAA for a new guardian set using the local guardian key.
	SignExistingVAA(ctx context.Context, in *SignExistingVAARequest, opts ...grpc.CallOption) (*SignExistingVAAResponse, error)
	// DumpRPCs returns the RPCs being used by the guardian
	DumpRPCs(ctx context.Context, in *DumpRPCsRequest, opts ...grpc.CallOption) (*DumpRPCsResponse, error)
	// GetMissingVAAs returns the VAAs from a cloud function that need to be reobserved.
	GetAndObserveMissingVAAs(ctx context.Context, in *GetAndObserveMissingVAAsRequest, opts ...grpc.CallOption) (*GetAndObserveMissingVAAsResponse, error)
}

type nodePrivilegedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodePrivilegedServiceClient(cc grpc.ClientConnInterface) NodePrivilegedServiceClient {
	return &nodePrivilegedServiceClient{cc}
}

func (c *nodePrivilegedServiceClient) InjectGovernanceVAA(ctx context.Context, in *InjectGovernanceVAARequest, opts ...grpc.CallOption) (*InjectGovernanceVAAResponse, error) {
	out := new(InjectGovernanceVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/InjectGovernanceVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) FindMissingMessages(ctx context.Context, in *FindMissingMessagesRequest, opts ...grpc.CallOption) (*FindMissingMessagesResponse, error) {
	out := new(FindMissingMessagesResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/FindMissingMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) SendObservationRequest(ctx context.Context, in *SendObservationRequestRequest, opts ...grpc.CallOption) (*SendObservationRequestResponse, error) {
	out := new(SendObservationRequestResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/SendObservationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ReobserveWithEndpoint(ctx context.Context, in *ReobserveWithEndpointRequest, opts ...grpc.CallOption) (*ReobserveWithEndpointResponse, error) {
	out := new(ReobserveWithEndpointResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ReobserveWithEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorStatus(ctx context.Context, in *ChainGovernorStatusRequest, opts ...grpc.CallOption) (*ChainGovernorStatusResponse, error) {
	out := new(ChainGovernorStatusResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorReload(ctx context.Context, in *ChainGovernorReloadRequest, opts ...grpc.CallOption) (*ChainGovernorReloadResponse, error) {
	out := new(ChainGovernorReloadResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorDropPendingVAA(ctx context.Context, in *ChainGovernorDropPendingVAARequest, opts ...grpc.CallOption) (*ChainGovernorDropPendingVAAResponse, error) {
	out := new(ChainGovernorDropPendingVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorDropPendingVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorReleasePendingVAA(ctx context.Context, in *ChainGovernorReleasePendingVAARequest, opts ...grpc.CallOption) (*ChainGovernorReleasePendingVAAResponse, error) {
	out := new(ChainGovernorReleasePendingVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorReleasePendingVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorResetReleaseTimer(ctx context.Context, in *ChainGovernorResetReleaseTimerRequest, opts ...grpc.CallOption) (*ChainGovernorResetReleaseTimerResponse, error) {
	out := new(ChainGovernorResetReleaseTimerResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorResetReleaseTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryBlackholeDelayedMessage(ctx context.Context, in *NotaryBlackholeDelayedMessageRequest, opts ...grpc.CallOption) (*NotaryBlackholeDelayedMessageResponse, error) {
	out := new(NotaryBlackholeDelayedMessageResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryBlackholeDelayedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryReleaseDelayedMessage(ctx context.Context, in *NotaryReleaseDelayedMessageRequest, opts ...grpc.CallOption) (*NotaryReleaseDelayedMessageResponse, error) {
	out := new(NotaryReleaseDelayedMessageResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryReleaseDelayedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryRemoveBlackholedMessage(ctx context.Context, in *NotaryRemoveBlackholedMessageRequest, opts ...grpc.CallOption) (*NotaryRemoveBlackholedMessageResponse, error) {
	out := new(NotaryRemoveBlackholedMessageResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryRemoveBlackholedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryResetReleaseTimer(ctx context.Context, in *NotaryResetReleaseTimerRequest, opts ...grpc.CallOption) (*NotaryResetReleaseTimerResponse, error) {
	out := new(NotaryResetReleaseTimerResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryResetReleaseTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryInjectDelayedMessage(ctx context.Context, in *NotaryInjectDelayedMessageRequest, opts ...grpc.CallOption) (*NotaryInjectDelayedMessageResponse, error) {
	out := new(NotaryInjectDelayedMessageResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryInjectDelayedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryInjectBlackholedMessage(ctx context.Context, in *NotaryInjectBlackholedMessageRequest, opts ...grpc.CallOption) (*NotaryInjectBlackholedMessageResponse, error) {
	out := new(NotaryInjectBlackholedMessageResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryInjectBlackholedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryGetDelayedMessage(ctx context.Context, in *NotaryGetDelayedMessageRequest, opts ...grpc.CallOption) (*NotaryGetDelayedMessageResponse, error) {
	out := new(NotaryGetDelayedMessageResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryGetDelayedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryGetBlackholedMessage(ctx context.Context, in *NotaryGetBlackholedMessageRequest, opts ...grpc.CallOption) (*NotaryGetBlackholedMessageResponse, error) {
	out := new(NotaryGetBlackholedMessageResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryGetBlackholedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryListDelayedMessages(ctx context.Context, in *NotaryListDelayedMessagesRequest, opts ...grpc.CallOption) (*NotaryListDelayedMessagesResponse, error) {
	out := new(NotaryListDelayedMessagesResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryListDelayedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) NotaryListBlackholedMessages(ctx context.Context, in *NotaryListBlackholedMessagesRequest, opts ...grpc.CallOption) (*NotaryListBlackholedMessagesResponse, error) {
	out := new(NotaryListBlackholedMessagesResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/NotaryListBlackholedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) PurgePythNetVaas(ctx context.Context, in *PurgePythNetVaasRequest, opts ...grpc.CallOption) (*PurgePythNetVaasResponse, error) {
	out := new(PurgePythNetVaasResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/PurgePythNetVaas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) SignExistingVAA(ctx context.Context, in *SignExistingVAARequest, opts ...grpc.CallOption) (*SignExistingVAAResponse, error) {
	out := new(SignExistingVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/SignExistingVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) DumpRPCs(ctx context.Context, in *DumpRPCsRequest, opts ...grpc.CallOption) (*DumpRPCsResponse, error) {
	out := new(DumpRPCsResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/DumpRPCs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) GetAndObserveMissingVAAs(ctx context.Context, in *GetAndObserveMissingVAAsRequest, opts ...grpc.CallOption) (*GetAndObserveMissingVAAsResponse, error) {
	out := new(GetAndObserveMissingVAAsResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/GetAndObserveMissingVAAs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodePrivilegedServiceServer is the server API for NodePrivilegedService service.
// All implementations must embed UnimplementedNodePrivilegedServiceServer
// for forward compatibility
type NodePrivilegedServiceServer interface {
	// InjectGovernanceVAA injects a governance VAA into the guardian node.
	// The node will inject the VAA into the aggregator and sign/broadcast the VAA signature.
	//
	// A consensus majority of nodes on the network will have to inject the VAA within the
	// VAA timeout window for it to reach consensus.
	InjectGovernanceVAA(context.Context, *InjectGovernanceVAARequest) (*InjectGovernanceVAAResponse, error)
	// FindMissingMessages will detect message sequence gaps in the local VAA store for a
	// specific emitter chain and address. Start and end slots are the lowest and highest
	// sequence numbers available in the local store, respectively.
	//
	// An error is returned if more than 1000 gaps are found.
	FindMissingMessages(context.Context, *FindMissingMessagesRequest) (*FindMissingMessagesResponse, error)
	// SendObservationRequest broadcasts a signed observation request to the gossip network
	// using the node's guardian key. The network rate limits these requests to one per second.
	// Requests at higher rates will fail silently.
	SendObservationRequest(context.Context, *SendObservationRequestRequest) (*SendObservationRequestResponse, error)
	// ReobserveWithEndpoint performs a local reobservation request using the specified endpoint.
	ReobserveWithEndpoint(context.Context, *ReobserveWithEndpointRequest) (*ReobserveWithEndpointResponse, error)
	// ChainGovernorStatus displays the status of the chain governor.
	ChainGovernorStatus(context.Context, *ChainGovernorStatusRequest) (*ChainGovernorStatusResponse, error)
	// ChainGovernorReload clears the chain governor history and reloads it from the database.
	ChainGovernorReload(context.Context, *ChainGovernorReloadRequest) (*ChainGovernorReloadResponse, error)
	// ChainGovernorDropPendingVAA drops a VAA from the chain governor pending list.
	ChainGovernorDropPendingVAA(context.Context, *ChainGovernorDropPendingVAARequest) (*ChainGovernorDropPendingVAAResponse, error)
	// ChainGovernorReleasePendingVAA release a VAA from the chain governor pending list, publishing it immediately.
	ChainGovernorReleasePendingVAA(context.Context, *ChainGovernorReleasePendingVAARequest) (*ChainGovernorReleasePendingVAAResponse, error)
	// ChainGovernorResetReleaseTimer resets the release timer for a chain governor pending VAA to the configured maximum.
	ChainGovernorResetReleaseTimer(context.Context, *ChainGovernorResetReleaseTimerRequest) (*ChainGovernorResetReleaseTimerResponse, error)
	// NotaryBlackholeDelayedMessage blacklists a VAA from the notary pending list.
	NotaryBlackholeDelayedMessage(context.Context, *NotaryBlackholeDelayedMessageRequest) (*NotaryBlackholeDelayedMessageResponse, error)
	// NotaryReleaseDelayedMessage releases a VAA from the notary pending list, publishing it immediately.
	NotaryReleaseDelayedMessage(context.Context, *NotaryReleaseDelayedMessageRequest) (*NotaryReleaseDelayedMessageResponse, error)
	// NotaryRemoveBlackholedMessage removes a VAA from the notary's blackholed list and adds it to the pending list with a release timer of 0.
	NotaryRemoveBlackholedMessage(context.Context, *NotaryRemoveBlackholedMessageRequest) (*NotaryRemoveBlackholedMessageResponse, error)
	// NotaryResetReleaseTimer resets the release timer for a notary pending VAA to supplied number of days.
	NotaryResetReleaseTimer(context.Context, *NotaryResetReleaseTimerRequest) (*NotaryResetReleaseTimerResponse, error)
	// NotaryInjectDelayedMessage creates a synthetic delayed message for testing (dev mode only).
	NotaryInjectDelayedMessage(context.Context, *NotaryInjectDelayedMessageRequest) (*NotaryInjectDelayedMessageResponse, error)
	// NotaryInjectBlackholedMessage creates a synthetic blackholed message for testing (dev mode only).
	NotaryInjectBlackholedMessage(context.Context, *NotaryInjectBlackholedMessageRequest) (*NotaryInjectBlackholedMessageResponse, error)
	// NotaryGetDelayedMessage retrieves details about a delayed message.
	NotaryGetDelayedMessage(context.Context, *NotaryGetDelayedMessageRequest) (*NotaryGetDelayedMessageResponse, error)
	// NotaryGetBlackholedMessage retrieves details about a blackholed message.
	NotaryGetBlackholedMessage(context.Context, *NotaryGetBlackholedMessageRequest) (*NotaryGetBlackholedMessageResponse, error)
	// NotaryListDelayedMessages lists all delayed message IDs.
	NotaryListDelayedMessages(context.Context, *NotaryListDelayedMessagesRequest) (*NotaryListDelayedMessagesResponse, error)
	// NotaryListBlackholedMessages lists all blackholed message IDs.
	NotaryListBlackholedMessages(context.Context, *NotaryListBlackholedMessagesRequest) (*NotaryListBlackholedMessagesResponse, error)
	// PurgePythNetVaas deletes PythNet VAAs from the database that are more than the specified number of days old.
	PurgePythNetVaas(context.Context, *PurgePythNetVaasRequest) (*PurgePythNetVaasResponse, error)
	// SignExistingVAA signs an existing VAA for a new guardian set using the local guardian key.
	SignExistingVAA(context.Context, *SignExistingVAARequest) (*SignExistingVAAResponse, error)
	// DumpRPCs returns the RPCs being used by the guardian
	DumpRPCs(context.Context, *DumpRPCsRequest) (*DumpRPCsResponse, error)
	// GetMissingVAAs returns the VAAs from a cloud function that need to be reobserved.
	GetAndObserveMissingVAAs(context.Context, *GetAndObserveMissingVAAsRequest) (*GetAndObserveMissingVAAsResponse, error)
	mustEmbedUnimplementedNodePrivilegedServiceServer()
}

// UnimplementedNodePrivilegedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodePrivilegedServiceServer struct {
}

func (UnimplementedNodePrivilegedServiceServer) InjectGovernanceVAA(context.Context, *InjectGovernanceVAARequest) (*InjectGovernanceVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectGovernanceVAA not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) FindMissingMessages(context.Context, *FindMissingMessagesRequest) (*FindMissingMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMissingMessages not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) SendObservationRequest(context.Context, *SendObservationRequestRequest) (*SendObservationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendObservationRequest not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ReobserveWithEndpoint(context.Context, *ReobserveWithEndpointRequest) (*ReobserveWithEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReobserveWithEndpoint not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorStatus(context.Context, *ChainGovernorStatusRequest) (*ChainGovernorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorStatus not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorReload(context.Context, *ChainGovernorReloadRequest) (*ChainGovernorReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorReload not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorDropPendingVAA(context.Context, *ChainGovernorDropPendingVAARequest) (*ChainGovernorDropPendingVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorDropPendingVAA not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorReleasePendingVAA(context.Context, *ChainGovernorReleasePendingVAARequest) (*ChainGovernorReleasePendingVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorReleasePendingVAA not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorResetReleaseTimer(context.Context, *ChainGovernorResetReleaseTimerRequest) (*ChainGovernorResetReleaseTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorResetReleaseTimer not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryBlackholeDelayedMessage(context.Context, *NotaryBlackholeDelayedMessageRequest) (*NotaryBlackholeDelayedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryBlackholeDelayedMessage not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryReleaseDelayedMessage(context.Context, *NotaryReleaseDelayedMessageRequest) (*NotaryReleaseDelayedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryReleaseDelayedMessage not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryRemoveBlackholedMessage(context.Context, *NotaryRemoveBlackholedMessageRequest) (*NotaryRemoveBlackholedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryRemoveBlackholedMessage not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryResetReleaseTimer(context.Context, *NotaryResetReleaseTimerRequest) (*NotaryResetReleaseTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryResetReleaseTimer not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryInjectDelayedMessage(context.Context, *NotaryInjectDelayedMessageRequest) (*NotaryInjectDelayedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryInjectDelayedMessage not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryInjectBlackholedMessage(context.Context, *NotaryInjectBlackholedMessageRequest) (*NotaryInjectBlackholedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryInjectBlackholedMessage not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryGetDelayedMessage(context.Context, *NotaryGetDelayedMessageRequest) (*NotaryGetDelayedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryGetDelayedMessage not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryGetBlackholedMessage(context.Context, *NotaryGetBlackholedMessageRequest) (*NotaryGetBlackholedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryGetBlackholedMessage not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryListDelayedMessages(context.Context, *NotaryListDelayedMessagesRequest) (*NotaryListDelayedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryListDelayedMessages not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) NotaryListBlackholedMessages(context.Context, *NotaryListBlackholedMessagesRequest) (*NotaryListBlackholedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotaryListBlackholedMessages not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) PurgePythNetVaas(context.Context, *PurgePythNetVaasRequest) (*PurgePythNetVaasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgePythNetVaas not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) SignExistingVAA(context.Context, *SignExistingVAARequest) (*SignExistingVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignExistingVAA not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) DumpRPCs(context.Context, *DumpRPCsRequest) (*DumpRPCsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpRPCs not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) GetAndObserveMissingVAAs(context.Context, *GetAndObserveMissingVAAsRequest) (*GetAndObserveMissingVAAsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAndObserveMissingVAAs not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) mustEmbedUnimplementedNodePrivilegedServiceServer() {}

// UnsafeNodePrivilegedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodePrivilegedServiceServer will
// result in compilation errors.
type UnsafeNodePrivilegedServiceServer interface {
	mustEmbedUnimplementedNodePrivilegedServiceServer()
}

func RegisterNodePrivilegedServiceServer(s grpc.ServiceRegistrar, srv NodePrivilegedServiceServer) {
	s.RegisterService(&NodePrivilegedService_ServiceDesc, srv)
}

func _NodePrivilegedService_InjectGovernanceVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectGovernanceVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).InjectGovernanceVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/InjectGovernanceVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).InjectGovernanceVAA(ctx, req.(*InjectGovernanceVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_FindMissingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMissingMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).FindMissingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/FindMissingMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).FindMissingMessages(ctx, req.(*FindMissingMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_SendObservationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendObservationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).SendObservationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/SendObservationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).SendObservationRequest(ctx, req.(*SendObservationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ReobserveWithEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReobserveWithEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ReobserveWithEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ReobserveWithEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ReobserveWithEndpoint(ctx, req.(*ReobserveWithEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorStatus(ctx, req.(*ChainGovernorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorReload(ctx, req.(*ChainGovernorReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorDropPendingVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorDropPendingVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorDropPendingVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorDropPendingVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorDropPendingVAA(ctx, req.(*ChainGovernorDropPendingVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorReleasePendingVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorReleasePendingVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorReleasePendingVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorReleasePendingVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorReleasePendingVAA(ctx, req.(*ChainGovernorReleasePendingVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorResetReleaseTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorResetReleaseTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorResetReleaseTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorResetReleaseTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorResetReleaseTimer(ctx, req.(*ChainGovernorResetReleaseTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryBlackholeDelayedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryBlackholeDelayedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryBlackholeDelayedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryBlackholeDelayedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryBlackholeDelayedMessage(ctx, req.(*NotaryBlackholeDelayedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryReleaseDelayedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryReleaseDelayedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryReleaseDelayedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryReleaseDelayedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryReleaseDelayedMessage(ctx, req.(*NotaryReleaseDelayedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryRemoveBlackholedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryRemoveBlackholedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryRemoveBlackholedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryRemoveBlackholedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryRemoveBlackholedMessage(ctx, req.(*NotaryRemoveBlackholedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryResetReleaseTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryResetReleaseTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryResetReleaseTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryResetReleaseTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryResetReleaseTimer(ctx, req.(*NotaryResetReleaseTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryInjectDelayedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryInjectDelayedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryInjectDelayedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryInjectDelayedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryInjectDelayedMessage(ctx, req.(*NotaryInjectDelayedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryInjectBlackholedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryInjectBlackholedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryInjectBlackholedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryInjectBlackholedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryInjectBlackholedMessage(ctx, req.(*NotaryInjectBlackholedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryGetDelayedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryGetDelayedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryGetDelayedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryGetDelayedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryGetDelayedMessage(ctx, req.(*NotaryGetDelayedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryGetBlackholedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryGetBlackholedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryGetBlackholedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryGetBlackholedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryGetBlackholedMessage(ctx, req.(*NotaryGetBlackholedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryListDelayedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryListDelayedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryListDelayedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryListDelayedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryListDelayedMessages(ctx, req.(*NotaryListDelayedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_NotaryListBlackholedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryListBlackholedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).NotaryListBlackholedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/NotaryListBlackholedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).NotaryListBlackholedMessages(ctx, req.(*NotaryListBlackholedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_PurgePythNetVaas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgePythNetVaasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).PurgePythNetVaas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/PurgePythNetVaas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).PurgePythNetVaas(ctx, req.(*PurgePythNetVaasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_SignExistingVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignExistingVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).SignExistingVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/SignExistingVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).SignExistingVAA(ctx, req.(*SignExistingVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_DumpRPCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRPCsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).DumpRPCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/DumpRPCs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).DumpRPCs(ctx, req.(*DumpRPCsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_GetAndObserveMissingVAAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAndObserveMissingVAAsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).GetAndObserveMissingVAAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/GetAndObserveMissingVAAs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).GetAndObserveMissingVAAs(ctx, req.(*GetAndObserveMissingVAAsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodePrivilegedService_ServiceDesc is the grpc.ServiceDesc for NodePrivilegedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodePrivilegedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.v1.NodePrivilegedService",
	HandlerType: (*NodePrivilegedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InjectGovernanceVAA",
			Handler:    _NodePrivilegedService_InjectGovernanceVAA_Handler,
		},
		{
			MethodName: "FindMissingMessages",
			Handler:    _NodePrivilegedService_FindMissingMessages_Handler,
		},
		{
			MethodName: "SendObservationRequest",
			Handler:    _NodePrivilegedService_SendObservationRequest_Handler,
		},
		{
			MethodName: "ReobserveWithEndpoint",
			Handler:    _NodePrivilegedService_ReobserveWithEndpoint_Handler,
		},
		{
			MethodName: "ChainGovernorStatus",
			Handler:    _NodePrivilegedService_ChainGovernorStatus_Handler,
		},
		{
			MethodName: "ChainGovernorReload",
			Handler:    _NodePrivilegedService_ChainGovernorReload_Handler,
		},
		{
			MethodName: "ChainGovernorDropPendingVAA",
			Handler:    _NodePrivilegedService_ChainGovernorDropPendingVAA_Handler,
		},
		{
			MethodName: "ChainGovernorReleasePendingVAA",
			Handler:    _NodePrivilegedService_ChainGovernorReleasePendingVAA_Handler,
		},
		{
			MethodName: "ChainGovernorResetReleaseTimer",
			Handler:    _NodePrivilegedService_ChainGovernorResetReleaseTimer_Handler,
		},
		{
			MethodName: "NotaryBlackholeDelayedMessage",
			Handler:    _NodePrivilegedService_NotaryBlackholeDelayedMessage_Handler,
		},
		{
			MethodName: "NotaryReleaseDelayedMessage",
			Handler:    _NodePrivilegedService_NotaryReleaseDelayedMessage_Handler,
		},
		{
			MethodName: "NotaryRemoveBlackholedMessage",
			Handler:    _NodePrivilegedService_NotaryRemoveBlackholedMessage_Handler,
		},
		{
			MethodName: "NotaryResetReleaseTimer",
			Handler:    _NodePrivilegedService_NotaryResetReleaseTimer_Handler,
		},
		{
			MethodName: "NotaryInjectDelayedMessage",
			Handler:    _NodePrivilegedService_NotaryInjectDelayedMessage_Handler,
		},
		{
			MethodName: "NotaryInjectBlackholedMessage",
			Handler:    _NodePrivilegedService_NotaryInjectBlackholedMessage_Handler,
		},
		{
			MethodName: "NotaryGetDelayedMessage",
			Handler:    _NodePrivilegedService_NotaryGetDelayedMessage_Handler,
		},
		{
			MethodName: "NotaryGetBlackholedMessage",
			Handler:    _NodePrivilegedService_NotaryGetBlackholedMessage_Handler,
		},
		{
			MethodName: "NotaryListDelayedMessages",
			Handler:    _NodePrivilegedService_NotaryListDelayedMessages_Handler,
		},
		{
			MethodName: "NotaryListBlackholedMessages",
			Handler:    _NodePrivilegedService_NotaryListBlackholedMessages_Handler,
		},
		{
			MethodName: "PurgePythNetVaas",
			Handler:    _NodePrivilegedService_PurgePythNetVaas_Handler,
		},
		{
			MethodName: "SignExistingVAA",
			Handler:    _NodePrivilegedService_SignExistingVAA_Handler,
		},
		{
			MethodName: "DumpRPCs",
			Handler:    _NodePrivilegedService_DumpRPCs_Handler,
		},
		{
			MethodName: "GetAndObserveMissingVAAs",
			Handler:    _NodePrivilegedService_GetAndObserveMissingVAAs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/v1/node.proto",
}
