// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nodev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodePrivilegedServiceClient is the client API for NodePrivilegedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodePrivilegedServiceClient interface {
	// InjectGovernanceVAA injects a governance VAA into the guardian node.
	// The node will inject the VAA into the aggregator and sign/broadcast the VAA signature.
	//
	// A consensus majority of nodes on the network will have to inject the VAA within the
	// VAA timeout window for it to reach consensus.
	InjectGovernanceVAA(ctx context.Context, in *InjectGovernanceVAARequest, opts ...grpc.CallOption) (*InjectGovernanceVAAResponse, error)
	// FindMissingMessages will detect message sequence gaps in the local VAA store for a
	// specific emitter chain and address. Start and end slots are the lowest and highest
	// sequence numbers available in the local store, respectively.
	//
	// An error is returned if more than 1000 gaps are found.
	FindMissingMessages(ctx context.Context, in *FindMissingMessagesRequest, opts ...grpc.CallOption) (*FindMissingMessagesResponse, error)
	// SendObservationRequest broadcasts a signed observation request to the gossip network
	// using the node's guardian key. The network rate limits these requests to one per second.
	// Requests at higher rates will fail silently.
	SendObservationRequest(ctx context.Context, in *SendObservationRequestRequest, opts ...grpc.CallOption) (*SendObservationRequestResponse, error)
	// ChainGovernorStatus displays the status of the chain governor.
	ChainGovernorStatus(ctx context.Context, in *ChainGovernorStatusRequest, opts ...grpc.CallOption) (*ChainGovernorStatusResponse, error)
	// ChainGovernorReload clears the chain governor history and reloads it from the database.
	ChainGovernorReload(ctx context.Context, in *ChainGovernorReloadRequest, opts ...grpc.CallOption) (*ChainGovernorReloadResponse, error)
	// ChainGovernorDropPendingVAA drops a VAA from the chain governor pending list.
	ChainGovernorDropPendingVAA(ctx context.Context, in *ChainGovernorDropPendingVAARequest, opts ...grpc.CallOption) (*ChainGovernorDropPendingVAAResponse, error)
	// ChainGovernorReleasePendingVAA release a VAA from the chain governor pending list, publishing it immediately.
	ChainGovernorReleasePendingVAA(ctx context.Context, in *ChainGovernorReleasePendingVAARequest, opts ...grpc.CallOption) (*ChainGovernorReleasePendingVAAResponse, error)
	// ChainGovernorResetReleaseTimer resets the release timer for a chain governor pending VAA to the configured maximum.
	ChainGovernorResetReleaseTimer(ctx context.Context, in *ChainGovernorResetReleaseTimerRequest, opts ...grpc.CallOption) (*ChainGovernorResetReleaseTimerResponse, error)
	// PurgePythNetVaas deletes PythNet VAAs from the database that are more than the specified number of days old.
	PurgePythNetVaas(ctx context.Context, in *PurgePythNetVaasRequest, opts ...grpc.CallOption) (*PurgePythNetVaasResponse, error)
	// SignExistingVAA signs an existing VAA for a new guardian set using the local guardian key.
	SignExistingVAA(ctx context.Context, in *SignExistingVAARequest, opts ...grpc.CallOption) (*SignExistingVAAResponse, error)
	// DumpRPCs returns the RPCs being used by the guardian
	DumpRPCs(ctx context.Context, in *DumpRPCsRequest, opts ...grpc.CallOption) (*DumpRPCsResponse, error)
}

type nodePrivilegedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodePrivilegedServiceClient(cc grpc.ClientConnInterface) NodePrivilegedServiceClient {
	return &nodePrivilegedServiceClient{cc}
}

func (c *nodePrivilegedServiceClient) InjectGovernanceVAA(ctx context.Context, in *InjectGovernanceVAARequest, opts ...grpc.CallOption) (*InjectGovernanceVAAResponse, error) {
	out := new(InjectGovernanceVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/InjectGovernanceVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) FindMissingMessages(ctx context.Context, in *FindMissingMessagesRequest, opts ...grpc.CallOption) (*FindMissingMessagesResponse, error) {
	out := new(FindMissingMessagesResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/FindMissingMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) SendObservationRequest(ctx context.Context, in *SendObservationRequestRequest, opts ...grpc.CallOption) (*SendObservationRequestResponse, error) {
	out := new(SendObservationRequestResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/SendObservationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorStatus(ctx context.Context, in *ChainGovernorStatusRequest, opts ...grpc.CallOption) (*ChainGovernorStatusResponse, error) {
	out := new(ChainGovernorStatusResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorReload(ctx context.Context, in *ChainGovernorReloadRequest, opts ...grpc.CallOption) (*ChainGovernorReloadResponse, error) {
	out := new(ChainGovernorReloadResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorDropPendingVAA(ctx context.Context, in *ChainGovernorDropPendingVAARequest, opts ...grpc.CallOption) (*ChainGovernorDropPendingVAAResponse, error) {
	out := new(ChainGovernorDropPendingVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorDropPendingVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorReleasePendingVAA(ctx context.Context, in *ChainGovernorReleasePendingVAARequest, opts ...grpc.CallOption) (*ChainGovernorReleasePendingVAAResponse, error) {
	out := new(ChainGovernorReleasePendingVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorReleasePendingVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) ChainGovernorResetReleaseTimer(ctx context.Context, in *ChainGovernorResetReleaseTimerRequest, opts ...grpc.CallOption) (*ChainGovernorResetReleaseTimerResponse, error) {
	out := new(ChainGovernorResetReleaseTimerResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/ChainGovernorResetReleaseTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) PurgePythNetVaas(ctx context.Context, in *PurgePythNetVaasRequest, opts ...grpc.CallOption) (*PurgePythNetVaasResponse, error) {
	out := new(PurgePythNetVaasResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/PurgePythNetVaas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) SignExistingVAA(ctx context.Context, in *SignExistingVAARequest, opts ...grpc.CallOption) (*SignExistingVAAResponse, error) {
	out := new(SignExistingVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/SignExistingVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePrivilegedServiceClient) DumpRPCs(ctx context.Context, in *DumpRPCsRequest, opts ...grpc.CallOption) (*DumpRPCsResponse, error) {
	out := new(DumpRPCsResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivilegedService/DumpRPCs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodePrivilegedServiceServer is the server API for NodePrivilegedService service.
// All implementations must embed UnimplementedNodePrivilegedServiceServer
// for forward compatibility
type NodePrivilegedServiceServer interface {
	// InjectGovernanceVAA injects a governance VAA into the guardian node.
	// The node will inject the VAA into the aggregator and sign/broadcast the VAA signature.
	//
	// A consensus majority of nodes on the network will have to inject the VAA within the
	// VAA timeout window for it to reach consensus.
	InjectGovernanceVAA(context.Context, *InjectGovernanceVAARequest) (*InjectGovernanceVAAResponse, error)
	// FindMissingMessages will detect message sequence gaps in the local VAA store for a
	// specific emitter chain and address. Start and end slots are the lowest and highest
	// sequence numbers available in the local store, respectively.
	//
	// An error is returned if more than 1000 gaps are found.
	FindMissingMessages(context.Context, *FindMissingMessagesRequest) (*FindMissingMessagesResponse, error)
	// SendObservationRequest broadcasts a signed observation request to the gossip network
	// using the node's guardian key. The network rate limits these requests to one per second.
	// Requests at higher rates will fail silently.
	SendObservationRequest(context.Context, *SendObservationRequestRequest) (*SendObservationRequestResponse, error)
	// ChainGovernorStatus displays the status of the chain governor.
	ChainGovernorStatus(context.Context, *ChainGovernorStatusRequest) (*ChainGovernorStatusResponse, error)
	// ChainGovernorReload clears the chain governor history and reloads it from the database.
	ChainGovernorReload(context.Context, *ChainGovernorReloadRequest) (*ChainGovernorReloadResponse, error)
	// ChainGovernorDropPendingVAA drops a VAA from the chain governor pending list.
	ChainGovernorDropPendingVAA(context.Context, *ChainGovernorDropPendingVAARequest) (*ChainGovernorDropPendingVAAResponse, error)
	// ChainGovernorReleasePendingVAA release a VAA from the chain governor pending list, publishing it immediately.
	ChainGovernorReleasePendingVAA(context.Context, *ChainGovernorReleasePendingVAARequest) (*ChainGovernorReleasePendingVAAResponse, error)
	// ChainGovernorResetReleaseTimer resets the release timer for a chain governor pending VAA to the configured maximum.
	ChainGovernorResetReleaseTimer(context.Context, *ChainGovernorResetReleaseTimerRequest) (*ChainGovernorResetReleaseTimerResponse, error)
	// PurgePythNetVaas deletes PythNet VAAs from the database that are more than the specified number of days old.
	PurgePythNetVaas(context.Context, *PurgePythNetVaasRequest) (*PurgePythNetVaasResponse, error)
	// SignExistingVAA signs an existing VAA for a new guardian set using the local guardian key.
	SignExistingVAA(context.Context, *SignExistingVAARequest) (*SignExistingVAAResponse, error)
	// DumpRPCs returns the RPCs being used by the guardian
	DumpRPCs(context.Context, *DumpRPCsRequest) (*DumpRPCsResponse, error)
	mustEmbedUnimplementedNodePrivilegedServiceServer()
}

// UnimplementedNodePrivilegedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodePrivilegedServiceServer struct {
}

func (UnimplementedNodePrivilegedServiceServer) InjectGovernanceVAA(context.Context, *InjectGovernanceVAARequest) (*InjectGovernanceVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectGovernanceVAA not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) FindMissingMessages(context.Context, *FindMissingMessagesRequest) (*FindMissingMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMissingMessages not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) SendObservationRequest(context.Context, *SendObservationRequestRequest) (*SendObservationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendObservationRequest not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorStatus(context.Context, *ChainGovernorStatusRequest) (*ChainGovernorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorStatus not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorReload(context.Context, *ChainGovernorReloadRequest) (*ChainGovernorReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorReload not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorDropPendingVAA(context.Context, *ChainGovernorDropPendingVAARequest) (*ChainGovernorDropPendingVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorDropPendingVAA not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorReleasePendingVAA(context.Context, *ChainGovernorReleasePendingVAARequest) (*ChainGovernorReleasePendingVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorReleasePendingVAA not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) ChainGovernorResetReleaseTimer(context.Context, *ChainGovernorResetReleaseTimerRequest) (*ChainGovernorResetReleaseTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainGovernorResetReleaseTimer not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) PurgePythNetVaas(context.Context, *PurgePythNetVaasRequest) (*PurgePythNetVaasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgePythNetVaas not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) SignExistingVAA(context.Context, *SignExistingVAARequest) (*SignExistingVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignExistingVAA not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) DumpRPCs(context.Context, *DumpRPCsRequest) (*DumpRPCsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpRPCs not implemented")
}
func (UnimplementedNodePrivilegedServiceServer) mustEmbedUnimplementedNodePrivilegedServiceServer() {}

// UnsafeNodePrivilegedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodePrivilegedServiceServer will
// result in compilation errors.
type UnsafeNodePrivilegedServiceServer interface {
	mustEmbedUnimplementedNodePrivilegedServiceServer()
}

func RegisterNodePrivilegedServiceServer(s grpc.ServiceRegistrar, srv NodePrivilegedServiceServer) {
	s.RegisterService(&NodePrivilegedService_ServiceDesc, srv)
}

func _NodePrivilegedService_InjectGovernanceVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectGovernanceVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).InjectGovernanceVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/InjectGovernanceVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).InjectGovernanceVAA(ctx, req.(*InjectGovernanceVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_FindMissingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMissingMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).FindMissingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/FindMissingMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).FindMissingMessages(ctx, req.(*FindMissingMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_SendObservationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendObservationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).SendObservationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/SendObservationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).SendObservationRequest(ctx, req.(*SendObservationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorStatus(ctx, req.(*ChainGovernorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorReload(ctx, req.(*ChainGovernorReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorDropPendingVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorDropPendingVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorDropPendingVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorDropPendingVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorDropPendingVAA(ctx, req.(*ChainGovernorDropPendingVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorReleasePendingVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorReleasePendingVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorReleasePendingVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorReleasePendingVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorReleasePendingVAA(ctx, req.(*ChainGovernorReleasePendingVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_ChainGovernorResetReleaseTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainGovernorResetReleaseTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).ChainGovernorResetReleaseTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/ChainGovernorResetReleaseTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).ChainGovernorResetReleaseTimer(ctx, req.(*ChainGovernorResetReleaseTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_PurgePythNetVaas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgePythNetVaasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).PurgePythNetVaas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/PurgePythNetVaas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).PurgePythNetVaas(ctx, req.(*PurgePythNetVaasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_SignExistingVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignExistingVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).SignExistingVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/SignExistingVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).SignExistingVAA(ctx, req.(*SignExistingVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePrivilegedService_DumpRPCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRPCsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServiceServer).DumpRPCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivilegedService/DumpRPCs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServiceServer).DumpRPCs(ctx, req.(*DumpRPCsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodePrivilegedService_ServiceDesc is the grpc.ServiceDesc for NodePrivilegedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodePrivilegedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.v1.NodePrivilegedService",
	HandlerType: (*NodePrivilegedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InjectGovernanceVAA",
			Handler:    _NodePrivilegedService_InjectGovernanceVAA_Handler,
		},
		{
			MethodName: "FindMissingMessages",
			Handler:    _NodePrivilegedService_FindMissingMessages_Handler,
		},
		{
			MethodName: "SendObservationRequest",
			Handler:    _NodePrivilegedService_SendObservationRequest_Handler,
		},
		{
			MethodName: "ChainGovernorStatus",
			Handler:    _NodePrivilegedService_ChainGovernorStatus_Handler,
		},
		{
			MethodName: "ChainGovernorReload",
			Handler:    _NodePrivilegedService_ChainGovernorReload_Handler,
		},
		{
			MethodName: "ChainGovernorDropPendingVAA",
			Handler:    _NodePrivilegedService_ChainGovernorDropPendingVAA_Handler,
		},
		{
			MethodName: "ChainGovernorReleasePendingVAA",
			Handler:    _NodePrivilegedService_ChainGovernorReleasePendingVAA_Handler,
		},
		{
			MethodName: "ChainGovernorResetReleaseTimer",
			Handler:    _NodePrivilegedService_ChainGovernorResetReleaseTimer_Handler,
		},
		{
			MethodName: "PurgePythNetVaas",
			Handler:    _NodePrivilegedService_PurgePythNetVaas_Handler,
		},
		{
			MethodName: "SignExistingVAA",
			Handler:    _NodePrivilegedService_SignExistingVAA_Handler,
		},
		{
			MethodName: "DumpRPCs",
			Handler:    _NodePrivilegedService_DumpRPCs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/v1/node.proto",
}
