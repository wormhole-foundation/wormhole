// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wormhole/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetGuardianSetRequest struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGuardianSetRequest) Reset()         { *m = QueryGetGuardianSetRequest{} }
func (m *QueryGetGuardianSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuardianSetRequest) ProtoMessage()    {}
func (*QueryGetGuardianSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{0}
}
func (m *QueryGetGuardianSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuardianSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuardianSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuardianSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuardianSetRequest.Merge(m, src)
}
func (m *QueryGetGuardianSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuardianSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuardianSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuardianSetRequest proto.InternalMessageInfo

func (m *QueryGetGuardianSetRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryGetGuardianSetResponse struct {
	GuardianSet GuardianSet `protobuf:"bytes,1,opt,name=GuardianSet,proto3" json:"GuardianSet"`
}

func (m *QueryGetGuardianSetResponse) Reset()         { *m = QueryGetGuardianSetResponse{} }
func (m *QueryGetGuardianSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuardianSetResponse) ProtoMessage()    {}
func (*QueryGetGuardianSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{1}
}
func (m *QueryGetGuardianSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuardianSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuardianSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuardianSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuardianSetResponse.Merge(m, src)
}
func (m *QueryGetGuardianSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuardianSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuardianSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuardianSetResponse proto.InternalMessageInfo

func (m *QueryGetGuardianSetResponse) GetGuardianSet() GuardianSet {
	if m != nil {
		return m.GuardianSet
	}
	return GuardianSet{}
}

type QueryAllGuardianSetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuardianSetRequest) Reset()         { *m = QueryAllGuardianSetRequest{} }
func (m *QueryAllGuardianSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuardianSetRequest) ProtoMessage()    {}
func (*QueryAllGuardianSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{2}
}
func (m *QueryAllGuardianSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuardianSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuardianSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuardianSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuardianSetRequest.Merge(m, src)
}
func (m *QueryAllGuardianSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuardianSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuardianSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuardianSetRequest proto.InternalMessageInfo

func (m *QueryAllGuardianSetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGuardianSetResponse struct {
	GuardianSet []GuardianSet       `protobuf:"bytes,1,rep,name=GuardianSet,proto3" json:"GuardianSet"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuardianSetResponse) Reset()         { *m = QueryAllGuardianSetResponse{} }
func (m *QueryAllGuardianSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuardianSetResponse) ProtoMessage()    {}
func (*QueryAllGuardianSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{3}
}
func (m *QueryAllGuardianSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuardianSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuardianSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuardianSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuardianSetResponse.Merge(m, src)
}
func (m *QueryAllGuardianSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuardianSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuardianSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuardianSetResponse proto.InternalMessageInfo

func (m *QueryAllGuardianSetResponse) GetGuardianSet() []GuardianSet {
	if m != nil {
		return m.GuardianSet
	}
	return nil
}

func (m *QueryAllGuardianSetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetConfigRequest struct {
}

func (m *QueryGetConfigRequest) Reset()         { *m = QueryGetConfigRequest{} }
func (m *QueryGetConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetConfigRequest) ProtoMessage()    {}
func (*QueryGetConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{4}
}
func (m *QueryGetConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetConfigRequest.Merge(m, src)
}
func (m *QueryGetConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetConfigRequest proto.InternalMessageInfo

type QueryGetConfigResponse struct {
	Config Config `protobuf:"bytes,1,opt,name=Config,proto3" json:"Config"`
}

func (m *QueryGetConfigResponse) Reset()         { *m = QueryGetConfigResponse{} }
func (m *QueryGetConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetConfigResponse) ProtoMessage()    {}
func (*QueryGetConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{5}
}
func (m *QueryGetConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetConfigResponse.Merge(m, src)
}
func (m *QueryGetConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetConfigResponse proto.InternalMessageInfo

func (m *QueryGetConfigResponse) GetConfig() Config {
	if m != nil {
		return m.Config
	}
	return Config{}
}

type QueryGetReplayProtectionRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetReplayProtectionRequest) Reset()         { *m = QueryGetReplayProtectionRequest{} }
func (m *QueryGetReplayProtectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReplayProtectionRequest) ProtoMessage()    {}
func (*QueryGetReplayProtectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{6}
}
func (m *QueryGetReplayProtectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReplayProtectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReplayProtectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReplayProtectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReplayProtectionRequest.Merge(m, src)
}
func (m *QueryGetReplayProtectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReplayProtectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReplayProtectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReplayProtectionRequest proto.InternalMessageInfo

func (m *QueryGetReplayProtectionRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetReplayProtectionResponse struct {
	ReplayProtection ReplayProtection `protobuf:"bytes,1,opt,name=replayProtection,proto3" json:"replayProtection"`
}

func (m *QueryGetReplayProtectionResponse) Reset()         { *m = QueryGetReplayProtectionResponse{} }
func (m *QueryGetReplayProtectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReplayProtectionResponse) ProtoMessage()    {}
func (*QueryGetReplayProtectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{7}
}
func (m *QueryGetReplayProtectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReplayProtectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReplayProtectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReplayProtectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReplayProtectionResponse.Merge(m, src)
}
func (m *QueryGetReplayProtectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReplayProtectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReplayProtectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReplayProtectionResponse proto.InternalMessageInfo

func (m *QueryGetReplayProtectionResponse) GetReplayProtection() ReplayProtection {
	if m != nil {
		return m.ReplayProtection
	}
	return ReplayProtection{}
}

type QueryAllReplayProtectionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReplayProtectionRequest) Reset()         { *m = QueryAllReplayProtectionRequest{} }
func (m *QueryAllReplayProtectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReplayProtectionRequest) ProtoMessage()    {}
func (*QueryAllReplayProtectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{8}
}
func (m *QueryAllReplayProtectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReplayProtectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReplayProtectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReplayProtectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReplayProtectionRequest.Merge(m, src)
}
func (m *QueryAllReplayProtectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReplayProtectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReplayProtectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReplayProtectionRequest proto.InternalMessageInfo

func (m *QueryAllReplayProtectionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReplayProtectionResponse struct {
	ReplayProtection []ReplayProtection  `protobuf:"bytes,1,rep,name=replayProtection,proto3" json:"replayProtection"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReplayProtectionResponse) Reset()         { *m = QueryAllReplayProtectionResponse{} }
func (m *QueryAllReplayProtectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReplayProtectionResponse) ProtoMessage()    {}
func (*QueryAllReplayProtectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{9}
}
func (m *QueryAllReplayProtectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReplayProtectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReplayProtectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReplayProtectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReplayProtectionResponse.Merge(m, src)
}
func (m *QueryAllReplayProtectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReplayProtectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReplayProtectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReplayProtectionResponse proto.InternalMessageInfo

func (m *QueryAllReplayProtectionResponse) GetReplayProtection() []ReplayProtection {
	if m != nil {
		return m.ReplayProtection
	}
	return nil
}

func (m *QueryAllReplayProtectionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSequenceCounterRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSequenceCounterRequest) Reset()         { *m = QueryGetSequenceCounterRequest{} }
func (m *QueryGetSequenceCounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSequenceCounterRequest) ProtoMessage()    {}
func (*QueryGetSequenceCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{10}
}
func (m *QueryGetSequenceCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSequenceCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSequenceCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSequenceCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSequenceCounterRequest.Merge(m, src)
}
func (m *QueryGetSequenceCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSequenceCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSequenceCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSequenceCounterRequest proto.InternalMessageInfo

func (m *QueryGetSequenceCounterRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSequenceCounterResponse struct {
	SequenceCounter SequenceCounter `protobuf:"bytes,1,opt,name=sequenceCounter,proto3" json:"sequenceCounter"`
}

func (m *QueryGetSequenceCounterResponse) Reset()         { *m = QueryGetSequenceCounterResponse{} }
func (m *QueryGetSequenceCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSequenceCounterResponse) ProtoMessage()    {}
func (*QueryGetSequenceCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{11}
}
func (m *QueryGetSequenceCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSequenceCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSequenceCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSequenceCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSequenceCounterResponse.Merge(m, src)
}
func (m *QueryGetSequenceCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSequenceCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSequenceCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSequenceCounterResponse proto.InternalMessageInfo

func (m *QueryGetSequenceCounterResponse) GetSequenceCounter() SequenceCounter {
	if m != nil {
		return m.SequenceCounter
	}
	return SequenceCounter{}
}

type QueryAllSequenceCounterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSequenceCounterRequest) Reset()         { *m = QueryAllSequenceCounterRequest{} }
func (m *QueryAllSequenceCounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSequenceCounterRequest) ProtoMessage()    {}
func (*QueryAllSequenceCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{12}
}
func (m *QueryAllSequenceCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSequenceCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSequenceCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSequenceCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSequenceCounterRequest.Merge(m, src)
}
func (m *QueryAllSequenceCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSequenceCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSequenceCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSequenceCounterRequest proto.InternalMessageInfo

func (m *QueryAllSequenceCounterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSequenceCounterResponse struct {
	SequenceCounter []SequenceCounter   `protobuf:"bytes,1,rep,name=sequenceCounter,proto3" json:"sequenceCounter"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSequenceCounterResponse) Reset()         { *m = QueryAllSequenceCounterResponse{} }
func (m *QueryAllSequenceCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSequenceCounterResponse) ProtoMessage()    {}
func (*QueryAllSequenceCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{13}
}
func (m *QueryAllSequenceCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSequenceCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSequenceCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSequenceCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSequenceCounterResponse.Merge(m, src)
}
func (m *QueryAllSequenceCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSequenceCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSequenceCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSequenceCounterResponse proto.InternalMessageInfo

func (m *QueryAllSequenceCounterResponse) GetSequenceCounter() []SequenceCounter {
	if m != nil {
		return m.SequenceCounter
	}
	return nil
}

func (m *QueryAllSequenceCounterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetConsensusGuardianSetIndexRequest struct {
}

func (m *QueryGetConsensusGuardianSetIndexRequest) Reset() {
	*m = QueryGetConsensusGuardianSetIndexRequest{}
}
func (m *QueryGetConsensusGuardianSetIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetConsensusGuardianSetIndexRequest) ProtoMessage()    {}
func (*QueryGetConsensusGuardianSetIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{14}
}
func (m *QueryGetConsensusGuardianSetIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetConsensusGuardianSetIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetConsensusGuardianSetIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetConsensusGuardianSetIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetConsensusGuardianSetIndexRequest.Merge(m, src)
}
func (m *QueryGetConsensusGuardianSetIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetConsensusGuardianSetIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetConsensusGuardianSetIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetConsensusGuardianSetIndexRequest proto.InternalMessageInfo

type QueryGetConsensusGuardianSetIndexResponse struct {
	ConsensusGuardianSetIndex ConsensusGuardianSetIndex `protobuf:"bytes,1,opt,name=ConsensusGuardianSetIndex,proto3" json:"ConsensusGuardianSetIndex"`
}

func (m *QueryGetConsensusGuardianSetIndexResponse) Reset() {
	*m = QueryGetConsensusGuardianSetIndexResponse{}
}
func (m *QueryGetConsensusGuardianSetIndexResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetConsensusGuardianSetIndexResponse) ProtoMessage() {}
func (*QueryGetConsensusGuardianSetIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{15}
}
func (m *QueryGetConsensusGuardianSetIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetConsensusGuardianSetIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetConsensusGuardianSetIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetConsensusGuardianSetIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetConsensusGuardianSetIndexResponse.Merge(m, src)
}
func (m *QueryGetConsensusGuardianSetIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetConsensusGuardianSetIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetConsensusGuardianSetIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetConsensusGuardianSetIndexResponse proto.InternalMessageInfo

func (m *QueryGetConsensusGuardianSetIndexResponse) GetConsensusGuardianSetIndex() ConsensusGuardianSetIndex {
	if m != nil {
		return m.ConsensusGuardianSetIndex
	}
	return ConsensusGuardianSetIndex{}
}

type QueryGetGuardianValidatorRequest struct {
	GuardianKey []byte `protobuf:"bytes,1,opt,name=guardianKey,proto3" json:"guardianKey,omitempty"`
}

func (m *QueryGetGuardianValidatorRequest) Reset()         { *m = QueryGetGuardianValidatorRequest{} }
func (m *QueryGetGuardianValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuardianValidatorRequest) ProtoMessage()    {}
func (*QueryGetGuardianValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{16}
}
func (m *QueryGetGuardianValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuardianValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuardianValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuardianValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuardianValidatorRequest.Merge(m, src)
}
func (m *QueryGetGuardianValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuardianValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuardianValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuardianValidatorRequest proto.InternalMessageInfo

func (m *QueryGetGuardianValidatorRequest) GetGuardianKey() []byte {
	if m != nil {
		return m.GuardianKey
	}
	return nil
}

type QueryGetGuardianValidatorResponse struct {
	GuardianValidator GuardianValidator `protobuf:"bytes,1,opt,name=guardianValidator,proto3" json:"guardianValidator"`
}

func (m *QueryGetGuardianValidatorResponse) Reset()         { *m = QueryGetGuardianValidatorResponse{} }
func (m *QueryGetGuardianValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuardianValidatorResponse) ProtoMessage()    {}
func (*QueryGetGuardianValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{17}
}
func (m *QueryGetGuardianValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuardianValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuardianValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuardianValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuardianValidatorResponse.Merge(m, src)
}
func (m *QueryGetGuardianValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuardianValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuardianValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuardianValidatorResponse proto.InternalMessageInfo

func (m *QueryGetGuardianValidatorResponse) GetGuardianValidator() GuardianValidator {
	if m != nil {
		return m.GuardianValidator
	}
	return GuardianValidator{}
}

type QueryAllGuardianValidatorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuardianValidatorRequest) Reset()         { *m = QueryAllGuardianValidatorRequest{} }
func (m *QueryAllGuardianValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuardianValidatorRequest) ProtoMessage()    {}
func (*QueryAllGuardianValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{18}
}
func (m *QueryAllGuardianValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuardianValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuardianValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuardianValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuardianValidatorRequest.Merge(m, src)
}
func (m *QueryAllGuardianValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuardianValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuardianValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuardianValidatorRequest proto.InternalMessageInfo

func (m *QueryAllGuardianValidatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGuardianValidatorResponse struct {
	GuardianValidator []GuardianValidator `protobuf:"bytes,1,rep,name=guardianValidator,proto3" json:"guardianValidator"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuardianValidatorResponse) Reset()         { *m = QueryAllGuardianValidatorResponse{} }
func (m *QueryAllGuardianValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuardianValidatorResponse) ProtoMessage()    {}
func (*QueryAllGuardianValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{19}
}
func (m *QueryAllGuardianValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuardianValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuardianValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuardianValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuardianValidatorResponse.Merge(m, src)
}
func (m *QueryAllGuardianValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuardianValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuardianValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuardianValidatorResponse proto.InternalMessageInfo

func (m *QueryAllGuardianValidatorResponse) GetGuardianValidator() []GuardianValidator {
	if m != nil {
		return m.GuardianValidator
	}
	return nil
}

func (m *QueryAllGuardianValidatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLatestGuardianSetIndexRequest struct {
}

func (m *QueryLatestGuardianSetIndexRequest) Reset()         { *m = QueryLatestGuardianSetIndexRequest{} }
func (m *QueryLatestGuardianSetIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestGuardianSetIndexRequest) ProtoMessage()    {}
func (*QueryLatestGuardianSetIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{20}
}
func (m *QueryLatestGuardianSetIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestGuardianSetIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestGuardianSetIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestGuardianSetIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestGuardianSetIndexRequest.Merge(m, src)
}
func (m *QueryLatestGuardianSetIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestGuardianSetIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestGuardianSetIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestGuardianSetIndexRequest proto.InternalMessageInfo

type QueryLatestGuardianSetIndexResponse struct {
	LatestGuardianSetIndex uint32 `protobuf:"varint,1,opt,name=latestGuardianSetIndex,proto3" json:"latestGuardianSetIndex,omitempty"`
}

func (m *QueryLatestGuardianSetIndexResponse) Reset()         { *m = QueryLatestGuardianSetIndexResponse{} }
func (m *QueryLatestGuardianSetIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestGuardianSetIndexResponse) ProtoMessage()    {}
func (*QueryLatestGuardianSetIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_273185ecc792fa38, []int{21}
}
func (m *QueryLatestGuardianSetIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestGuardianSetIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestGuardianSetIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestGuardianSetIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestGuardianSetIndexResponse.Merge(m, src)
}
func (m *QueryLatestGuardianSetIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestGuardianSetIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestGuardianSetIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestGuardianSetIndexResponse proto.InternalMessageInfo

func (m *QueryLatestGuardianSetIndexResponse) GetLatestGuardianSetIndex() uint32 {
	if m != nil {
		return m.LatestGuardianSetIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryGetGuardianSetRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetGuardianSetRequest")
	proto.RegisterType((*QueryGetGuardianSetResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetGuardianSetResponse")
	proto.RegisterType((*QueryAllGuardianSetRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryAllGuardianSetRequest")
	proto.RegisterType((*QueryAllGuardianSetResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryAllGuardianSetResponse")
	proto.RegisterType((*QueryGetConfigRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetConfigRequest")
	proto.RegisterType((*QueryGetConfigResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetConfigResponse")
	proto.RegisterType((*QueryGetReplayProtectionRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetReplayProtectionRequest")
	proto.RegisterType((*QueryGetReplayProtectionResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetReplayProtectionResponse")
	proto.RegisterType((*QueryAllReplayProtectionRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryAllReplayProtectionRequest")
	proto.RegisterType((*QueryAllReplayProtectionResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryAllReplayProtectionResponse")
	proto.RegisterType((*QueryGetSequenceCounterRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetSequenceCounterRequest")
	proto.RegisterType((*QueryGetSequenceCounterResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetSequenceCounterResponse")
	proto.RegisterType((*QueryAllSequenceCounterRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryAllSequenceCounterRequest")
	proto.RegisterType((*QueryAllSequenceCounterResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryAllSequenceCounterResponse")
	proto.RegisterType((*QueryGetConsensusGuardianSetIndexRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetConsensusGuardianSetIndexRequest")
	proto.RegisterType((*QueryGetConsensusGuardianSetIndexResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetConsensusGuardianSetIndexResponse")
	proto.RegisterType((*QueryGetGuardianValidatorRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetGuardianValidatorRequest")
	proto.RegisterType((*QueryGetGuardianValidatorResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryGetGuardianValidatorResponse")
	proto.RegisterType((*QueryAllGuardianValidatorRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryAllGuardianValidatorRequest")
	proto.RegisterType((*QueryAllGuardianValidatorResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryAllGuardianValidatorResponse")
	proto.RegisterType((*QueryLatestGuardianSetIndexRequest)(nil), "wormhole_foundation.wormchain.wormhole.QueryLatestGuardianSetIndexRequest")
	proto.RegisterType((*QueryLatestGuardianSetIndexResponse)(nil), "wormhole_foundation.wormchain.wormhole.QueryLatestGuardianSetIndexResponse")
}

func init() { proto.RegisterFile("wormhole/query.proto", fileDescriptor_273185ecc792fa38) }

var fileDescriptor_273185ecc792fa38 = []byte{
	// 1117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0x09, 0xad, 0xc4, 0x04, 0x68, 0x3b, 0xb8, 0x01, 0xb6, 0xc8, 0x49, 0x07, 0x54,
	0x4a, 0x11, 0xbb, 0x34, 0x11, 0x49, 0xd3, 0x52, 0x5a, 0xdb, 0x55, 0xec, 0xb4, 0x39, 0xa4, 0x8e,
	0xc4, 0x01, 0x84, 0xac, 0x8d, 0x3d, 0xd9, 0x6c, 0xb5, 0xd9, 0x71, 0xbd, 0xeb, 0xd2, 0x50, 0xf5,
	0x82, 0xc4, 0x85, 0x43, 0x85, 0xe0, 0x4f, 0x41, 0x9c, 0x39, 0x70, 0xe9, 0xb1, 0x52, 0x25, 0x40,
	0xaa, 0x84, 0x50, 0x82, 0x38, 0xc0, 0x81, 0x3b, 0xe2, 0x80, 0x76, 0xe6, 0xed, 0x7a, 0xbd, 0xde,
	0x5d, 0x76, 0xed, 0xcd, 0xcd, 0x99, 0x1f, 0xdf, 0x79, 0x9f, 0xf7, 0x9e, 0x67, 0xbe, 0x31, 0x2e,
	0x7d, 0xc6, 0x7b, 0x7b, 0xbb, 0xdc, 0x62, 0xda, 0xdd, 0x3e, 0xeb, 0xed, 0xab, 0xdd, 0x1e, 0x77,
	0x39, 0x39, 0xe7, 0x8f, 0xb6, 0x76, 0x78, 0xdf, 0xee, 0xe8, 0xae, 0xc9, 0x6d, 0xd5, 0x1b, 0x6b,
	0xef, 0xea, 0xa6, 0xfc, 0xe4, 0xcd, 0x2a, 0xaf, 0x1b, 0x9c, 0x1b, 0x16, 0xd3, 0xf4, 0xae, 0xa9,
	0xe9, 0xb6, 0xcd, 0x5d, 0xb1, 0xd2, 0x91, 0x2a, 0xca, 0x85, 0x36, 0x77, 0xf6, 0xb8, 0xa3, 0x6d,
	0xeb, 0x0e, 0xc8, 0x6b, 0xf7, 0x2e, 0x6e, 0x33, 0x57, 0xbf, 0xa8, 0x75, 0x75, 0xc3, 0xb4, 0xa5,
	0xac, 0x5c, 0x7b, 0x26, 0x88, 0xc3, 0xe8, 0xeb, 0xbd, 0x8e, 0xa9, 0xdb, 0x2d, 0x87, 0xb9, 0x30,
	0x79, 0x3a, 0x98, 0x6c, 0x73, 0x7b, 0xc7, 0x34, 0x60, 0x78, 0x21, 0x18, 0xee, 0xb1, 0xae, 0xa5,
	0xef, 0xb7, 0xbc, 0x61, 0xd6, 0x0e, 0xa9, 0xce, 0x07, 0x2b, 0x1c, 0x76, 0xb7, 0xcf, 0xec, 0x36,
	0x6b, 0xb5, 0x79, 0xdf, 0x76, 0x59, 0x0f, 0x16, 0xbc, 0x13, 0x56, 0x76, 0x98, 0xed, 0xf4, 0x9d,
	0x56, 0x38, 0x80, 0x96, 0x69, 0x77, 0xd8, 0x7d, 0x58, 0x7c, 0x76, 0x34, 0xc6, 0x7b, 0xba, 0x65,
	0x76, 0x74, 0x97, 0xfb, 0x7a, 0x25, 0x83, 0x1b, 0x5c, 0x7c, 0xd4, 0xbc, 0x4f, 0x72, 0x94, 0x2e,
	0x62, 0xe5, 0xb6, 0x87, 0x5f, 0x67, 0x6e, 0x1d, 0x76, 0x6e, 0x31, 0xb7, 0xe9, 0x85, 0xe4, 0xb8,
	0xa4, 0x84, 0x8f, 0x89, 0x53, 0x5e, 0x45, 0x0b, 0xe8, 0xfc, 0x8b, 0x4d, 0xf9, 0x07, 0xfd, 0x1c,
	0x9f, 0x89, 0xdd, 0xe3, 0x74, 0xbd, 0x40, 0xc9, 0x27, 0x78, 0x36, 0x34, 0x2c, 0xb6, 0xce, 0x2e,
	0x2e, 0xa9, 0xd9, 0xea, 0xa6, 0x86, 0xb6, 0x56, 0x9f, 0x7b, 0xfc, 0xeb, 0xfc, 0x54, 0x33, 0xac,
	0x46, 0x3b, 0x10, 0x6f, 0xc5, 0xb2, 0x62, 0xe2, 0x5d, 0xc3, 0x78, 0x50, 0x3e, 0x38, 0xf9, 0x9c,
	0x2a, 0x6b, 0xad, 0x7a, 0xb5, 0x56, 0x65, 0x2b, 0x41, 0xad, 0xd5, 0x4d, 0xdd, 0x60, 0xb0, 0xb7,
	0x19, 0xda, 0x49, 0x7f, 0x44, 0x80, 0x18, 0x3d, 0x26, 0x09, 0x71, 0xa6, 0x38, 0x44, 0x52, 0x1f,
	0x82, 0x98, 0x16, 0x10, 0x6f, 0xfd, 0x2f, 0x84, 0x8c, 0x6c, 0x88, 0xe2, 0x15, 0x7c, 0xda, 0xaf,
	0x53, 0x4d, 0x34, 0x27, 0xa0, 0xd2, 0x1d, 0x3c, 0x17, 0x9d, 0x00, 0xb0, 0x0d, 0x7c, 0x5c, 0x8e,
	0x40, 0xf2, 0xd4, 0xac, 0x4c, 0x72, 0x17, 0xe0, 0x80, 0x06, 0x5d, 0xc1, 0xf3, 0xfe, 0x39, 0x4d,
	0xf1, 0x35, 0xd8, 0x0c, 0xbe, 0x05, 0xb1, 0x1d, 0xf6, 0xbc, 0xdf, 0x61, 0x8f, 0x10, 0x5e, 0x48,
	0xde, 0x09, 0xb1, 0xde, 0xc1, 0x27, 0x7b, 0x91, 0x39, 0x88, 0xfa, 0x52, 0xd6, 0xa8, 0xa3, 0xda,
	0x10, 0xff, 0x88, 0x2e, 0x35, 0x81, 0xa4, 0x62, 0x59, 0x49, 0x24, 0x45, 0xf5, 0xde, 0xcf, 0x3e,
	0x7b, 0xec, 0x59, 0xa9, 0xec, 0x33, 0x47, 0xc1, 0x5e, 0x5c, 0x3f, 0x2e, 0xe3, 0xb2, 0x5f, 0xd4,
	0x2d, 0xb8, 0xf3, 0x6a, 0xf2, 0xca, 0x4b, 0xef, 0x86, 0xaf, 0xd0, 0xa0, 0x8f, 0x46, 0x36, 0x42,
	0x42, 0x0c, 0x7c, 0xc2, 0x19, 0x9e, 0x82, 0x12, 0xac, 0x64, 0xcd, 0x47, 0x44, 0x19, 0xd2, 0x11,
	0x55, 0xa5, 0xbb, 0x00, 0x51, 0xb1, 0xac, 0x04, 0x88, 0xa2, 0x1a, 0xe1, 0x29, 0x1a, 0x34, 0x5d,
	0x2e, 0xec, 0x99, 0xe2, 0xb1, 0x8b, 0x6b, 0x82, 0x0b, 0xf8, 0x7c, 0xe8, 0xee, 0x91, 0xef, 0x5a,
	0xe8, 0xf6, 0x5b, 0xf7, 0x2a, 0xee, 0xdf, 0x53, 0xdf, 0x21, 0xfc, 0x76, 0x86, 0xc5, 0x90, 0x8b,
	0x2f, 0x11, 0x7e, 0x2d, 0x71, 0x15, 0xd4, 0xa1, 0x92, 0xe3, 0x3e, 0x8b, 0x17, 0x82, 0x04, 0x25,
	0x9f, 0x44, 0x6f, 0x0c, 0xee, 0x2e, 0x7f, 0xee, 0x23, 0xff, 0x2d, 0xf6, 0x7b, 0x64, 0x01, 0xcf,
	0xfa, 0x0f, 0xf5, 0x2d, 0xb6, 0x2f, 0x82, 0x7b, 0xa1, 0x19, 0x1e, 0xa2, 0xdf, 0x20, 0x7c, 0x36,
	0x45, 0x06, 0x98, 0xf7, 0xf0, 0x29, 0x23, 0x3a, 0x09, 0xa8, 0xab, 0x79, 0x9f, 0xa3, 0x40, 0x00,
	0x10, 0x47, 0x95, 0xe9, 0x9d, 0xc1, 0xd5, 0x94, 0x88, 0x56, 0x54, 0xfb, 0x3f, 0xf3, 0x13, 0x10,
	0x7f, 0x58, 0x7a, 0x02, 0x66, 0x8e, 0x26, 0x01, 0xc5, 0x7d, 0x0d, 0xde, 0xc4, 0x54, 0xc0, 0x6d,
	0xe8, 0x2e, 0x73, 0xdc, 0xa4, 0x2f, 0xc0, 0xa7, 0xf8, 0x8d, 0xd4, 0x55, 0x90, 0x84, 0x65, 0x3c,
	0x67, 0xc5, 0xae, 0x00, 0xdf, 0x96, 0x30, 0xbb, 0xf8, 0x7d, 0x09, 0x1f, 0x13, 0xfa, 0xe4, 0x19,
	0x1a, 0x72, 0x34, 0xa4, 0x9a, 0x35, 0x77, 0xc9, 0xe6, 0x51, 0xa9, 0x4d, 0xa4, 0x21, 0xd1, 0x68,
	0xed, 0x8b, 0xa7, 0xbf, 0x7f, 0x3b, 0x7d, 0x95, 0x5c, 0xd1, 0x62, 0xc4, 0xb4, 0x40, 0x4c, 0x1b,
	0xf1, 0xbf, 0x5b, 0xcc, 0xd5, 0x1e, 0x88, 0xf7, 0xe3, 0x21, 0xf9, 0x09, 0xe1, 0x97, 0x42, 0xe2,
	0x15, 0xcb, 0xca, 0x09, 0x18, 0xeb, 0x36, 0x73, 0x02, 0xc6, 0x5b, 0x49, 0x7a, 0x45, 0x00, 0xbe,
	0x4f, 0x96, 0xc6, 0x00, 0x24, 0x3f, 0x20, 0xdf, 0xaf, 0x91, 0xab, 0x79, 0xb3, 0x3d, 0x64, 0x09,
	0x95, 0x0f, 0xc7, 0xdd, 0x0e, 0x18, 0xcb, 0x02, 0xe3, 0x3d, 0xa2, 0x66, 0xc5, 0x90, 0xff, 0x2e,
	0x91, 0xbf, 0x11, 0x3e, 0xd9, 0x1c, 0x71, 0x1c, 0x79, 0x83, 0x49, 0xf0, 0x64, 0x4a, 0x63, 0x72,
	0x21, 0xe0, 0x6b, 0x08, 0xbe, 0x2a, 0xb9, 0x9e, 0x95, 0x2f, 0x6a, 0xa3, 0x82, 0x66, 0xfc, 0x13,
	0xe1, 0x97, 0xa3, 0xc7, 0x78, 0x1d, 0x59, 0xcf, 0xdb, 0x4d, 0xc5, 0x40, 0xa7, 0xb8, 0x4c, 0x7a,
	0x5d, 0x40, 0x5f, 0x26, 0x97, 0xc6, 0x85, 0x26, 0x7f, 0x21, 0x7c, 0x22, 0xe2, 0x30, 0xc8, 0x5a,
	0xde, 0xa2, 0xc4, 0xfb, 0x2c, 0xa5, 0x3e, 0xb1, 0x0e, 0x60, 0xd6, 0x05, 0x66, 0x85, 0x5c, 0xcb,
	0x8a, 0x19, 0x31, 0x47, 0x41, 0x69, 0xff, 0x40, 0x98, 0x44, 0x0e, 0xf1, 0x2a, 0xbb, 0x96, 0xb7,
	0x20, 0x85, 0x00, 0x27, 0xbb, 0x46, 0x7a, 0x4d, 0x00, 0xaf, 0x92, 0x95, 0x31, 0x81, 0xc9, 0xa3,
	0xe9, 0x14, 0xab, 0x45, 0x36, 0xc7, 0xb8, 0x4b, 0x52, 0x8d, 0xa0, 0x72, 0xbb, 0x40, 0x45, 0xc8,
	0xc1, 0x86, 0xc8, 0xc1, 0x1a, 0xb9, 0x91, 0xe3, 0xc2, 0x4a, 0xfc, 0x15, 0x86, 0xfc, 0x83, 0xf0,
	0xa9, 0x11, 0x1b, 0x41, 0x1a, 0xe3, 0xbe, 0x80, 0x51, 0x53, 0xa5, 0xac, 0x17, 0xa0, 0x04, 0xe0,
	0x9b, 0x02, 0xfc, 0x26, 0x69, 0xe4, 0x7d, 0x70, 0x06, 0xbf, 0x28, 0x69, 0x0f, 0x42, 0x4e, 0xf5,
	0xa1, 0x77, 0x87, 0x97, 0x46, 0xce, 0xf3, 0x1a, 0xbf, 0x31, 0xee, 0x03, 0x39, 0x21, 0x7f, 0x9a,
	0x63, 0xa4, 0x55, 0xc1, 0xff, 0x01, 0xb9, 0x3c, 0x3e, 0x3f, 0xf9, 0x17, 0xe1, 0xb9, 0x78, 0x4f,
	0x46, 0x6e, 0xe6, 0x8a, 0x34, 0xd5, 0xfe, 0x29, 0xb7, 0x0a, 0xd1, 0x02, 0xee, 0x75, 0xc1, 0x5d,
	0x23, 0x95, 0xac, 0xdc, 0xd2, 0x34, 0xc6, 0x74, 0x7b, 0x75, 0xeb, 0xf1, 0x41, 0x19, 0x3d, 0x39,
	0x28, 0xa3, 0xdf, 0x0e, 0xca, 0xe8, 0xeb, 0xc3, 0xf2, 0xd4, 0x93, 0xc3, 0xf2, 0xd4, 0x2f, 0x87,
	0xe5, 0xa9, 0x8f, 0x57, 0x0d, 0xd3, 0xdd, 0xed, 0x6f, 0xab, 0x6d, 0xbe, 0x17, 0x08, 0xbd, 0x1b,
	0x7b, 0xcc, 0xfd, 0xc1, 0x41, 0xee, 0x7e, 0x97, 0x39, 0xdb, 0xc7, 0xc5, 0x0f, 0x92, 0x4b, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x38, 0x4b, 0x01, 0x4c, 0xf7, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a guardianSet by index.
	GuardianSet(ctx context.Context, in *QueryGetGuardianSetRequest, opts ...grpc.CallOption) (*QueryGetGuardianSetResponse, error)
	// Queries a list of guardianSet items.
	GuardianSetAll(ctx context.Context, in *QueryAllGuardianSetRequest, opts ...grpc.CallOption) (*QueryAllGuardianSetResponse, error)
	// Queries a config by index.
	Config(ctx context.Context, in *QueryGetConfigRequest, opts ...grpc.CallOption) (*QueryGetConfigResponse, error)
	// Queries a replayProtection by index.
	ReplayProtection(ctx context.Context, in *QueryGetReplayProtectionRequest, opts ...grpc.CallOption) (*QueryGetReplayProtectionResponse, error)
	// Queries a list of replayProtection items.
	ReplayProtectionAll(ctx context.Context, in *QueryAllReplayProtectionRequest, opts ...grpc.CallOption) (*QueryAllReplayProtectionResponse, error)
	// Queries a sequenceCounter by index.
	SequenceCounter(ctx context.Context, in *QueryGetSequenceCounterRequest, opts ...grpc.CallOption) (*QueryGetSequenceCounterResponse, error)
	// Queries a list of sequenceCounter items.
	SequenceCounterAll(ctx context.Context, in *QueryAllSequenceCounterRequest, opts ...grpc.CallOption) (*QueryAllSequenceCounterResponse, error)
	// Queries a ConsensusGuardianSetIndex by index.
	ConsensusGuardianSetIndex(ctx context.Context, in *QueryGetConsensusGuardianSetIndexRequest, opts ...grpc.CallOption) (*QueryGetConsensusGuardianSetIndexResponse, error)
	// Queries a GuardianValidator by index.
	GuardianValidator(ctx context.Context, in *QueryGetGuardianValidatorRequest, opts ...grpc.CallOption) (*QueryGetGuardianValidatorResponse, error)
	// Queries a list of GuardianValidator items.
	GuardianValidatorAll(ctx context.Context, in *QueryAllGuardianValidatorRequest, opts ...grpc.CallOption) (*QueryAllGuardianValidatorResponse, error)
	// Queries a list of LatestGuardianSetIndex items.
	LatestGuardianSetIndex(ctx context.Context, in *QueryLatestGuardianSetIndexRequest, opts ...grpc.CallOption) (*QueryLatestGuardianSetIndexResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GuardianSet(ctx context.Context, in *QueryGetGuardianSetRequest, opts ...grpc.CallOption) (*QueryGetGuardianSetResponse, error) {
	out := new(QueryGetGuardianSetResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/GuardianSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuardianSetAll(ctx context.Context, in *QueryAllGuardianSetRequest, opts ...grpc.CallOption) (*QueryAllGuardianSetResponse, error) {
	out := new(QueryAllGuardianSetResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/GuardianSetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Config(ctx context.Context, in *QueryGetConfigRequest, opts ...grpc.CallOption) (*QueryGetConfigResponse, error) {
	out := new(QueryGetConfigResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReplayProtection(ctx context.Context, in *QueryGetReplayProtectionRequest, opts ...grpc.CallOption) (*QueryGetReplayProtectionResponse, error) {
	out := new(QueryGetReplayProtectionResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/ReplayProtection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReplayProtectionAll(ctx context.Context, in *QueryAllReplayProtectionRequest, opts ...grpc.CallOption) (*QueryAllReplayProtectionResponse, error) {
	out := new(QueryAllReplayProtectionResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/ReplayProtectionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SequenceCounter(ctx context.Context, in *QueryGetSequenceCounterRequest, opts ...grpc.CallOption) (*QueryGetSequenceCounterResponse, error) {
	out := new(QueryGetSequenceCounterResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/SequenceCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SequenceCounterAll(ctx context.Context, in *QueryAllSequenceCounterRequest, opts ...grpc.CallOption) (*QueryAllSequenceCounterResponse, error) {
	out := new(QueryAllSequenceCounterResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/SequenceCounterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConsensusGuardianSetIndex(ctx context.Context, in *QueryGetConsensusGuardianSetIndexRequest, opts ...grpc.CallOption) (*QueryGetConsensusGuardianSetIndexResponse, error) {
	out := new(QueryGetConsensusGuardianSetIndexResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/ConsensusGuardianSetIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuardianValidator(ctx context.Context, in *QueryGetGuardianValidatorRequest, opts ...grpc.CallOption) (*QueryGetGuardianValidatorResponse, error) {
	out := new(QueryGetGuardianValidatorResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/GuardianValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuardianValidatorAll(ctx context.Context, in *QueryAllGuardianValidatorRequest, opts ...grpc.CallOption) (*QueryAllGuardianValidatorResponse, error) {
	out := new(QueryAllGuardianValidatorResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/GuardianValidatorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestGuardianSetIndex(ctx context.Context, in *QueryLatestGuardianSetIndexRequest, opts ...grpc.CallOption) (*QueryLatestGuardianSetIndexResponse, error) {
	out := new(QueryLatestGuardianSetIndexResponse)
	err := c.cc.Invoke(ctx, "/wormhole_foundation.wormchain.wormhole.Query/LatestGuardianSetIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a guardianSet by index.
	GuardianSet(context.Context, *QueryGetGuardianSetRequest) (*QueryGetGuardianSetResponse, error)
	// Queries a list of guardianSet items.
	GuardianSetAll(context.Context, *QueryAllGuardianSetRequest) (*QueryAllGuardianSetResponse, error)
	// Queries a config by index.
	Config(context.Context, *QueryGetConfigRequest) (*QueryGetConfigResponse, error)
	// Queries a replayProtection by index.
	ReplayProtection(context.Context, *QueryGetReplayProtectionRequest) (*QueryGetReplayProtectionResponse, error)
	// Queries a list of replayProtection items.
	ReplayProtectionAll(context.Context, *QueryAllReplayProtectionRequest) (*QueryAllReplayProtectionResponse, error)
	// Queries a sequenceCounter by index.
	SequenceCounter(context.Context, *QueryGetSequenceCounterRequest) (*QueryGetSequenceCounterResponse, error)
	// Queries a list of sequenceCounter items.
	SequenceCounterAll(context.Context, *QueryAllSequenceCounterRequest) (*QueryAllSequenceCounterResponse, error)
	// Queries a ConsensusGuardianSetIndex by index.
	ConsensusGuardianSetIndex(context.Context, *QueryGetConsensusGuardianSetIndexRequest) (*QueryGetConsensusGuardianSetIndexResponse, error)
	// Queries a GuardianValidator by index.
	GuardianValidator(context.Context, *QueryGetGuardianValidatorRequest) (*QueryGetGuardianValidatorResponse, error)
	// Queries a list of GuardianValidator items.
	GuardianValidatorAll(context.Context, *QueryAllGuardianValidatorRequest) (*QueryAllGuardianValidatorResponse, error)
	// Queries a list of LatestGuardianSetIndex items.
	LatestGuardianSetIndex(context.Context, *QueryLatestGuardianSetIndexRequest) (*QueryLatestGuardianSetIndexResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GuardianSet(ctx context.Context, req *QueryGetGuardianSetRequest) (*QueryGetGuardianSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardianSet not implemented")
}
func (*UnimplementedQueryServer) GuardianSetAll(ctx context.Context, req *QueryAllGuardianSetRequest) (*QueryAllGuardianSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardianSetAll not implemented")
}
func (*UnimplementedQueryServer) Config(ctx context.Context, req *QueryGetConfigRequest) (*QueryGetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedQueryServer) ReplayProtection(ctx context.Context, req *QueryGetReplayProtectionRequest) (*QueryGetReplayProtectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplayProtection not implemented")
}
func (*UnimplementedQueryServer) ReplayProtectionAll(ctx context.Context, req *QueryAllReplayProtectionRequest) (*QueryAllReplayProtectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplayProtectionAll not implemented")
}
func (*UnimplementedQueryServer) SequenceCounter(ctx context.Context, req *QueryGetSequenceCounterRequest) (*QueryGetSequenceCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SequenceCounter not implemented")
}
func (*UnimplementedQueryServer) SequenceCounterAll(ctx context.Context, req *QueryAllSequenceCounterRequest) (*QueryAllSequenceCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SequenceCounterAll not implemented")
}
func (*UnimplementedQueryServer) ConsensusGuardianSetIndex(ctx context.Context, req *QueryGetConsensusGuardianSetIndexRequest) (*QueryGetConsensusGuardianSetIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsensusGuardianSetIndex not implemented")
}
func (*UnimplementedQueryServer) GuardianValidator(ctx context.Context, req *QueryGetGuardianValidatorRequest) (*QueryGetGuardianValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardianValidator not implemented")
}
func (*UnimplementedQueryServer) GuardianValidatorAll(ctx context.Context, req *QueryAllGuardianValidatorRequest) (*QueryAllGuardianValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardianValidatorAll not implemented")
}
func (*UnimplementedQueryServer) LatestGuardianSetIndex(ctx context.Context, req *QueryLatestGuardianSetIndexRequest) (*QueryLatestGuardianSetIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestGuardianSetIndex not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GuardianSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGuardianSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuardianSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/GuardianSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuardianSet(ctx, req.(*QueryGetGuardianSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuardianSetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGuardianSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuardianSetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/GuardianSetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuardianSetAll(ctx, req.(*QueryAllGuardianSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Config(ctx, req.(*QueryGetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReplayProtection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReplayProtectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReplayProtection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/ReplayProtection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReplayProtection(ctx, req.(*QueryGetReplayProtectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReplayProtectionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReplayProtectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReplayProtectionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/ReplayProtectionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReplayProtectionAll(ctx, req.(*QueryAllReplayProtectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SequenceCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSequenceCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SequenceCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/SequenceCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SequenceCounter(ctx, req.(*QueryGetSequenceCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SequenceCounterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSequenceCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SequenceCounterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/SequenceCounterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SequenceCounterAll(ctx, req.(*QueryAllSequenceCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConsensusGuardianSetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetConsensusGuardianSetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConsensusGuardianSetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/ConsensusGuardianSetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConsensusGuardianSetIndex(ctx, req.(*QueryGetConsensusGuardianSetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuardianValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGuardianValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuardianValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/GuardianValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuardianValidator(ctx, req.(*QueryGetGuardianValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuardianValidatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGuardianValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuardianValidatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/GuardianValidatorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuardianValidatorAll(ctx, req.(*QueryAllGuardianValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestGuardianSetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestGuardianSetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestGuardianSetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wormhole_foundation.wormchain.wormhole.Query/LatestGuardianSetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestGuardianSetIndex(ctx, req.(*QueryLatestGuardianSetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wormhole_foundation.wormchain.wormhole.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuardianSet",
			Handler:    _Query_GuardianSet_Handler,
		},
		{
			MethodName: "GuardianSetAll",
			Handler:    _Query_GuardianSetAll_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _Query_Config_Handler,
		},
		{
			MethodName: "ReplayProtection",
			Handler:    _Query_ReplayProtection_Handler,
		},
		{
			MethodName: "ReplayProtectionAll",
			Handler:    _Query_ReplayProtectionAll_Handler,
		},
		{
			MethodName: "SequenceCounter",
			Handler:    _Query_SequenceCounter_Handler,
		},
		{
			MethodName: "SequenceCounterAll",
			Handler:    _Query_SequenceCounterAll_Handler,
		},
		{
			MethodName: "ConsensusGuardianSetIndex",
			Handler:    _Query_ConsensusGuardianSetIndex_Handler,
		},
		{
			MethodName: "GuardianValidator",
			Handler:    _Query_GuardianValidator_Handler,
		},
		{
			MethodName: "GuardianValidatorAll",
			Handler:    _Query_GuardianValidatorAll_Handler,
		},
		{
			MethodName: "LatestGuardianSetIndex",
			Handler:    _Query_LatestGuardianSetIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wormhole/query.proto",
}

func (m *QueryGetGuardianSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuardianSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuardianSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuardianSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuardianSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuardianSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GuardianSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGuardianSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuardianSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuardianSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGuardianSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuardianSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuardianSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GuardianSet) > 0 {
		for iNdEx := len(m.GuardianSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GuardianSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetReplayProtectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReplayProtectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReplayProtectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReplayProtectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReplayProtectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReplayProtectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReplayProtection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReplayProtectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReplayProtectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReplayProtectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReplayProtectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReplayProtectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReplayProtectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReplayProtection) > 0 {
		for iNdEx := len(m.ReplayProtection) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplayProtection[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSequenceCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSequenceCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSequenceCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSequenceCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSequenceCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSequenceCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SequenceCounter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSequenceCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSequenceCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSequenceCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSequenceCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSequenceCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSequenceCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SequenceCounter) > 0 {
		for iNdEx := len(m.SequenceCounter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SequenceCounter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetConsensusGuardianSetIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetConsensusGuardianSetIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetConsensusGuardianSetIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetConsensusGuardianSetIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetConsensusGuardianSetIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetConsensusGuardianSetIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConsensusGuardianSetIndex.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetGuardianValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuardianValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuardianValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuardianKey) > 0 {
		i -= len(m.GuardianKey)
		copy(dAtA[i:], m.GuardianKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GuardianKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuardianValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuardianValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuardianValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GuardianValidator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGuardianValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuardianValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuardianValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGuardianValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuardianValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuardianValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GuardianValidator) > 0 {
		for iNdEx := len(m.GuardianValidator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GuardianValidator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestGuardianSetIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestGuardianSetIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestGuardianSetIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestGuardianSetIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestGuardianSetIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestGuardianSetIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestGuardianSetIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LatestGuardianSetIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetGuardianSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryGetGuardianSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GuardianSet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGuardianSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGuardianSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GuardianSet) > 0 {
		for _, e := range m.GuardianSet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Config.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetReplayProtectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReplayProtectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReplayProtection.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllReplayProtectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReplayProtectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReplayProtection) > 0 {
		for _, e := range m.ReplayProtection {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSequenceCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSequenceCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SequenceCounter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSequenceCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSequenceCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SequenceCounter) > 0 {
		for _, e := range m.SequenceCounter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetConsensusGuardianSetIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetConsensusGuardianSetIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ConsensusGuardianSetIndex.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetGuardianValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuardianKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuardianValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GuardianValidator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGuardianValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGuardianValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GuardianValidator) > 0 {
		for _, e := range m.GuardianValidator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestGuardianSetIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestGuardianSetIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestGuardianSetIndex != 0 {
		n += 1 + sovQuery(uint64(m.LatestGuardianSetIndex))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetGuardianSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuardianSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuardianSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuardianSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuardianSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuardianSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GuardianSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuardianSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuardianSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuardianSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuardianSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuardianSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuardianSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardianSet = append(m.GuardianSet, GuardianSet{})
			if err := m.GuardianSet[len(m.GuardianSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReplayProtectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReplayProtectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReplayProtectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReplayProtectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReplayProtectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReplayProtectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReplayProtection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReplayProtectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReplayProtectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReplayProtectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReplayProtectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReplayProtectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReplayProtectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayProtection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplayProtection = append(m.ReplayProtection, ReplayProtection{})
			if err := m.ReplayProtection[len(m.ReplayProtection)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSequenceCounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSequenceCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSequenceCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSequenceCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSequenceCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSequenceCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SequenceCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSequenceCounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSequenceCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSequenceCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSequenceCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSequenceCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSequenceCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequenceCounter = append(m.SequenceCounter, SequenceCounter{})
			if err := m.SequenceCounter[len(m.SequenceCounter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetConsensusGuardianSetIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetConsensusGuardianSetIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetConsensusGuardianSetIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetConsensusGuardianSetIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetConsensusGuardianSetIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetConsensusGuardianSetIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusGuardianSetIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusGuardianSetIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuardianValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuardianValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuardianValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardianKey = append(m.GuardianKey[:0], dAtA[iNdEx:postIndex]...)
			if m.GuardianKey == nil {
				m.GuardianKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuardianValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuardianValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuardianValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GuardianValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuardianValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuardianValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuardianValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuardianValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuardianValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuardianValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardianValidator = append(m.GuardianValidator, GuardianValidator{})
			if err := m.GuardianValidator[len(m.GuardianValidator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestGuardianSetIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestGuardianSetIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestGuardianSetIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestGuardianSetIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestGuardianSetIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestGuardianSetIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestGuardianSetIndex", wireType)
			}
			m.LatestGuardianSetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestGuardianSetIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
