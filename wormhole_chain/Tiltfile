# This Tiltfile contains the deployment and build config for the Wormhole devnet.
#
#  We use Buildkit cache mounts and careful layering to avoid unnecessary rebuilds - almost
#  all source code changes result in small, incremental rebuilds. Dockerfiles are written such
#  that, for example, changing the contract source code won't cause Solana itself to be rebuilt.
#

load("ext://namespace", "namespace_create", "namespace_inject")
load("ext://secret", "secret_yaml_generic")

allow_k8s_contexts("ci")

# Disable telemetry by default
analytics_settings(False)

# Moar updates (default is 3)
update_settings(max_parallel_updates=10)

# Runtime configuration
config.define_bool("ci", False, "We are running in CI")
config.define_bool("manual", False, "Set TRIGGER_MODE_MANUAL by default")

config.define_string("num", False, "Number of guardian nodes to run")

# You do not usually need to set this argument - this argument is for debugging only. If you do use a different
# namespace, note that the "wormhole" namespace is hardcoded in tests and don't forget specifying the argument
# when running "tilt down".
#
config.define_string("namespace", False, "Kubernetes namespace to use")

# These arguments will enable writing Guardian events to a cloud BigTable instance.
# Writing to a cloud BigTable is optional. These arguments are not required to run the devnet.
config.define_string("gcpProject", False, "GCP project ID for BigTable persistence")
config.define_string("bigTableKeyPath", False, "Path to BigTable json key file")

# When running Tilt on a server, this can be used to set the public hostname Tilt runs on
# for service links in the UI to work.
config.define_string("webHost", False, "Public hostname for port forwards")

# Components
config.define_bool("singleNode", False, "Enable single wormhole node with tiltnet guardian validator keys")

cfg = config.parse()
namespace = "wormhole-chain"
gcpProject = cfg.get("gcpProject", "local-dev")
webHost = cfg.get("webHost", "localhost")
singleNode = cfg.get("singleNode", True)


if cfg.get("manual", False):
    trigger_mode = TRIGGER_MODE_MANUAL
else:
    trigger_mode = TRIGGER_MODE_AUTO

# namespace
namespace_create(namespace)

def k8s_yaml_with_ns(objects):
    return k8s_yaml(namespace_inject(objects, namespace))

if singleNode:
    docker_build(
        ref = "wormhole-chaind-image",
        context = ".",
        dockerfile = "./Dockerfile",
        only = [],
        #these are the important dirs live_update = ["./x","./cosmos-sdk","./app","./config.yml"],
    )

    k8s_yaml_with_ns("testing/validators/kubernetes/wormchain-devnet.yaml")

    k8s_resource(
        "wormhole-chaind",
        port_forwards = [
            port_forward(1317, container_port = 1317, name = "REST", host = webHost),
            port_forward(26657, container_port = 26657, name = "TENDERMINT", host = webHost)
        ],
        resource_deps = [],
        labels = [],
        trigger_mode = trigger_mode,
    )
