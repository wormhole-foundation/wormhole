syntax = "proto3";
package certusone.wormholechain.tokenbridge;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/wormhole-foundation/wormhole-chain/x/tokenbridge/types";

// Msg defines the Msg service.
service Msg {
      rpc ExecuteGovernanceVAA(MsgExecuteGovernanceVAA) returns (MsgExecuteGovernanceVAAResponse);
  rpc ExecuteVAA(MsgExecuteVAA) returns (MsgExecuteVAAResponse);
  rpc AttestToken(MsgAttestToken) returns (MsgAttestTokenResponse);
  rpc Transfer(MsgTransfer) returns (MsgTransferResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgExecuteGovernanceVAA {
  string creator = 1;
  bytes vaa = 2;
}

message MsgExecuteGovernanceVAAResponse {
}

message MsgExecuteVAA {
  string creator = 1;
  bytes vaa = 2;
}

message MsgExecuteVAAResponse {
}

message MsgAttestToken {
  string creator = 1;
  string denom = 2;
}

message MsgAttestTokenResponse {
}

message MsgTransfer {
  string creator = 1;
  cosmos.base.v1beta1.Coin amount = 2
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  uint32 toChain = 3;
  bytes toAddress = 4;
  cosmos.base.v1beta1.Coin fee = 5 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgTransferResponse {
}

// this line is used by starport scaffolding # proto/tx/message
