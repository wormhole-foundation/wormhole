"use strict";
//This file is meant to aggregate the relevant autogenerated files from starport
//and put them into a useable place inside the SDK.
//This file is meant to be run from the ts-sdk directory.
var execSync = require("child_process").execSync;
var fs = require("fs");
var path = require("path");
var CERTUS_DIRECTORY = "../vue/src/store/generated/certusone/wormhole-chain/";
var MODULE_DIRECTORY = "../ts-sdk/src/modules/";
var VUE_DIRECTORY = "../vue";
function allFilesRecursive(directory) {
    var output = [];
    fs.readdirSync(directory).forEach(function (file) {
        var absolute = Path.join(Directory, file);
        if (fs.statSync(absolute).isDirectory())
            return allFilesRecursive(absolute);
        else
            return output.push(absolute);
    });
}
function execWrapper(command) {
    execSync(command, function (error, stdout, stderr) {
        if (error) {
            console.log("error while processing command - ".concat(command, ": ").concat(error.message));
            return;
        }
        if (stderr) {
            console.log("stderr: ".concat(stderr));
            return;
        }
        console.log("stdout: ".concat(stdout));
    });
}
execWrapper("rm -rf ".concat(MODULE_DIRECTORY));
execWrapper("mkdir -p ".concat(MODULE_DIRECTORY));
execWrapper("rm -rf ".concat(VUE_DIRECTORY));
execWrapper("starport chain init -p ../");
//By this time we should have generated all the requisite files in the vue directory.
var certusFiles = fs.readdirSync(CERTUS_DIRECTORY, { withFileTypes: true }); //should only contain directories for the modules
console.log("Detected modules: " + certusFiles);
certusFiles.forEach(function (directory) {
    execWrapper("mkdir -p ".concat(MODULE_DIRECTORY + directory.name, "/"));
    execWrapper("cp -R ".concat(CERTUS_DIRECTORY + directory.name, "/module/* ").concat(MODULE_DIRECTORY + directory.name, "/")); //move all the files from the vue module into the sdk
});
execWrapper("find ".concat(MODULE_DIRECTORY, " -name \"*.js\" | xargs rm ")); //delete all javascript files, so they can be cleanly created based on our tsconfig
function getFilesRecursively(directory) {
    var filesInDirectory = fs.readdirSync(directory);
    return filesInDirectory.flatMap(function (file) {
        var absolute = path.join(directory, file);
        if (fs.statSync(absolute).isDirectory()) {
            return getFilesRecursively(absolute);
        }
        else {
            return [absolute];
        }
    });
}
var files = getFilesRecursively(MODULE_DIRECTORY);
files.forEach(function (path) {
    var fileContent = fs.readFileSync(path);
    var fileString = fileContent.toString("UTF-8");
    var fileStringModified = "//@ts-nocheck\n" + fileString;
    fs.writeFileSync(path, fileStringModified);
});
console.log("Successfully copied all autogenerated typescript files");
