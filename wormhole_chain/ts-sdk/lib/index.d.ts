import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
import { QueryClient, StargateClient, StdFee } from "@cosmjs/stargate";
import { RpcStatus, HttpResponse } from "./modules/certusone.wormholechain.tokenbridge/rest";
export declare const TENDERMINT_URL = "http://localhost:26657";
export declare const HOLE_DENOM = "uhole";
export declare const LCD_URL = "http://localhost:1317";
export declare function getStargateQueryClient(): Promise<QueryClient & import("@cosmjs/stargate").TxExtension & import("@cosmjs/stargate").GovExtension & import("@cosmjs/stargate").IbcExtension & import("@cosmjs/stargate").AuthExtension & import("@cosmjs/stargate").BankExtension & import("@cosmjs/stargate").MintExtension & import("@cosmjs/stargate").StakingExtension>;
export declare function getStargateClient(): Promise<StargateClient>;
export declare function getZeroFee(): StdFee;
export declare function getWallet(mnemonic: string): Promise<DirectSecp256k1HdWallet>;
export declare function getAddress(wallet: DirectSecp256k1HdWallet): Promise<string>;
export declare function executeGovernanceVAA(wallet: DirectSecp256k1HdWallet, hexVaa: string): Promise<any>;
export declare function getGuardianSets(): Promise<import("./modules/certusone.wormholechain.wormhole/rest").WormholeQueryAllGuardianSetResponse>;
export declare function getActiveGuardianSet(): Promise<import("./modules/certusone.wormholechain.wormhole/rest").WormholeQueryGetActiveGuardianSetIndexResponse>;
export declare function getValidators(): Promise<import("cosmjs-types/cosmos/staking/v1beta1/query").QueryValidatorsResponse>;
export declare function getGuardianValidatorRegistrations(): Promise<import("./modules/certusone.wormholechain.wormhole/rest").WormholeQueryAllGuardianValidatorResponse>;
export declare function unpackHttpReponse<T>(response: Promise<HttpResponse<T, RpcStatus>>): Promise<T>;
export declare function fromBech32(address: string): Uint8Array;
export declare function fromValAddress(valAddress: string): Uint8Array;
export declare function toBech32(address: Uint8Array): string;
export declare function toValAddress(address: Uint8Array): string;
export declare function fromBase64(address: string): Uint8Array;
