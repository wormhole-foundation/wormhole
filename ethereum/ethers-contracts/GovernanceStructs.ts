/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace GovernanceStructs {
  export type ContractUpgradeStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    newContract: PromiseOrValue<string>;
  };

  export type ContractUpgradeStructOutput = [string, number, number, string] & {
    module: string;
    action: number;
    chain: number;
    newContract: string;
  };

  export type GuardianSetUpgradeStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    newGuardianSet: Structs.GuardianSetStruct;
    newGuardianSetIndex: PromiseOrValue<BigNumberish>;
  };

  export type GuardianSetUpgradeStructOutput = [
    string,
    number,
    number,
    Structs.GuardianSetStructOutput,
    number
  ] & {
    module: string;
    action: number;
    chain: number;
    newGuardianSet: Structs.GuardianSetStructOutput;
    newGuardianSetIndex: number;
  };

  export type RecoverChainIdStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    evmChainId: PromiseOrValue<BigNumberish>;
    newChainId: PromiseOrValue<BigNumberish>;
  };

  export type RecoverChainIdStructOutput = [
    string,
    number,
    BigNumber,
    number
  ] & {
    module: string;
    action: number;
    evmChainId: BigNumber;
    newChainId: number;
  };

  export type SetMessageFeeStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    messageFee: PromiseOrValue<BigNumberish>;
  };

  export type SetMessageFeeStructOutput = [
    string,
    number,
    number,
    BigNumber
  ] & { module: string; action: number; chain: number; messageFee: BigNumber };

  export type TransferFeesStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<BytesLike>;
  };

  export type TransferFeesStructOutput = [
    string,
    number,
    number,
    BigNumber,
    string
  ] & {
    module: string;
    action: number;
    chain: number;
    amount: BigNumber;
    recipient: string;
  };
}

export declare namespace Structs {
  export type GuardianSetStruct = {
    keys: PromiseOrValue<string>[];
    expirationTime: PromiseOrValue<BigNumberish>;
  };

  export type GuardianSetStructOutput = [string[], number] & {
    keys: string[];
    expirationTime: number;
  };
}

export interface GovernanceStructsInterface extends utils.Interface {
  functions: {
    "parseContractUpgrade(bytes)": FunctionFragment;
    "parseGuardianSetUpgrade(bytes)": FunctionFragment;
    "parseRecoverChainId(bytes)": FunctionFragment;
    "parseSetMessageFee(bytes)": FunctionFragment;
    "parseTransferFees(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "parseContractUpgrade"
      | "parseGuardianSetUpgrade"
      | "parseRecoverChainId"
      | "parseSetMessageFee"
      | "parseTransferFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "parseContractUpgrade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseGuardianSetUpgrade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRecoverChainId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSetMessageFee",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTransferFees",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "parseContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseGuardianSetUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRecoverChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSetMessageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTransferFees",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GovernanceStructs extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceStructsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    parseContractUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.ContractUpgradeStructOutput] & {
        cu: GovernanceStructs.ContractUpgradeStructOutput;
      }
    >;

    parseGuardianSetUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.GuardianSetUpgradeStructOutput] & {
        gsu: GovernanceStructs.GuardianSetUpgradeStructOutput;
      }
    >;

    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.RecoverChainIdStructOutput] & {
        rci: GovernanceStructs.RecoverChainIdStructOutput;
      }
    >;

    parseSetMessageFee(
      encodedSetMessageFee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.SetMessageFeeStructOutput] & {
        smf: GovernanceStructs.SetMessageFeeStructOutput;
      }
    >;

    parseTransferFees(
      encodedTransferFees: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [GovernanceStructs.TransferFeesStructOutput] & {
        tf: GovernanceStructs.TransferFeesStructOutput;
      }
    >;
  };

  parseContractUpgrade(
    encodedUpgrade: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.ContractUpgradeStructOutput>;

  parseGuardianSetUpgrade(
    encodedUpgrade: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.GuardianSetUpgradeStructOutput>;

  parseRecoverChainId(
    encodedRecoverChainId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.RecoverChainIdStructOutput>;

  parseSetMessageFee(
    encodedSetMessageFee: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.SetMessageFeeStructOutput>;

  parseTransferFees(
    encodedTransferFees: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GovernanceStructs.TransferFeesStructOutput>;

  callStatic: {
    parseContractUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.ContractUpgradeStructOutput>;

    parseGuardianSetUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.GuardianSetUpgradeStructOutput>;

    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.RecoverChainIdStructOutput>;

    parseSetMessageFee(
      encodedSetMessageFee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.SetMessageFeeStructOutput>;

    parseTransferFees(
      encodedTransferFees: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GovernanceStructs.TransferFeesStructOutput>;
  };

  filters: {};

  estimateGas: {
    parseContractUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseGuardianSetUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseSetMessageFee(
      encodedSetMessageFee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseTransferFees(
      encodedTransferFees: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    parseContractUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseGuardianSetUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseSetMessageFee(
      encodedSetMessageFee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseTransferFees(
      encodedTransferFees: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
