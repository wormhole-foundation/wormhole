/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IWormholeRelayer {
  export type MessageInfoStruct = {
    infoType: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
    vaaHash: PromiseOrValue<BytesLike>;
  };

  export type MessageInfoStructOutput = [number, string, BigNumber, string] & {
    infoType: number;
    emitterAddress: string;
    sequence: BigNumber;
    vaaHash: string;
  };
}

export declare namespace IWormholeRelayerInstructionParser {
  export type ExecutionParametersStruct = {
    version: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    providerDeliveryAddress: PromiseOrValue<BytesLike>;
  };

  export type ExecutionParametersStructOutput = [number, number, string] & {
    version: number;
    gasLimit: number;
    providerDeliveryAddress: string;
  };

  export type DeliveryInstructionStruct = {
    targetChain: PromiseOrValue<BigNumberish>;
    targetAddress: PromiseOrValue<BytesLike>;
    refundAddress: PromiseOrValue<BytesLike>;
    maximumRefundTarget: PromiseOrValue<BigNumberish>;
    receiverValueTarget: PromiseOrValue<BigNumberish>;
    executionParameters: IWormholeRelayerInstructionParser.ExecutionParametersStruct;
  };

  export type DeliveryInstructionStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    IWormholeRelayerInstructionParser.ExecutionParametersStructOutput
  ] & {
    targetChain: number;
    targetAddress: string;
    refundAddress: string;
    maximumRefundTarget: BigNumber;
    receiverValueTarget: BigNumber;
    executionParameters: IWormholeRelayerInstructionParser.ExecutionParametersStructOutput;
  };

  export type DeliveryInstructionsContainerStruct = {
    payloadId: PromiseOrValue<BigNumberish>;
    sufficientlyFunded: PromiseOrValue<boolean>;
    messages: IWormholeRelayer.MessageInfoStruct[];
    instructions: IWormholeRelayerInstructionParser.DeliveryInstructionStruct[];
  };

  export type DeliveryInstructionsContainerStructOutput = [
    number,
    boolean,
    IWormholeRelayer.MessageInfoStructOutput[],
    IWormholeRelayerInstructionParser.DeliveryInstructionStructOutput[]
  ] & {
    payloadId: number;
    sufficientlyFunded: boolean;
    messages: IWormholeRelayer.MessageInfoStructOutput[];
    instructions: IWormholeRelayerInstructionParser.DeliveryInstructionStructOutput[];
  };

  export type RedeliveryByTxHashInstructionStruct = {
    payloadId: PromiseOrValue<BigNumberish>;
    sourceChain: PromiseOrValue<BigNumberish>;
    sourceTxHash: PromiseOrValue<BytesLike>;
    deliveryVAASequence: PromiseOrValue<BigNumberish>;
    targetChain: PromiseOrValue<BigNumberish>;
    multisendIndex: PromiseOrValue<BigNumberish>;
    newMaximumRefundTarget: PromiseOrValue<BigNumberish>;
    newReceiverValueTarget: PromiseOrValue<BigNumberish>;
    executionParameters: IWormholeRelayerInstructionParser.ExecutionParametersStruct;
  };

  export type RedeliveryByTxHashInstructionStructOutput = [
    number,
    number,
    string,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    IWormholeRelayerInstructionParser.ExecutionParametersStructOutput
  ] & {
    payloadId: number;
    sourceChain: number;
    sourceTxHash: string;
    deliveryVAASequence: BigNumber;
    targetChain: number;
    multisendIndex: number;
    newMaximumRefundTarget: BigNumber;
    newReceiverValueTarget: BigNumber;
    executionParameters: IWormholeRelayerInstructionParser.ExecutionParametersStructOutput;
  };
}

export interface IWormholeRelayerInstructionParserInterface
  extends utils.Interface {
  functions: {
    "decodeDeliveryInstructionsContainer(bytes)": FunctionFragment;
    "decodeRedeliveryInstruction(bytes)": FunctionFragment;
    "fromWormholeFormat(bytes32)": FunctionFragment;
    "toWormholeFormat(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decodeDeliveryInstructionsContainer"
      | "decodeRedeliveryInstruction"
      | "fromWormholeFormat"
      | "toWormholeFormat"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeDeliveryInstructionsContainer",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeRedeliveryInstruction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fromWormholeFormat",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "toWormholeFormat",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeDeliveryInstructionsContainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeRedeliveryInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromWormholeFormat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toWormholeFormat",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IWormholeRelayerInstructionParser extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWormholeRelayerInstructionParserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeDeliveryInstructionsContainer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        IWormholeRelayerInstructionParser.DeliveryInstructionsContainerStructOutput
      ]
    >;

    decodeRedeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        IWormholeRelayerInstructionParser.RedeliveryByTxHashInstructionStructOutput
      ] & {
        instruction: IWormholeRelayerInstructionParser.RedeliveryByTxHashInstructionStructOutput;
      }
    >;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { whFormat: string }>;
  };

  decodeDeliveryInstructionsContainer(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IWormholeRelayerInstructionParser.DeliveryInstructionsContainerStructOutput>;

  decodeRedeliveryInstruction(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IWormholeRelayerInstructionParser.RedeliveryByTxHashInstructionStructOutput>;

  fromWormholeFormat(
    whFormatAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  toWormholeFormat(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    decodeDeliveryInstructionsContainer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IWormholeRelayerInstructionParser.DeliveryInstructionsContainerStructOutput>;

    decodeRedeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IWormholeRelayerInstructionParser.RedeliveryByTxHashInstructionStructOutput>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decodeDeliveryInstructionsContainer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeRedeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeDeliveryInstructionsContainer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeRedeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
