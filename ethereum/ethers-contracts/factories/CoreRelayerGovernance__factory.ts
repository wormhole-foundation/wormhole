/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  CoreRelayerGovernance,
  CoreRelayerGovernanceInterface,
} from "../CoreRelayerGovernance";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "FailedToInitializeImplementation",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
    ],
    name: "InvalidChainId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "InvalidDeliveryInstructionsPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEvmChainId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidFork",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "InvalidGovernanceVM",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "payloadId",
        type: "uint8",
      },
    ],
    name: "InvalidPayloadId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
    ],
    name: "WrongChainId",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldContract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newContract",
        type: "address",
      },
    ],
    name: "ContractUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "chainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "decodeDeliveryInstruction",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "targetChain",
            type: "uint16",
          },
          {
            internalType: "bytes32",
            name: "targetAddress",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "refundAddress",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "maximumRefundTarget",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "receiverValueTarget",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "version",
                type: "uint8",
              },
              {
                internalType: "uint32",
                name: "gasLimit",
                type: "uint32",
              },
              {
                internalType: "bytes32",
                name: "providerDeliveryAddress",
                type: "bytes32",
              },
            ],
            internalType: "struct CoreRelayerStructs.ExecutionParameters",
            name: "executionParameters",
            type: "tuple",
          },
        ],
        internalType: "struct CoreRelayerStructs.DeliveryInstruction",
        name: "instruction",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "newIndex",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "decodeDeliveryInstructionsContainer",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "payloadId",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "sufficientlyFunded",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "enum IWormholeRelayer.MessageInfoType",
                name: "infoType",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "emitterAddress",
                type: "bytes32",
              },
              {
                internalType: "uint64",
                name: "sequence",
                type: "uint64",
              },
              {
                internalType: "bytes32",
                name: "vaaHash",
                type: "bytes32",
              },
            ],
            internalType: "struct IWormholeRelayer.MessageInfo[]",
            name: "messages",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "targetChain",
                type: "uint16",
              },
              {
                internalType: "bytes32",
                name: "targetAddress",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "refundAddress",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "maximumRefundTarget",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "receiverValueTarget",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                  },
                  {
                    internalType: "uint32",
                    name: "gasLimit",
                    type: "uint32",
                  },
                  {
                    internalType: "bytes32",
                    name: "providerDeliveryAddress",
                    type: "bytes32",
                  },
                ],
                internalType: "struct CoreRelayerStructs.ExecutionParameters",
                name: "executionParameters",
                type: "tuple",
              },
            ],
            internalType: "struct CoreRelayerStructs.DeliveryInstruction[]",
            name: "instructions",
            type: "tuple[]",
          },
        ],
        internalType: "struct CoreRelayerStructs.DeliveryInstructionsContainer",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "decodeMessageInfo",
    outputs: [
      {
        components: [
          {
            internalType: "enum IWormholeRelayer.MessageInfoType",
            name: "infoType",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sequence",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "vaaHash",
            type: "bytes32",
          },
        ],
        internalType: "struct IWormholeRelayer.MessageInfo",
        name: "messageInfo",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "newIndex",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "decodeRedeliveryInstruction",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "payloadId",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "sourceChain",
            type: "uint16",
          },
          {
            internalType: "bytes32",
            name: "sourceTxHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "deliveryVAASequence",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "targetChain",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "multisendIndex",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "newMaximumRefundTarget",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newReceiverValueTarget",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "version",
                type: "uint8",
              },
              {
                internalType: "uint32",
                name: "gasLimit",
                type: "uint32",
              },
              {
                internalType: "bytes32",
                name: "providerDeliveryAddress",
                type: "bytes32",
              },
            ],
            internalType: "struct CoreRelayerStructs.ExecutionParameters",
            name: "executionParameters",
            type: "tuple",
          },
        ],
        internalType: "struct CoreRelayerStructs.RedeliveryByTxHashInstruction",
        name: "instruction",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "evmChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "governanceActionIsConsumed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governanceChainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governanceContract",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isFork",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "vaa",
        type: "bytes",
      },
    ],
    name: "registerCoreRelayerContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chain",
        type: "uint16",
      },
    ],
    name: "registeredCoreRelayerContract",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "vaa",
        type: "bytes",
      },
    ],
    name: "setDefaultRelayProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_vm",
        type: "bytes",
      },
    ],
    name: "submitContractUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "contract IWormhole",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class CoreRelayerGovernance__factory {
  static readonly abi = _abi;
  static createInterface(): CoreRelayerGovernanceInterface {
    return new utils.Interface(_abi) as CoreRelayerGovernanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoreRelayerGovernance {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CoreRelayerGovernance;
  }
}
