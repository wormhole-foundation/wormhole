/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  NFTBridgeGetters,
  NFTBridgeGettersInterface,
} from "../NFTBridgeGetters";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId_",
        type: "uint16",
      },
    ],
    name: "bridgeContracts",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "chainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "evmChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "finality",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "governanceActionIsConsumed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governanceChainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governanceContract",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isFork",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "isTransferCompleted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "isWrappedAsset",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "splCache",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "name",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "symbol",
            type: "bytes32",
          },
        ],
        internalType: "struct NFTBridgeStorage.SPLCache",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "contract IWormhole",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "tokenChainId",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "tokenAddress",
        type: "bytes32",
      },
    ],
    name: "wrappedAsset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610409806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806384acd1bb11610097578063b172b22211610066578063b172b222146102cd578063d60b347f146102d5578063e039f22414610301578063fbe3c2cd1461030957600080fd5b806384acd1bb1461025a5780639a8a05921461026b578063aa4efa5b14610286578063ad66a5f1146102a957600080fd5b80632f3a3d5d116100d35780632f3a3d5d146101b05780633ca64826146101c157806364d42b1714610228578063739fc8d11461023a57600080fd5b80631a2be4da146100fa5780631ff1e2861461013b5780632c3c02a41461018d575b600080fd5b61012661010836600461032e565b6001600160a01b031660009081526008602052604090205460ff1690565b60405190151581526020015b60405180910390f35b610175610149366004610375565b61ffff91909116600090815260076020908152604080832093835292905220546001600160a01b031690565b6040516001600160a01b039091168152602001610132565b61012661019b36600461039f565b60009081526004602052604090205460ff1690565b6001546001600160a01b0316610175565b61020d6101cf36600461039f565b6040805180820190915260008082526020820152506000908152600a6020908152604091829020825180840190935280548352600101549082015290565b60408051825181526020928301519281019290925201610132565b600b545b604051908152602001610132565b600254640100000000900460ff1660405160ff9091168152602001610132565b6000546001600160a01b0316610175565b60025461ffff165b60405161ffff9091168152602001610132565b61012661029436600461039f565b60009081526005602052604090205460ff1690565b61022c6102b73660046103b8565b61ffff1660009081526009602052604090205490565b60035461022c565b6101266102e336600461032e565b6001600160a01b031660009081526006602052604090205460ff1690565b61012661031b565b60025462010000900461ffff16610273565b600046610327600b5490565b1415905090565b60006020828403121561034057600080fd5b81356001600160a01b038116811461035757600080fd5b9392505050565b803561ffff8116811461037057600080fd5b919050565b6000806040838503121561038857600080fd5b6103918361035e565b946020939093013593505050565b6000602082840312156103b157600080fd5b5035919050565b6000602082840312156103ca57600080fd5b6103578261035e56fea264697066735822122094ed957604cb571057fce8a21e3098143184219a706864ad89552d03588164f464736f6c63430008110033";

type NFTBridgeGettersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTBridgeGettersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTBridgeGetters__factory extends ContractFactory {
  constructor(...args: NFTBridgeGettersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTBridgeGetters> {
    return super.deploy(overrides || {}) as Promise<NFTBridgeGetters>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTBridgeGetters {
    return super.attach(address) as NFTBridgeGetters;
  }
  override connect(signer: Signer): NFTBridgeGetters__factory {
    return super.connect(signer) as NFTBridgeGetters__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTBridgeGettersInterface {
    return new utils.Interface(_abi) as NFTBridgeGettersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTBridgeGetters {
    return new Contract(address, _abi, signerOrProvider) as NFTBridgeGetters;
  }
}
