/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  AttackForwardIntegration,
  AttackForwardIntegrationInterface,
} from "../AttackForwardIntegration";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWormhole",
        name: "initWormhole",
        type: "address",
      },
      {
        internalType: "contract IWormholeRelayer",
        name: "initCoreRelayer",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "initAttackerReward",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "vaas",
        type: "bytes[]",
      },
      {
        internalType: "bytes[]",
        name: "additionalData",
        type: "bytes[]",
      },
    ],
    name: "receiveWormholeMessages",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "toWormholeFormat",
    outputs: [
      {
        internalType: "bytes32",
        name: "whFormat",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526003805469ffffffff0000ffffffff60a01b19167b7530000000000001000000000000000000000000000000000000000017905534801561004457600080fd5b5060405161090a38038061090a833981016040819052610063916100dd565b600180546001600160a01b039283166001600160a01b0319918216179091556002805495831695909116949094179093556003805461ffff909216600160c01b02600165ffff0000000160a01b03199092169290931691909117179055610143565b6001600160a01b03811681146100da57600080fd5b50565b600080600080608085870312156100f357600080fd5b84516100fe816100c5565b602086015190945061010f816100c5565b604086015190935061ffff8116811461012757600080fd5b6060860151909250610138816100c5565b939692955090935050565b6107b8806101526000396000f3fe60806040526004361061002d5760003560e01c8063af24c7b01461005d578063cad816ef1461009657600080fd5b366100585760035460015461005691600160c01b900461ffff16906001600160a01b03166100a8565b005b600080fd5b34801561006957600080fd5b506100846100783660046103ae565b6001600160a01b031690565b60405190815260200160405180910390f35b6100566100a4366004610524565b5050565b600354604080516310fc145b60e01b815290516000926001600160a01b0381169263624e4b3e928792600160d01b900463ffffffff169185916310fc145b916004808201926020929091908290030181865afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101309190610588565b6040516001600160e01b031960e086901b16815261ffff909316600484015263ffffffff9190911660248301526001600160a01b03166044820152606401602060405180830381865afa15801561018b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101af91906105a5565b905060006040518060c001604052808561ffff16815260200184815260200184815260200183815260200160008152602001600360009054906101000a90046001600160a01b03166001600160a01b031663421a178b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261025c91908101906105e2565b90526003549091506001600160a01b031663acb1816d838360006040519080825280602002602001820160405280156102c857816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816102945790505b50600360009054906101000a90046001600160a01b03166001600160a01b03166310fc145b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190610588565b6040518563ffffffff1660e01b815260040161035e939291906106dc565b6000604051808303818588803b15801561037757600080fd5b505af115801561038b573d6000803e3d6000fd5b505050505050505050565b6001600160a01b03811681146103ab57600080fd5b50565b6000602082840312156103c057600080fd5b81356103cb81610396565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610411576104116103d2565b604052919050565b600067ffffffffffffffff821115610433576104336103d2565b50601f01601f191660200190565b600082601f83011261045257600080fd5b8135602067ffffffffffffffff8083111561046f5761046f6103d2565b8260051b61047e8382016103e8565b938452858101830193838101908886111561049857600080fd5b84880192505b85831015610518578235848111156104b65760008081fd5b8801603f81018a136104c85760008081fd5b8581013560406104df6104da83610419565b6103e8565b8281528c828486010111156104f45760008081fd5b828285018a830137600092810189019290925250835250918401919084019061049e565b98975050505050505050565b6000806040838503121561053757600080fd5b823567ffffffffffffffff8082111561054f57600080fd5b61055b86838701610441565b9350602085013591508082111561057157600080fd5b5061057e85828601610441565b9150509250929050565b60006020828403121561059a57600080fd5b81516103cb81610396565b6000602082840312156105b757600080fd5b5051919050565b60005b838110156105d95781810151838201526020016105c1565b50506000910152565b6000602082840312156105f457600080fd5b815167ffffffffffffffff81111561060b57600080fd5b8201601f8101841361061c57600080fd5b805161062a6104da82610419565b81815285602083850101111561063f57600080fd5b6106508260208301602086016105be565b95945050505050565b60008151808452602080850194508084016000805b848110156106d057825180516002811061069657634e487b7160e01b84526021600452602484fd5b895280850151858a015260408082015167ffffffffffffffff16908a0152606090810151908901526080909701969183019160010161066e565b50959695505050505050565b6060815261ffff845116606082015260208401516080820152604084015160a0820152606084015160c0820152608084015160e0820152600060a085015160c061010084015280518061012085015261014061073e82828701602086016105be565b601f8201601f1916850185810382016020870152925061076081840188610659565b935050505061077a60408301846001600160a01b03169052565b94935050505056fea2646970667358221220b885a2315bc8959905b6ab7b966462f0c1cd0b4c838a517eeb2da37c95704b0e64736f6c63430008110033";

type AttackForwardIntegrationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackForwardIntegrationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackForwardIntegration__factory extends ContractFactory {
  constructor(...args: AttackForwardIntegrationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initWormhole: PromiseOrValue<string>,
    initCoreRelayer: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    initAttackerReward: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AttackForwardIntegration> {
    return super.deploy(
      initWormhole,
      initCoreRelayer,
      chainId,
      initAttackerReward,
      overrides || {}
    ) as Promise<AttackForwardIntegration>;
  }
  override getDeployTransaction(
    initWormhole: PromiseOrValue<string>,
    initCoreRelayer: PromiseOrValue<string>,
    chainId: PromiseOrValue<BigNumberish>,
    initAttackerReward: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      initWormhole,
      initCoreRelayer,
      chainId,
      initAttackerReward,
      overrides || {}
    );
  }
  override attach(address: string): AttackForwardIntegration {
    return super.attach(address) as AttackForwardIntegration;
  }
  override connect(signer: Signer): AttackForwardIntegration__factory {
    return super.connect(signer) as AttackForwardIntegration__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackForwardIntegrationInterface {
    return new utils.Interface(_abi) as AttackForwardIntegrationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackForwardIntegration {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AttackForwardIntegration;
  }
}
