/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  RelayProviderMessages,
  RelayProviderMessagesInterface,
} from "../RelayProviderMessages";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "approvedSender",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "targetChain",
        type: "uint16",
      },
    ],
    name: "assetConversionBuffer",
    outputs: [
      {
        internalType: "uint16",
        name: "tolerance",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "toleranceDenominator",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "chainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "coreRelayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "targetChainId",
        type: "uint16",
      },
    ],
    name: "deliverGasOverhead",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "targetChain",
        type: "uint16",
      },
    ],
    name: "deliveryAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "whFormatAddress",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "targetChainId",
        type: "uint16",
      },
    ],
    name: "gasPrice",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "targetChainId",
        type: "uint16",
      },
    ],
    name: "maximumBudget",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "targetChainId",
        type: "uint16",
      },
    ],
    name: "nativeCurrencyPrice",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "targetChainId",
        type: "uint16",
      },
    ],
    name: "wormholeFee",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103e1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063d60b347f11610066578063d60b347f146102df578063e30c39781461030b578063e8fec1ce1461031c578063ec1c450a1461032d57600080fd5b80638da5cb5b146102635780639a8a05921461027a578063bb7c0a631461029057600080fd5b806349cdb88c116100c857806349cdb88c146101b157806354c5c166146101de5780637ebc751f1461021a5780638cf57cb91461023e57600080fd5b80633171aaec146100ef5780633e48e773146101265780634713de7a14610165575b600080fd5b6101136100fd366004610357565b61ffff1660009081526007602052604090205490565b6040519081526020015b60405180910390f35b610150610134366004610357565b61ffff1660009081526005602052604090205463ffffffff1690565b60405163ffffffff909116815260200161011d565b610199610173366004610357565b61ffff16600090815260046020526040902054600160801b90046001600160801b031690565b6040516001600160801b03909116815260200161011d565b6101996101bf366004610357565b61ffff166000908152600460205260409020546001600160801b031690565b61020a6101ec366004610382565b6001600160a01b031660009081526009602052604090205460ff1690565b604051901515815260200161011d565b610113610228366004610357565b61ffff1660009081526008602052604090205490565b600b546001600160a01b03165b6040516001600160a01b03909116815260200161011d565b6000546201000090046001600160a01b031661024b565b60005460405161ffff909116815260200161011d565b6102c461029e366004610357565b61ffff9081166000908152600a6020526040902054808216926201000090910490911690565b6040805161ffff93841681529290911660208301520161011d565b61020a6102ed366004610382565b6001600160a01b031660009081526003602052604090205460ff1690565b6001546001600160a01b031661024b565b6002546001600160a01b031661024b565b61015061033b366004610357565b61ffff1660009081526006602052604090205463ffffffff1690565b60006020828403121561036957600080fd5b813561ffff8116811461037b57600080fd5b9392505050565b60006020828403121561039457600080fd5b81356001600160a01b038116811461037b57600080fdfea26469706673582212205062567c4d58a361484cb432f511998530318443717defabca02c3c2041daf3764736f6c63430008110033";

type RelayProviderMessagesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RelayProviderMessagesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RelayProviderMessages__factory extends ContractFactory {
  constructor(...args: RelayProviderMessagesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RelayProviderMessages> {
    return super.deploy(overrides || {}) as Promise<RelayProviderMessages>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RelayProviderMessages {
    return super.attach(address) as RelayProviderMessages;
  }
  override connect(signer: Signer): RelayProviderMessages__factory {
    return super.connect(signer) as RelayProviderMessages__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RelayProviderMessagesInterface {
    return new utils.Interface(_abi) as RelayProviderMessagesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RelayProviderMessages {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RelayProviderMessages;
  }
}
