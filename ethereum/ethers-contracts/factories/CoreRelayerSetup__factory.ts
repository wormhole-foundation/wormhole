/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CoreRelayerSetup,
  CoreRelayerSetupInterface,
} from "../CoreRelayerSetup";

const _abi = [
  {
    inputs: [],
    name: "DefaultRelayProviderAddressIsZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "FailedToInitializeImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "ImplementationAddressIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEvmChainId",
    type: "error",
  },
  {
    inputs: [],
    name: "WormholeAddressIsZero",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "wormhole",
        type: "address",
      },
      {
        internalType: "address",
        name: "defaultRelayProvider",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "governanceChainId",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "governanceContract",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "evmChainId",
        type: "uint256",
      },
    ],
    name: "setup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610452806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d59f881914610030575b600080fd5b61004361003e366004610331565b610045565b005b6001600160a01b03871661006c576040516309e9cf2160e01b815260040160405180910390fd5b6001600160a01b03851661009357604051635707839d60e11b815260040160405180910390fd5b6001600160a01b0384166100ba57604051639a10592960e01b815260040160405180910390fd5b6000805461ffff191661ffff88161790556000805462010000600160b01b031916620100006001600160a01b03881602179055600580546001600160a01b0319166001600160a01b0386161790556000805461ffff60b01b1916600160b01b61ffff86160217905561012b82600155565b610134816101f9565b61013d8761021e565b60408051600481526024810182526020810180516001600160e01b031663204a7f0760e21b179052905160009182916001600160a01b038b1691610180916103cd565b600060405180830381855af49150503d80600081146101bb576040519150601f19603f3d011682016040523d82523d6000602084013e6101c0565b606091505b5091509150816101ee57806040516385f11c8360e01b81526004016101e591906103e9565b60405180910390fd5b505050505050505050565b46811461021957604051635f38a2dd60e01b815260040160405180910390fd5b600355565b6102278161025e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b803b6102c25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016101e5565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b038116811461031a57600080fd5b919050565b803561ffff8116811461031a57600080fd5b600080600080600080600060e0888a03121561034c57600080fd5b61035588610303565b96506103636020890161031f565b955061037160408901610303565b945061037f60608901610303565b935061038d6080890161031f565b925060a0880135915060c0880135905092959891949750929550565b60005b838110156103c45781810151838201526020016103ac565b50506000910152565b600082516103df8184602087016103a9565b9190910192915050565b60208152600082518060208401526104088160408501602087016103a9565b601f01601f1916919091016040019291505056fea2646970667358221220f8bd42ef52670a3e8b0d7c77f67fc5e21aaa4c10f30deda3553d2c615746518f64736f6c63430008110033";

type CoreRelayerSetupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoreRelayerSetupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoreRelayerSetup__factory extends ContractFactory {
  constructor(...args: CoreRelayerSetupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CoreRelayerSetup> {
    return super.deploy(overrides || {}) as Promise<CoreRelayerSetup>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoreRelayerSetup {
    return super.attach(address) as CoreRelayerSetup;
  }
  override connect(signer: Signer): CoreRelayerSetup__factory {
    return super.connect(signer) as CoreRelayerSetup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoreRelayerSetupInterface {
    return new utils.Interface(_abi) as CoreRelayerSetupInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoreRelayerSetup {
    return new Contract(address, _abi, signerOrProvider) as CoreRelayerSetup;
  }
}
