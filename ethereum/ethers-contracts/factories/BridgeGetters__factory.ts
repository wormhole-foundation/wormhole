/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { BridgeGetters, BridgeGettersInterface } from "../BridgeGetters";

const _abi = [
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract IWETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId_",
        type: "uint16",
      },
    ],
    name: "bridgeContracts",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "chainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "evmChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "finality",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "governanceActionIsConsumed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governanceChainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governanceContract",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isFork",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "impl",
        type: "address",
      },
    ],
    name: "isInitialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "isTransferCompleted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "isWrappedAsset",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "outstandingBridged",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "contract IWormhole",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "tokenChainId",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "tokenAddress",
        type: "bytes32",
      },
    ],
    name: "wrappedAsset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103e7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063aa4efa5b11610097578063b96c7e4d11610066578063b96c7e4d1461028a578063d60b347f146102b3578063e039f224146102df578063fbe3c2cd146102e757600080fd5b8063aa4efa5b1461022a578063ad5c46481461024d578063ad66a5f11461025e578063b172b2221461028257600080fd5b806364d42b17116100d357806364d42b17146101cc578063739fc8d1146101de57806384acd1bb146101fe5780639a8a05921461020f57600080fd5b80631a2be4da146101055780631ff1e286146101465780632c3c02a4146101985780632f3a3d5d146101bb575b600080fd5b61013161011336600461030c565b6001600160a01b031660009081526009602052604090205460ff1690565b60405190151581526020015b60405180910390f35b610180610154366004610353565b61ffff91909116600090815260086020908152604080832093835292905220546001600160a01b031690565b6040516001600160a01b03909116815260200161013d565b6101316101a636600461037d565b60009081526005602052604090205460ff1690565b6001546001600160a01b0316610180565b600c545b60405190815260200161013d565b600254640100000000900460ff1660405160ff909116815260200161013d565b6000546001600160a01b0316610180565b60025461ffff165b60405161ffff909116815260200161013d565b61013161023836600461037d565b60009081526006602052604090205460ff1690565b6004546001600160a01b0316610180565b6101d061026c366004610396565b61ffff166000908152600b602052604090205490565b6003546101d0565b6101d061029836600461030c565b6001600160a01b03166000908152600a602052604090205490565b6101316102c136600461030c565b6001600160a01b031660009081526007602052604090205460ff1690565b6101316102f9565b60025462010000900461ffff16610217565b600046610305600c5490565b1415905090565b60006020828403121561031e57600080fd5b81356001600160a01b038116811461033557600080fd5b9392505050565b803561ffff8116811461034e57600080fd5b919050565b6000806040838503121561036657600080fd5b61036f8361033c565b946020939093013593505050565b60006020828403121561038f57600080fd5b5035919050565b6000602082840312156103a857600080fd5b6103358261033c56fea2646970667358221220f3011a8fa4e714413c436a6f381744ff88b922315cfef779b9353503cb3da31364736f6c63430008110033";

type BridgeGettersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeGettersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeGetters__factory extends ContractFactory {
  constructor(...args: BridgeGettersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeGetters> {
    return super.deploy(overrides || {}) as Promise<BridgeGetters>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeGetters {
    return super.attach(address) as BridgeGetters;
  }
  override connect(signer: Signer): BridgeGetters__factory {
    return super.connect(signer) as BridgeGetters__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeGettersInterface {
    return new utils.Interface(_abi) as BridgeGettersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeGetters {
    return new Contract(address, _abi, signerOrProvider) as BridgeGetters;
  }
}
