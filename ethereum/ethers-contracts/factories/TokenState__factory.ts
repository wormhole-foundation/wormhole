/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { TokenState, TokenStateInterface } from "../TokenState";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060c98061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80637ecebe0014602d575b600080fd5b605360383660046065565b6001600160a01b03166000908152600e602052604090205490565b60405190815260200160405180910390f35b600060208284031215607657600080fd5b81356001600160a01b0381168114608c57600080fd5b939250505056fea264697066735822122077de82e2c9f062f329eefa41326293aafb793f728f7c215de586476fd3486dee64736f6c63430008110033";

type TokenStateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenStateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenState__factory extends ContractFactory {
  constructor(...args: TokenStateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenState> {
    return super.deploy(overrides || {}) as Promise<TokenState>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenState {
    return super.attach(address) as TokenState;
  }
  override connect(signer: Signer): TokenState__factory {
    return super.connect(signer) as TokenState__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenStateInterface {
    return new utils.Interface(_abi) as TokenStateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenState {
    return new Contract(address, _abi, signerOrProvider) as TokenState;
  }
}
