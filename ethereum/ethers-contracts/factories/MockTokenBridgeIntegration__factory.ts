/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  MockTokenBridgeIntegration,
  MockTokenBridgeIntegrationInterface,
} from "../MockTokenBridgeIntegration";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedVm",
        type: "bytes",
      },
    ],
    name: "completeTransferAndSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenBridge",
        type: "address",
      },
    ],
    name: "setup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ae1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301c3ac6b1461003b57806366d3820314610050575b600080fd5b61004e61004936600461086c565b610080565b005b61004e61005e366004610904565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061009a608483516100939190610937565b839061043d565b905060006100b6606484516100af9190610937565b84906104a1565b905060006100cc6000546001600160a01b031690565b604051630ff8f14360e11b815261ffff84166004820152602481018590526001600160a01b039190911690631ff1e28690604401602060405180830381865afa15801561011d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610141919061094a565b6040516370a0823160e01b815230600482015290915081906000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561018d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b19190610967565b905060006101c76000546001600160a01b031690565b6001600160a01b031663c3f511c1886040518263ffffffff1660e01b81526004016101f291906109d0565b6000604051808303816000875af1158015610211573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261023991908101906109e3565b9050600061024782826104fe565b90508060ff166003146102985760405162461bcd60e51b8152602060048201526014602482015273696e76616c6964207061796c6f6164207479706560601b60448201526064015b60405180910390fd5b60006102a583602161043d565b905080881461030f5760405162461bcd60e51b815260206004820152603060248201527f41646472657373207061727365642066726f6d2056414120616e64207061796c60448201526f0dec2c840c8de40dcdee840dac2e8c6d60831b606482015260840161028f565b600061031c8460416104a1565b90508061ffff168861ffff161461038e5760405162461bcd60e51b815260206004820152603060248201527f436861696e4964207061727365642066726f6d2056414120616e64207061796c60448201526f0dec2c840c8de40dcdee840dac2e8c6d60831b606482015260840161028f565b6040516370a0823160e01b81523060048201526000906001600160a01b038816906370a0823190602401602060405180830381865afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610967565b905060006104078783610937565b9050600061041687608561043d565b90508061042d6001600160a01b038b16828561055a565b5050505050505050505050505050565b600061044a826020610a5a565b835110156104925760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b604482015260640161028f565b50818101602001515b92915050565b60006104ae826002610a5a565b835110156104f55760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b604482015260640161028f565b50016002015190565b600061050b826001610a5a565b835110156105515760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b604482015260640161028f565b50016001015190565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105ac9084906105b1565b505050565b6000610606826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106839092919063ffffffff16565b8051909150156105ac57808060200190518101906106249190610a6d565b6105ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161028f565b6060610692848460008561069c565b90505b9392505050565b6060824710156106fd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161028f565b843b61074b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161028f565b600080866001600160a01b031685876040516107679190610a8f565b60006040518083038185875af1925050503d80600081146107a4576040519150601f19603f3d011682016040523d82523d6000602084013e6107a9565b606091505b50915091506107b98282866107c4565b979650505050505050565b606083156107d3575081610695565b8251156107e35782518084602001fd5b8160405162461bcd60e51b815260040161028f91906109d0565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561083c5761083c6107fd565b604052919050565b600067ffffffffffffffff82111561085e5761085e6107fd565b50601f01601f191660200190565b60006020828403121561087e57600080fd5b813567ffffffffffffffff81111561089557600080fd5b8201601f810184136108a657600080fd5b80356108b96108b482610844565b610813565b8181528560208385010111156108ce57600080fd5b81602084016020830137600091810160200191909152949350505050565b6001600160a01b038116811461090157600080fd5b50565b60006020828403121561091657600080fd5b8135610695816108ec565b634e487b7160e01b600052601160045260246000fd5b8181038181111561049b5761049b610921565b60006020828403121561095c57600080fd5b8151610695816108ec565b60006020828403121561097957600080fd5b5051919050565b60005b8381101561099b578181015183820152602001610983565b50506000910152565b600081518084526109bc816020860160208601610980565b601f01601f19169290920160200192915050565b60208152600061069560208301846109a4565b6000602082840312156109f557600080fd5b815167ffffffffffffffff811115610a0c57600080fd5b8201601f81018413610a1d57600080fd5b8051610a2b6108b482610844565b818152856020838501011115610a4057600080fd5b610a51826020830160208601610980565b95945050505050565b8082018082111561049b5761049b610921565b600060208284031215610a7f57600080fd5b8151801515811461069557600080fd5b60008251610aa1818460208701610980565b919091019291505056fea2646970667358221220879252c25120400b2e6bb202d5ce3ef1ad53b00c22ee1dec865c07c2ee75d8f764736f6c63430008110033";

type MockTokenBridgeIntegrationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenBridgeIntegrationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTokenBridgeIntegration__factory extends ContractFactory {
  constructor(...args: MockTokenBridgeIntegrationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockTokenBridgeIntegration> {
    return super.deploy(overrides || {}) as Promise<MockTokenBridgeIntegration>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockTokenBridgeIntegration {
    return super.attach(address) as MockTokenBridgeIntegration;
  }
  override connect(signer: Signer): MockTokenBridgeIntegration__factory {
    return super.connect(signer) as MockTokenBridgeIntegration__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenBridgeIntegrationInterface {
    return new utils.Interface(_abi) as MockTokenBridgeIntegrationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTokenBridgeIntegration {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockTokenBridgeIntegration;
  }
}
