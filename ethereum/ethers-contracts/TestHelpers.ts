/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TestHelpersInterface extends utils.Interface {
  functions: {
    "registerCoreRelayerContract(address,address,uint16,uint16,bytes32)": FunctionFragment;
    "setUpCoreRelayer(uint16,address,address)": FunctionFragment;
    "setUpRelayProvider(uint16)": FunctionFragment;
    "setUpWormhole(uint16)": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "registerCoreRelayerContract"
      | "setUpCoreRelayer"
      | "setUpRelayProvider"
      | "setUpWormhole"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "registerCoreRelayerContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpCoreRelayer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpRelayProvider",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpWormhole",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "registerCoreRelayerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpCoreRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpRelayProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpWormhole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {};
}

export interface TestHelpers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestHelpersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    registerCoreRelayerContract(
      governance: PromiseOrValue<string>,
      wormhole: PromiseOrValue<string>,
      currentChainId: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      coreRelayerContractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpCoreRelayer(
      chainId: PromiseOrValue<BigNumberish>,
      wormhole: PromiseOrValue<string>,
      defaultRelayProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpRelayProvider(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpWormhole(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  registerCoreRelayerContract(
    governance: PromiseOrValue<string>,
    wormhole: PromiseOrValue<string>,
    currentChainId: PromiseOrValue<BigNumberish>,
    chainId: PromiseOrValue<BigNumberish>,
    coreRelayerContractAddress: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpCoreRelayer(
    chainId: PromiseOrValue<BigNumberish>,
    wormhole: PromiseOrValue<string>,
    defaultRelayProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpRelayProvider(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpWormhole(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    registerCoreRelayerContract(
      governance: PromiseOrValue<string>,
      wormhole: PromiseOrValue<string>,
      currentChainId: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      coreRelayerContractAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpCoreRelayer(
      chainId: PromiseOrValue<BigNumberish>,
      wormhole: PromiseOrValue<string>,
      defaultRelayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setUpRelayProvider(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setUpWormhole(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { wormholeContract: string; wormholeSimulator: string }
    >;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    registerCoreRelayerContract(
      governance: PromiseOrValue<string>,
      wormhole: PromiseOrValue<string>,
      currentChainId: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      coreRelayerContractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpCoreRelayer(
      chainId: PromiseOrValue<BigNumberish>,
      wormhole: PromiseOrValue<string>,
      defaultRelayProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpRelayProvider(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpWormhole(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    registerCoreRelayerContract(
      governance: PromiseOrValue<string>,
      wormhole: PromiseOrValue<string>,
      currentChainId: PromiseOrValue<BigNumberish>,
      chainId: PromiseOrValue<BigNumberish>,
      coreRelayerContractAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpCoreRelayer(
      chainId: PromiseOrValue<BigNumberish>,
      wormhole: PromiseOrValue<string>,
      defaultRelayProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpRelayProvider(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpWormhole(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
