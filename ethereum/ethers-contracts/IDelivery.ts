/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IDelivery {
  export type TargetDeliveryParametersSingleStruct = {
    encodedVMs: PromiseOrValue<BytesLike>[];
    encodedDeliveryVAA: PromiseOrValue<BytesLike>;
    multisendIndex: PromiseOrValue<BigNumberish>;
    relayerRefundAddress: PromiseOrValue<string>;
  };

  export type TargetDeliveryParametersSingleStructOutput = [
    string[],
    string,
    number,
    string
  ] & {
    encodedVMs: string[];
    encodedDeliveryVAA: string;
    multisendIndex: number;
    relayerRefundAddress: string;
  };

  export type TargetRedeliveryByTxHashParamsSingleStruct = {
    redeliveryVM: PromiseOrValue<BytesLike>;
    sourceEncodedVMs: PromiseOrValue<BytesLike>[];
    originalEncodedDeliveryVAA: PromiseOrValue<BytesLike>;
    relayerRefundAddress: PromiseOrValue<string>;
  };

  export type TargetRedeliveryByTxHashParamsSingleStructOutput = [
    string,
    string[],
    string,
    string
  ] & {
    redeliveryVM: string;
    sourceEncodedVMs: string[];
    originalEncodedDeliveryVAA: string;
    relayerRefundAddress: string;
  };
}

export interface IDeliveryInterface extends utils.Interface {
  functions: {
    "deliverSingle((bytes[],bytes,uint8,address))": FunctionFragment;
    "redeliverSingle((bytes,bytes[],bytes,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "deliverSingle" | "redeliverSingle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deliverSingle",
    values: [IDelivery.TargetDeliveryParametersSingleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeliverSingle",
    values: [IDelivery.TargetRedeliveryByTxHashParamsSingleStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "deliverSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeliverSingle",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDelivery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDeliveryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deliverSingle(
      targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeliverSingle(
      targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deliverSingle(
    targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeliverSingle(
    targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deliverSingle(
      targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    redeliverSingle(
      targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deliverSingle(
      targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeliverSingle(
      targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deliverSingle(
      targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeliverSingle(
      targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
