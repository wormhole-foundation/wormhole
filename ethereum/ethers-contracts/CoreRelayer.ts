/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CoreRelayerStructs {
  export type ExecutionParametersStruct = {
    version: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    providerDeliveryAddress: PromiseOrValue<BytesLike>;
  };

  export type ExecutionParametersStructOutput = [number, number, string] & {
    version: number;
    gasLimit: number;
    providerDeliveryAddress: string;
  };

  export type DeliveryInstructionStruct = {
    targetChain: PromiseOrValue<BigNumberish>;
    targetAddress: PromiseOrValue<BytesLike>;
    refundAddress: PromiseOrValue<BytesLike>;
    maximumRefundTarget: PromiseOrValue<BigNumberish>;
    receiverValueTarget: PromiseOrValue<BigNumberish>;
    executionParameters: CoreRelayerStructs.ExecutionParametersStruct;
  };

  export type DeliveryInstructionStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    CoreRelayerStructs.ExecutionParametersStructOutput
  ] & {
    targetChain: number;
    targetAddress: string;
    refundAddress: string;
    maximumRefundTarget: BigNumber;
    receiverValueTarget: BigNumber;
    executionParameters: CoreRelayerStructs.ExecutionParametersStructOutput;
  };

  export type DeliveryInstructionsContainerStruct = {
    payloadId: PromiseOrValue<BigNumberish>;
    sufficientlyFunded: PromiseOrValue<boolean>;
    messages: IWormholeRelayer.MessageInfoStruct[];
    instructions: CoreRelayerStructs.DeliveryInstructionStruct[];
  };

  export type DeliveryInstructionsContainerStructOutput = [
    number,
    boolean,
    IWormholeRelayer.MessageInfoStructOutput[],
    CoreRelayerStructs.DeliveryInstructionStructOutput[]
  ] & {
    payloadId: number;
    sufficientlyFunded: boolean;
    messages: IWormholeRelayer.MessageInfoStructOutput[];
    instructions: CoreRelayerStructs.DeliveryInstructionStructOutput[];
  };

  export type RedeliveryByTxHashInstructionStruct = {
    payloadId: PromiseOrValue<BigNumberish>;
    sourceChain: PromiseOrValue<BigNumberish>;
    sourceTxHash: PromiseOrValue<BytesLike>;
    deliveryVAASequence: PromiseOrValue<BigNumberish>;
    targetChain: PromiseOrValue<BigNumberish>;
    multisendIndex: PromiseOrValue<BigNumberish>;
    newMaximumRefundTarget: PromiseOrValue<BigNumberish>;
    newReceiverValueTarget: PromiseOrValue<BigNumberish>;
    executionParameters: CoreRelayerStructs.ExecutionParametersStruct;
  };

  export type RedeliveryByTxHashInstructionStructOutput = [
    number,
    number,
    string,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    CoreRelayerStructs.ExecutionParametersStructOutput
  ] & {
    payloadId: number;
    sourceChain: number;
    sourceTxHash: string;
    deliveryVAASequence: BigNumber;
    targetChain: number;
    multisendIndex: number;
    newMaximumRefundTarget: BigNumber;
    newReceiverValueTarget: BigNumber;
    executionParameters: CoreRelayerStructs.ExecutionParametersStructOutput;
  };
}

export declare namespace IWormholeRelayer {
  export type MessageInfoStruct = {
    infoType: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
    vaaHash: PromiseOrValue<BytesLike>;
  };

  export type MessageInfoStructOutput = [number, string, BigNumber, string] & {
    infoType: number;
    emitterAddress: string;
    sequence: BigNumber;
    vaaHash: string;
  };

  export type SendStruct = {
    targetChain: PromiseOrValue<BigNumberish>;
    targetAddress: PromiseOrValue<BytesLike>;
    refundAddress: PromiseOrValue<BytesLike>;
    maxTransactionFee: PromiseOrValue<BigNumberish>;
    receiverValue: PromiseOrValue<BigNumberish>;
    relayParameters: PromiseOrValue<BytesLike>;
  };

  export type SendStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    targetChain: number;
    targetAddress: string;
    refundAddress: string;
    maxTransactionFee: BigNumber;
    receiverValue: BigNumber;
    relayParameters: string;
  };

  export type MultichainSendStruct = {
    relayProviderAddress: PromiseOrValue<string>;
    messages: IWormholeRelayer.MessageInfoStruct[];
    requests: IWormholeRelayer.SendStruct[];
  };

  export type MultichainSendStructOutput = [
    string,
    IWormholeRelayer.MessageInfoStructOutput[],
    IWormholeRelayer.SendStructOutput[]
  ] & {
    relayProviderAddress: string;
    messages: IWormholeRelayer.MessageInfoStructOutput[];
    requests: IWormholeRelayer.SendStructOutput[];
  };

  export type ResendByTxStruct = {
    sourceChain: PromiseOrValue<BigNumberish>;
    sourceTxHash: PromiseOrValue<BytesLike>;
    deliveryVAASequence: PromiseOrValue<BigNumberish>;
    targetChain: PromiseOrValue<BigNumberish>;
    multisendIndex: PromiseOrValue<BigNumberish>;
    newMaxTransactionFee: PromiseOrValue<BigNumberish>;
    newReceiverValue: PromiseOrValue<BigNumberish>;
    newRelayParameters: PromiseOrValue<BytesLike>;
  };

  export type ResendByTxStructOutput = [
    number,
    string,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    string
  ] & {
    sourceChain: number;
    sourceTxHash: string;
    deliveryVAASequence: BigNumber;
    targetChain: number;
    multisendIndex: number;
    newMaxTransactionFee: BigNumber;
    newReceiverValue: BigNumber;
    newRelayParameters: string;
  };
}

export declare namespace IDelivery {
  export type TargetDeliveryParametersSingleStruct = {
    encodedVMs: PromiseOrValue<BytesLike>[];
    encodedDeliveryVAA: PromiseOrValue<BytesLike>;
    multisendIndex: PromiseOrValue<BigNumberish>;
    relayerRefundAddress: PromiseOrValue<string>;
  };

  export type TargetDeliveryParametersSingleStructOutput = [
    string[],
    string,
    number,
    string
  ] & {
    encodedVMs: string[];
    encodedDeliveryVAA: string;
    multisendIndex: number;
    relayerRefundAddress: string;
  };

  export type TargetRedeliveryByTxHashParamsSingleStruct = {
    redeliveryVM: PromiseOrValue<BytesLike>;
    sourceEncodedVMs: PromiseOrValue<BytesLike>[];
    originalEncodedDeliveryVAA: PromiseOrValue<BytesLike>;
    relayerRefundAddress: PromiseOrValue<string>;
  };

  export type TargetRedeliveryByTxHashParamsSingleStructOutput = [
    string,
    string[],
    string,
    string
  ] & {
    redeliveryVM: string;
    sourceEncodedVMs: string[];
    originalEncodedDeliveryVAA: string;
    relayerRefundAddress: string;
  };
}

export interface CoreRelayerInterface extends utils.Interface {
  functions: {
    "chainId()": FunctionFragment;
    "decodeDeliveryInstruction(bytes,uint256)": FunctionFragment;
    "decodeDeliveryInstructionsContainer(bytes)": FunctionFragment;
    "decodeMessageInfo(bytes,uint256)": FunctionFragment;
    "decodeRedeliveryInstruction(bytes)": FunctionFragment;
    "deliverSingle((bytes[],bytes,uint8,address))": FunctionFragment;
    "evmChainId()": FunctionFragment;
    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])": FunctionFragment;
    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)": FunctionFragment;
    "fromWormholeFormat(bytes32)": FunctionFragment;
    "getDefaultRelayParams()": FunctionFragment;
    "getDefaultRelayProvider()": FunctionFragment;
    "governanceActionIsConsumed(bytes32)": FunctionFragment;
    "governanceChainId()": FunctionFragment;
    "governanceContract()": FunctionFragment;
    "isFork()": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "multichainForward((address,(uint8,bytes32,uint64,bytes32)[],(uint16,bytes32,bytes32,uint256,uint256,bytes)[]))": FunctionFragment;
    "multichainSend((address,(uint8,bytes32,uint64,bytes32)[],(uint16,bytes32,bytes32,uint256,uint256,bytes)[]))": FunctionFragment;
    "quoteGas(uint16,uint32,address)": FunctionFragment;
    "quoteGasResend(uint16,uint32,address)": FunctionFragment;
    "quoteReceiverValue(uint16,uint256,address)": FunctionFragment;
    "redeliverSingle((bytes,bytes[],bytes,address))": FunctionFragment;
    "registerCoreRelayerContract(bytes)": FunctionFragment;
    "registeredCoreRelayerContract(uint16)": FunctionFragment;
    "resend((uint16,bytes32,uint64,uint16,uint8,uint256,uint256,bytes),address)": FunctionFragment;
    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])": FunctionFragment;
    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)": FunctionFragment;
    "setDefaultRelayProvider(bytes)": FunctionFragment;
    "submitContractUpgrade(bytes)": FunctionFragment;
    "toWormholeFormat(address)": FunctionFragment;
    "wormhole()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chainId"
      | "decodeDeliveryInstruction"
      | "decodeDeliveryInstructionsContainer"
      | "decodeMessageInfo"
      | "decodeRedeliveryInstruction"
      | "deliverSingle"
      | "evmChainId"
      | "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"
      | "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"
      | "fromWormholeFormat"
      | "getDefaultRelayParams"
      | "getDefaultRelayProvider"
      | "governanceActionIsConsumed"
      | "governanceChainId"
      | "governanceContract"
      | "isFork"
      | "isInitialized"
      | "multichainForward"
      | "multichainSend"
      | "quoteGas"
      | "quoteGasResend"
      | "quoteReceiverValue"
      | "redeliverSingle"
      | "registerCoreRelayerContract"
      | "registeredCoreRelayerContract"
      | "resend"
      | "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"
      | "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"
      | "setDefaultRelayProvider"
      | "submitContractUpgrade"
      | "toWormholeFormat"
      | "wormhole"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decodeDeliveryInstruction",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeDeliveryInstructionsContainer",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeMessageInfo",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeRedeliveryInstruction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deliverSingle",
    values: [IDelivery.TargetDeliveryParametersSingleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "evmChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IWormholeRelayer.MessageInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)",
    values: [
      IWormholeRelayer.SendStruct,
      IWormholeRelayer.MessageInfoStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fromWormholeFormat",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRelayParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRelayProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceActionIsConsumed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multichainForward",
    values: [IWormholeRelayer.MultichainSendStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multichainSend",
    values: [IWormholeRelayer.MultichainSendStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteGas",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteGasResend",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteReceiverValue",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeliverSingle",
    values: [IDelivery.TargetRedeliveryByTxHashParamsSingleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCoreRelayerContract",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredCoreRelayerContract",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resend",
    values: [IWormholeRelayer.ResendByTxStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IWormholeRelayer.MessageInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)",
    values: [
      IWormholeRelayer.SendStruct,
      IWormholeRelayer.MessageInfoStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultRelayProvider",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitContractUpgrade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "toWormholeFormat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;

  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeDeliveryInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeDeliveryInstructionsContainer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeMessageInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeRedeliveryInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliverSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evmChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromWormholeFormat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRelayParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRelayProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceActionIsConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multichainForward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multichainSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteGasResend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteReceiverValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeliverSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCoreRelayerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredCoreRelayerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultRelayProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toWormholeFormat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ContractUpgraded(address,address)": EventFragment;
    "Delivery(address,uint16,uint64,bytes32,uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Delivery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ContractUpgradedEventObject {
  oldContract: string;
  newContract: string;
}
export type ContractUpgradedEvent = TypedEvent<
  [string, string],
  ContractUpgradedEventObject
>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export interface DeliveryEventObject {
  recipientContract: string;
  sourceChain: number;
  sequence: BigNumber;
  deliveryVaaHash: string;
  status: number;
}
export type DeliveryEvent = TypedEvent<
  [string, number, BigNumber, string, number],
  DeliveryEventObject
>;

export type DeliveryEventFilter = TypedEventFilter<DeliveryEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface CoreRelayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreRelayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainId(overrides?: CallOverrides): Promise<[number]>;

    decodeDeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [CoreRelayerStructs.DeliveryInstructionStructOutput, BigNumber] & {
        instruction: CoreRelayerStructs.DeliveryInstructionStructOutput;
        newIndex: BigNumber;
      }
    >;

    decodeDeliveryInstructionsContainer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[CoreRelayerStructs.DeliveryInstructionsContainerStructOutput]>;

    decodeMessageInfo(
      encoded: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IWormholeRelayer.MessageInfoStructOutput, BigNumber] & {
        messageInfo: IWormholeRelayer.MessageInfoStructOutput;
        newIndex: BigNumber;
      }
    >;

    decodeRedeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [CoreRelayerStructs.RedeliveryByTxHashInstructionStructOutput] & {
        instruction: CoreRelayerStructs.RedeliveryByTxHashInstructionStructOutput;
      }
    >;

    deliverSingle(
      targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    getDefaultRelayParams(
      overrides?: CallOverrides
    ): Promise<[string] & { relayParams: string }>;

    getDefaultRelayProvider(
      overrides?: CallOverrides
    ): Promise<[string] & { relayProvider: string }>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governanceChainId(overrides?: CallOverrides): Promise<[number]>;

    governanceContract(overrides?: CallOverrides): Promise<[string]>;

    isFork(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multichainForward(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multichainSend(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoteGas(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxTransactionFee: BigNumber }>;

    quoteGasResend(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxTransactionFee: BigNumber }>;

    quoteReceiverValue(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { receiverValue: BigNumber }>;

    redeliverSingle(
      targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerCoreRelayerContract(
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredCoreRelayerContract(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    resend(
      request: IWormholeRelayer.ResendByTxStruct,
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultRelayProvider(
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitContractUpgrade(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { whFormat: string }>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;
  };

  chainId(overrides?: CallOverrides): Promise<number>;

  decodeDeliveryInstruction(
    encoded: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [CoreRelayerStructs.DeliveryInstructionStructOutput, BigNumber] & {
      instruction: CoreRelayerStructs.DeliveryInstructionStructOutput;
      newIndex: BigNumber;
    }
  >;

  decodeDeliveryInstructionsContainer(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CoreRelayerStructs.DeliveryInstructionsContainerStructOutput>;

  decodeMessageInfo(
    encoded: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [IWormholeRelayer.MessageInfoStructOutput, BigNumber] & {
      messageInfo: IWormholeRelayer.MessageInfoStructOutput;
      newIndex: BigNumber;
    }
  >;

  decodeRedeliveryInstruction(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CoreRelayerStructs.RedeliveryByTxHashInstructionStructOutput>;

  deliverSingle(
    targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

  "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
    targetChain: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<BytesLike>,
    maxTransactionFee: PromiseOrValue<BigNumberish>,
    receiverValue: PromiseOrValue<BigNumberish>,
    messages: IWormholeRelayer.MessageInfoStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
    request: IWormholeRelayer.SendStruct,
    messages: IWormholeRelayer.MessageInfoStruct[],
    relayProvider: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fromWormholeFormat(
    whFormatAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDefaultRelayParams(overrides?: CallOverrides): Promise<string>;

  getDefaultRelayProvider(overrides?: CallOverrides): Promise<string>;

  governanceActionIsConsumed(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governanceChainId(overrides?: CallOverrides): Promise<number>;

  governanceContract(overrides?: CallOverrides): Promise<string>;

  isFork(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(
    impl: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multichainForward(
    sendContainer: IWormholeRelayer.MultichainSendStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multichainSend(
    sendContainer: IWormholeRelayer.MultichainSendStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoteGas(
    targetChain: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    relayProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteGasResend(
    targetChain: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    relayProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteReceiverValue(
    targetChain: PromiseOrValue<BigNumberish>,
    targetAmount: PromiseOrValue<BigNumberish>,
    relayProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeliverSingle(
    targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerCoreRelayerContract(
    vaa: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredCoreRelayerContract(
    chain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  resend(
    request: IWormholeRelayer.ResendByTxStruct,
    relayProvider: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
    targetChain: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<BytesLike>,
    maxTransactionFee: PromiseOrValue<BigNumberish>,
    receiverValue: PromiseOrValue<BigNumberish>,
    messages: IWormholeRelayer.MessageInfoStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
    request: IWormholeRelayer.SendStruct,
    messages: IWormholeRelayer.MessageInfoStruct[],
    relayProvider: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultRelayProvider(
    vaa: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitContractUpgrade(
    _vm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toWormholeFormat(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    chainId(overrides?: CallOverrides): Promise<number>;

    decodeDeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [CoreRelayerStructs.DeliveryInstructionStructOutput, BigNumber] & {
        instruction: CoreRelayerStructs.DeliveryInstructionStructOutput;
        newIndex: BigNumber;
      }
    >;

    decodeDeliveryInstructionsContainer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CoreRelayerStructs.DeliveryInstructionsContainerStructOutput>;

    decodeMessageInfo(
      encoded: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IWormholeRelayer.MessageInfoStructOutput, BigNumber] & {
        messageInfo: IWormholeRelayer.MessageInfoStructOutput;
        newIndex: BigNumber;
      }
    >;

    decodeRedeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CoreRelayerStructs.RedeliveryByTxHashInstructionStructOutput>;

    deliverSingle(
      targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDefaultRelayParams(overrides?: CallOverrides): Promise<string>;

    getDefaultRelayProvider(overrides?: CallOverrides): Promise<string>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governanceChainId(overrides?: CallOverrides): Promise<number>;

    governanceContract(overrides?: CallOverrides): Promise<string>;

    isFork(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multichainForward(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    multichainSend(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGas(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGasResend(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteReceiverValue(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeliverSingle(
      targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    registerCoreRelayerContract(
      vaa: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredCoreRelayerContract(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    resend(
      request: IWormholeRelayer.ResendByTxStruct,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultRelayProvider(
      vaa: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitContractUpgrade(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    wormhole(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ContractUpgraded(address,address)"(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;
    ContractUpgraded(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;

    "Delivery(address,uint16,uint64,bytes32,uint8)"(
      recipientContract?: PromiseOrValue<string> | null,
      sourceChain?: PromiseOrValue<BigNumberish> | null,
      sequence?: PromiseOrValue<BigNumberish> | null,
      deliveryVaaHash?: null,
      status?: null
    ): DeliveryEventFilter;
    Delivery(
      recipientContract?: PromiseOrValue<string> | null,
      sourceChain?: PromiseOrValue<BigNumberish> | null,
      sequence?: PromiseOrValue<BigNumberish> | null,
      deliveryVaaHash?: null,
      status?: null
    ): DeliveryEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    decodeDeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeDeliveryInstructionsContainer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeMessageInfo(
      encoded: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeRedeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deliverSingle(
      targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultRelayParams(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultRelayProvider(overrides?: CallOverrides): Promise<BigNumber>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceContract(overrides?: CallOverrides): Promise<BigNumber>;

    isFork(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multichainForward(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multichainSend(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoteGas(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGasResend(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteReceiverValue(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeliverSingle(
      targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerCoreRelayerContract(
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredCoreRelayerContract(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resend(
      request: IWormholeRelayer.ResendByTxStruct,
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultRelayProvider(
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitContractUpgrade(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeDeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeDeliveryInstructionsContainer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeMessageInfo(
      encoded: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeRedeliveryInstruction(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deliverSingle(
      targetParams: IDelivery.TargetDeliveryParametersSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultRelayParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultRelayProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multichainForward(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multichainSend(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoteGas(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteGasResend(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteReceiverValue(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeliverSingle(
      targetParams: IDelivery.TargetRedeliveryByTxHashParamsSingleStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerCoreRelayerContract(
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredCoreRelayerContract(
      chain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resend(
      request: IWormholeRelayer.ResendByTxStruct,
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultRelayProvider(
      vaa: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitContractUpgrade(
      _vm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
