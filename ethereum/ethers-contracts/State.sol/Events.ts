/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EventsInterface extends utils.Interface {
  functions: {};

  events: {
    "LogGuardianSetChanged(uint32,uint32)": EventFragment;
    "LogMessagePublished(address,uint32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogGuardianSetChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMessagePublished"): EventFragment;
}

export interface LogGuardianSetChangedEventObject {
  oldGuardianIndex: number;
  newGuardianIndex: number;
}
export type LogGuardianSetChangedEvent = TypedEvent<
  [number, number],
  LogGuardianSetChangedEventObject
>;

export type LogGuardianSetChangedEventFilter =
  TypedEventFilter<LogGuardianSetChangedEvent>;

export interface LogMessagePublishedEventObject {
  emitter_address: string;
  nonce: number;
  payload: string;
}
export type LogMessagePublishedEvent = TypedEvent<
  [string, number, string],
  LogMessagePublishedEventObject
>;

export type LogMessagePublishedEventFilter =
  TypedEventFilter<LogMessagePublishedEvent>;

export interface Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "LogGuardianSetChanged(uint32,uint32)"(
      oldGuardianIndex?: null,
      newGuardianIndex?: null
    ): LogGuardianSetChangedEventFilter;
    LogGuardianSetChanged(
      oldGuardianIndex?: null,
      newGuardianIndex?: null
    ): LogGuardianSetChangedEventFilter;

    "LogMessagePublished(address,uint32,bytes)"(
      emitter_address?: null,
      nonce?: null,
      payload?: null
    ): LogMessagePublishedEventFilter;
    LogMessagePublished(
      emitter_address?: null,
      nonce?: null,
      payload?: null
    ): LogMessagePublishedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
