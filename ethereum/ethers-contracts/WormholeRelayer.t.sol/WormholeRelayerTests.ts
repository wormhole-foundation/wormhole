/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace WormholeRelayerTests {
  export type GasParametersStruct = {
    evmGasOverhead: PromiseOrValue<BigNumberish>;
    targetGasLimit: PromiseOrValue<BigNumberish>;
    targetGasPrice: PromiseOrValue<BigNumberish>;
    sourceGasPrice: PromiseOrValue<BigNumberish>;
  };

  export type GasParametersStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    evmGasOverhead: number;
    targetGasLimit: number;
    targetGasPrice: BigNumber;
    sourceGasPrice: BigNumber;
  };

  export type FeeParametersStruct = {
    targetNativePrice: PromiseOrValue<BigNumberish>;
    sourceNativePrice: PromiseOrValue<BigNumberish>;
    wormholeFeeOnSource: PromiseOrValue<BigNumberish>;
    wormholeFeeOnTarget: PromiseOrValue<BigNumberish>;
    receiverValueTarget: PromiseOrValue<BigNumberish>;
  };

  export type FeeParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    targetNativePrice: BigNumber;
    sourceNativePrice: BigNumber;
    wormholeFeeOnSource: BigNumber;
    wormholeFeeOnTarget: BigNumber;
    receiverValueTarget: BigNumber;
  };

  export type ContractsStruct = {
    wormhole: PromiseOrValue<string>;
    wormholeSimulator: PromiseOrValue<string>;
    relayProvider: PromiseOrValue<string>;
    coreRelayer: PromiseOrValue<string>;
    coreRelayerFull: PromiseOrValue<string>;
    integration: PromiseOrValue<string>;
    relayer: PromiseOrValue<string>;
    rewardAddress: PromiseOrValue<string>;
    refundAddress: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
  };

  export type ContractsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    number
  ] & {
    wormhole: string;
    wormholeSimulator: string;
    relayProvider: string;
    coreRelayer: string;
    coreRelayerFull: string;
    integration: string;
    relayer: string;
    rewardAddress: string;
    refundAddress: string;
    chainId: number;
  };

  export type StandardSetupTwoChainsStruct = {
    sourceChainId: PromiseOrValue<BigNumberish>;
    targetChainId: PromiseOrValue<BigNumberish>;
    differentChainId: PromiseOrValue<BigNumberish>;
    source: WormholeRelayerTests.ContractsStruct;
    target: WormholeRelayerTests.ContractsStruct;
  };

  export type StandardSetupTwoChainsStructOutput = [
    number,
    number,
    number,
    WormholeRelayerTests.ContractsStructOutput,
    WormholeRelayerTests.ContractsStructOutput
  ] & {
    sourceChainId: number;
    targetChainId: number;
    differentChainId: number;
    source: WormholeRelayerTests.ContractsStructOutput;
    target: WormholeRelayerTests.ContractsStructOutput;
  };
}

export interface WormholeRelayerTestsInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "IS_TEST()": FunctionFragment;
    "failed()": FunctionFragment;
    "setUp()": FunctionFragment;
    "standardAssumeAndSetupTwoChains((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),uint32)": FunctionFragment;
    "testAttackForwardRequestCache((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testEmitInvalidRedeliveryOriginalTargetChainIsThisChain((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testForward((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testForwardRequestFail((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testForwardTester((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testFundsCorrectForASend((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testFundsCorrectForASendIfReceiveWormholeMessagesReverts((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testQuoteReceiverValueIsEnough((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testQuoteReceiverValueIsNotMoreThanNecessary((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testResend((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertDeliveryInsufficientRelayerFunds((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertDeliveryInvalidDeliveryVAA((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertDeliveryInvalidEmitter((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertDeliveryReentrantCall((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testRevertDeliverySendNotSufficientlyFunded((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertDeliveryTargetChainIsNotThisChain((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertDeliveryUnexpectedRelayer((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertForwardForwardRequestFromWrongAddress((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testRevertForwardFundsTooMuch((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testRevertForwardMaxTransactionFeeNotEnough((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testRevertForwardMultichainSendEmpty((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testRevertForwardMultipleForwardsRequested((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testRevertForwardNoDeliveryInProgress((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testRevertMultichainSendEmpty((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256))": FunctionFragment;
    "testRevertRedeliveryInsufficientRelayerFunds((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertRedeliveryInvalidEmitterInRedeliveryVM((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertRedeliveryInvalidOriginalDeliveryVaa((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertRedeliveryInvalidRedeliveryVaa((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertRedeliveryTargetChainIsNotThisChain((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertRedeliveryUnexpectedRelayer((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertResendFundsTooMuch((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertResendMaxTransactionFeeNotEnough((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertResendMsgValueTooLow((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertSendFundsTooMuch((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertSendMaxTransactionFeeNotEnough((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertSendMsgValueTooLow((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testRevertTargetNotSupported((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testSend((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes)": FunctionFragment;
    "testToAndFromWormholeFormat(bytes32,address)": FunctionFragment;
    "testTwoSends((uint32,uint32,uint128,uint128),(uint128,uint128,uint128,uint128,uint256),bytes,bytes)": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "IS_TEST"
      | "failed"
      | "setUp"
      | "standardAssumeAndSetupTwoChains"
      | "testAttackForwardRequestCache"
      | "testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal"
      | "testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer"
      | "testEmitInvalidRedeliveryOriginalTargetChainIsThisChain"
      | "testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal"
      | "testForward"
      | "testForwardRequestFail"
      | "testForwardTester"
      | "testFundsCorrectForASend"
      | "testFundsCorrectForASendIfReceiveWormholeMessagesReverts"
      | "testQuoteReceiverValueIsEnough"
      | "testQuoteReceiverValueIsNotMoreThanNecessary"
      | "testResend"
      | "testRevertDeliveryInsufficientRelayerFunds"
      | "testRevertDeliveryInvalidDeliveryVAA"
      | "testRevertDeliveryInvalidEmitter"
      | "testRevertDeliveryReentrantCall"
      | "testRevertDeliverySendNotSufficientlyFunded"
      | "testRevertDeliveryTargetChainIsNotThisChain"
      | "testRevertDeliveryUnexpectedRelayer"
      | "testRevertForwardForwardRequestFromWrongAddress"
      | "testRevertForwardFundsTooMuch"
      | "testRevertForwardMaxTransactionFeeNotEnough"
      | "testRevertForwardMultichainSendEmpty"
      | "testRevertForwardMultipleForwardsRequested"
      | "testRevertForwardNoDeliveryInProgress"
      | "testRevertMultichainSendEmpty"
      | "testRevertRedeliveryInsufficientRelayerFunds"
      | "testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa"
      | "testRevertRedeliveryInvalidEmitterInRedeliveryVM"
      | "testRevertRedeliveryInvalidOriginalDeliveryVaa"
      | "testRevertRedeliveryInvalidRedeliveryVaa"
      | "testRevertRedeliveryTargetChainIsNotThisChain"
      | "testRevertRedeliveryUnexpectedRelayer"
      | "testRevertResendFundsTooMuch"
      | "testRevertResendMaxTransactionFeeNotEnough"
      | "testRevertResendMsgValueTooLow"
      | "testRevertSendFundsTooMuch"
      | "testRevertSendMaxTransactionFeeNotEnough"
      | "testRevertSendMsgValueTooLow"
      | "testRevertTargetNotSupported"
      | "testSend"
      | "testToAndFromWormholeFormat"
      | "testTwoSends"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "standardAssumeAndSetupTwoChains",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testAttackForwardRequestCache",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testEmitInvalidRedeliveryOriginalTargetChainIsThisChain",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testForward",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testForwardRequestFail",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testForwardTester",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testFundsCorrectForASend",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testFundsCorrectForASendIfReceiveWormholeMessagesReverts",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testQuoteReceiverValueIsEnough",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testQuoteReceiverValueIsNotMoreThanNecessary",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testResend",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertDeliveryInsufficientRelayerFunds",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertDeliveryInvalidDeliveryVAA",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertDeliveryInvalidEmitter",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertDeliveryReentrantCall",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertDeliverySendNotSufficientlyFunded",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertDeliveryTargetChainIsNotThisChain",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertDeliveryUnexpectedRelayer",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertForwardForwardRequestFromWrongAddress",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertForwardFundsTooMuch",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertForwardMaxTransactionFeeNotEnough",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertForwardMultichainSendEmpty",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertForwardMultipleForwardsRequested",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertForwardNoDeliveryInProgress",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertMultichainSendEmpty",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertRedeliveryInsufficientRelayerFunds",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertRedeliveryInvalidEmitterInRedeliveryVM",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertRedeliveryInvalidOriginalDeliveryVaa",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertRedeliveryInvalidRedeliveryVaa",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertRedeliveryTargetChainIsNotThisChain",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertRedeliveryUnexpectedRelayer",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertResendFundsTooMuch",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertResendMaxTransactionFeeNotEnough",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertResendMsgValueTooLow",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertSendFundsTooMuch",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertSendMaxTransactionFeeNotEnough",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertSendMsgValueTooLow",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevertTargetNotSupported",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testSend",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testToAndFromWormholeFormat",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "testTwoSends",
    values: [
      WormholeRelayerTests.GasParametersStruct,
      WormholeRelayerTests.FeeParametersStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "standardAssumeAndSetupTwoChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAttackForwardRequestCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEmitInvalidRedeliveryOriginalTargetChainIsThisChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testForward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testForwardRequestFail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testForwardTester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFundsCorrectForASend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFundsCorrectForASendIfReceiveWormholeMessagesReverts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testQuoteReceiverValueIsEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testQuoteReceiverValueIsNotMoreThanNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testResend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testRevertDeliveryInsufficientRelayerFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertDeliveryInvalidDeliveryVAA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertDeliveryInvalidEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertDeliveryReentrantCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertDeliverySendNotSufficientlyFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertDeliveryTargetChainIsNotThisChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertDeliveryUnexpectedRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertForwardForwardRequestFromWrongAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertForwardFundsTooMuch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertForwardMaxTransactionFeeNotEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertForwardMultichainSendEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertForwardMultipleForwardsRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertForwardNoDeliveryInProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertMultichainSendEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertRedeliveryInsufficientRelayerFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertRedeliveryInvalidEmitterInRedeliveryVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertRedeliveryInvalidOriginalDeliveryVaa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertRedeliveryInvalidRedeliveryVaa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertRedeliveryTargetChainIsNotThisChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertRedeliveryUnexpectedRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertResendFundsTooMuch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertResendMaxTransactionFeeNotEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertResendMsgValueTooLow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertSendFundsTooMuch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertSendMaxTransactionFeeNotEnough",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertSendMsgValueTooLow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRevertTargetNotSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testToAndFromWormholeFormat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTwoSends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {
    "Delivery(address,uint16,uint64,bytes32,uint8)": EventFragment;
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_array(uint256[])": EventFragment;
    "log_array(int256[])": EventFragment;
    "log_array(address[])": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_array(string,uint256[])": EventFragment;
    "log_named_array(string,int256[])": EventFragment;
    "log_named_array(string,address[])": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delivery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(uint256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(int256[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_array(address[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,uint256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,int256[])"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "log_named_array(string,address[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface DeliveryEventObject {
  recipientContract: string;
  sourceChain: number;
  sequence: BigNumber;
  deliveryVaaHash: string;
  status: number;
}
export type DeliveryEvent = TypedEvent<
  [string, number, BigNumber, string, number],
  DeliveryEventObject
>;

export type DeliveryEventFilter = TypedEventFilter<DeliveryEvent>;

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_array_uint256_array_EventObject {
  val: BigNumber[];
}
export type log_array_uint256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_uint256_array_EventObject
>;

export type log_array_uint256_array_EventFilter =
  TypedEventFilter<log_array_uint256_array_Event>;

export interface log_array_int256_array_EventObject {
  val: BigNumber[];
}
export type log_array_int256_array_Event = TypedEvent<
  [BigNumber[]],
  log_array_int256_array_EventObject
>;

export type log_array_int256_array_EventFilter =
  TypedEventFilter<log_array_int256_array_Event>;

export interface log_array_address_array_EventObject {
  val: string[];
}
export type log_array_address_array_Event = TypedEvent<
  [string[]],
  log_array_address_array_EventObject
>;

export type log_array_address_array_EventFilter =
  TypedEventFilter<log_array_address_array_Event>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_array_string_uint256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_uint256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_uint256_array_EventObject
>;

export type log_named_array_string_uint256_array_EventFilter =
  TypedEventFilter<log_named_array_string_uint256_array_Event>;

export interface log_named_array_string_int256_array_EventObject {
  key: string;
  val: BigNumber[];
}
export type log_named_array_string_int256_array_Event = TypedEvent<
  [string, BigNumber[]],
  log_named_array_string_int256_array_EventObject
>;

export type log_named_array_string_int256_array_EventFilter =
  TypedEventFilter<log_named_array_string_int256_array_Event>;

export interface log_named_array_string_address_array_EventObject {
  key: string;
  val: string[];
}
export type log_named_array_string_address_array_Event = TypedEvent<
  [string, string[]],
  log_named_array_string_address_array_EventObject
>;

export type log_named_array_string_address_array_EventFilter =
  TypedEventFilter<log_named_array_string_address_array_Event>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface WormholeRelayerTests extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WormholeRelayerTestsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    standardAssumeAndSetupTwoChains(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      minTargetGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testAttackForwardRequestCache(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testEmitInvalidRedeliveryOriginalTargetChainIsThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testForward(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testForwardRequestFail(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testForwardTester(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFundsCorrectForASend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testFundsCorrectForASendIfReceiveWormholeMessagesReverts(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testQuoteReceiverValueIsEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testQuoteReceiverValueIsNotMoreThanNecessary(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testResend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertDeliveryInsufficientRelayerFunds(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertDeliveryInvalidDeliveryVAA(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertDeliveryInvalidEmitter(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertDeliveryReentrantCall(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertDeliverySendNotSufficientlyFunded(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertDeliveryTargetChainIsNotThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertDeliveryUnexpectedRelayer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertForwardForwardRequestFromWrongAddress(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertForwardFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertForwardMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertForwardMultichainSendEmpty(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertForwardMultipleForwardsRequested(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertForwardNoDeliveryInProgress(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertMultichainSendEmpty(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertRedeliveryInsufficientRelayerFunds(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertRedeliveryInvalidEmitterInRedeliveryVM(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertRedeliveryInvalidOriginalDeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertRedeliveryInvalidRedeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertRedeliveryTargetChainIsNotThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertRedeliveryUnexpectedRelayer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertResendFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertResendMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertResendMsgValueTooLow(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertSendFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertSendMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertSendMsgValueTooLow(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testRevertTargetNotSupported(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testSend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testToAndFromWormholeFormat(
      msg2: PromiseOrValue<BytesLike>,
      msg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testTwoSends(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      secondMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  failed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  standardAssumeAndSetupTwoChains(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    minTargetGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testAttackForwardRequestCache(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testEmitInvalidRedeliveryOriginalTargetChainIsThisChain(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testForward(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testForwardRequestFail(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testForwardTester(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFundsCorrectForASend(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testFundsCorrectForASendIfReceiveWormholeMessagesReverts(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testQuoteReceiverValueIsEnough(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testQuoteReceiverValueIsNotMoreThanNecessary(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testResend(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertDeliveryInsufficientRelayerFunds(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertDeliveryInvalidDeliveryVAA(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertDeliveryInvalidEmitter(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertDeliveryReentrantCall(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertDeliverySendNotSufficientlyFunded(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertDeliveryTargetChainIsNotThisChain(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertDeliveryUnexpectedRelayer(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertForwardForwardRequestFromWrongAddress(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertForwardFundsTooMuch(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertForwardMaxTransactionFeeNotEnough(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertForwardMultichainSendEmpty(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertForwardMultipleForwardsRequested(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertForwardNoDeliveryInProgress(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertMultichainSendEmpty(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertRedeliveryInsufficientRelayerFunds(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertRedeliveryInvalidEmitterInRedeliveryVM(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertRedeliveryInvalidOriginalDeliveryVaa(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertRedeliveryInvalidRedeliveryVaa(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertRedeliveryTargetChainIsNotThisChain(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertRedeliveryUnexpectedRelayer(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertResendFundsTooMuch(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertResendMaxTransactionFeeNotEnough(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertResendMsgValueTooLow(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertSendFundsTooMuch(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertSendMaxTransactionFeeNotEnough(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertSendMsgValueTooLow(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testRevertTargetNotSupported(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testSend(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testToAndFromWormholeFormat(
    msg2: PromiseOrValue<BytesLike>,
    msg1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testTwoSends(
    gasParams: WormholeRelayerTests.GasParametersStruct,
    feeParams: WormholeRelayerTests.FeeParametersStruct,
    message: PromiseOrValue<BytesLike>,
    secondMessage: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    setUp(overrides?: CallOverrides): Promise<void>;

    standardAssumeAndSetupTwoChains(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      minTargetGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WormholeRelayerTests.StandardSetupTwoChainsStructOutput>;

    testAttackForwardRequestCache(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testEmitInvalidRedeliveryOriginalTargetChainIsThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testForward(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testForwardRequestFail(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testForwardTester(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testFundsCorrectForASend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testFundsCorrectForASendIfReceiveWormholeMessagesReverts(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testQuoteReceiverValueIsEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testQuoteReceiverValueIsNotMoreThanNecessary(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testResend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertDeliveryInsufficientRelayerFunds(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertDeliveryInvalidDeliveryVAA(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertDeliveryInvalidEmitter(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertDeliveryReentrantCall(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertDeliverySendNotSufficientlyFunded(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertDeliveryTargetChainIsNotThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertDeliveryUnexpectedRelayer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertForwardForwardRequestFromWrongAddress(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertForwardFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertForwardMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertForwardMultichainSendEmpty(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertForwardMultipleForwardsRequested(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertForwardNoDeliveryInProgress(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertMultichainSendEmpty(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertRedeliveryInsufficientRelayerFunds(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertRedeliveryInvalidEmitterInRedeliveryVM(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertRedeliveryInvalidOriginalDeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertRedeliveryInvalidRedeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertRedeliveryTargetChainIsNotThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertRedeliveryUnexpectedRelayer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertResendFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertResendMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertResendMsgValueTooLow(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertSendFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertSendMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertSendMsgValueTooLow(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testRevertTargetNotSupported(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testSend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testToAndFromWormholeFormat(
      msg2: PromiseOrValue<BytesLike>,
      msg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    testTwoSends(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      secondMessage: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Delivery(address,uint16,uint64,bytes32,uint8)"(
      recipientContract?: PromiseOrValue<string> | null,
      sourceChain?: PromiseOrValue<BigNumberish> | null,
      sequence?: PromiseOrValue<BigNumberish> | null,
      deliveryVaaHash?: null,
      status?: null
    ): DeliveryEventFilter;
    Delivery(
      recipientContract?: PromiseOrValue<string> | null,
      sourceChain?: PromiseOrValue<BigNumberish> | null,
      sequence?: PromiseOrValue<BigNumberish> | null,
      deliveryVaaHash?: null,
      status?: null
    ): DeliveryEventFilter;

    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_array(uint256[])"(val?: null): log_array_uint256_array_EventFilter;
    "log_array(int256[])"(val?: null): log_array_int256_array_EventFilter;
    "log_array(address[])"(val?: null): log_array_address_array_EventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_array(string,uint256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_uint256_array_EventFilter;
    "log_named_array(string,int256[])"(
      key?: null,
      val?: null
    ): log_named_array_string_int256_array_EventFilter;
    "log_named_array(string,address[])"(
      key?: null,
      val?: null
    ): log_named_array_string_address_array_EventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    standardAssumeAndSetupTwoChains(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      minTargetGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testAttackForwardRequestCache(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testEmitInvalidRedeliveryOriginalTargetChainIsThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testForward(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testForwardRequestFail(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testForwardTester(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFundsCorrectForASend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testFundsCorrectForASendIfReceiveWormholeMessagesReverts(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testQuoteReceiverValueIsEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testQuoteReceiverValueIsNotMoreThanNecessary(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testResend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertDeliveryInsufficientRelayerFunds(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertDeliveryInvalidDeliveryVAA(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertDeliveryInvalidEmitter(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertDeliveryReentrantCall(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertDeliverySendNotSufficientlyFunded(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertDeliveryTargetChainIsNotThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertDeliveryUnexpectedRelayer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertForwardForwardRequestFromWrongAddress(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertForwardFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertForwardMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertForwardMultichainSendEmpty(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertForwardMultipleForwardsRequested(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertForwardNoDeliveryInProgress(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertMultichainSendEmpty(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertRedeliveryInsufficientRelayerFunds(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertRedeliveryInvalidEmitterInRedeliveryVM(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertRedeliveryInvalidOriginalDeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertRedeliveryInvalidRedeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertRedeliveryTargetChainIsNotThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertRedeliveryUnexpectedRelayer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertResendFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertResendMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertResendMsgValueTooLow(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertSendFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertSendMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertSendMsgValueTooLow(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testRevertTargetNotSupported(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testSend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testToAndFromWormholeFormat(
      msg2: PromiseOrValue<BytesLike>,
      msg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testTwoSends(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      secondMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    standardAssumeAndSetupTwoChains(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      minTargetGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testAttackForwardRequestCache(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testEmitInvalidRedeliveryGasLimitTargetLessThanOriginal(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testEmitInvalidRedeliveryOriginalAndNewProviderDeliveryAddressesDiffer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testEmitInvalidRedeliveryOriginalTargetChainIsThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testEmitInvalidRedeliveryReceiverValueTargetLessThanOriginal(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testForward(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testForwardRequestFail(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testForwardTester(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFundsCorrectForASend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testFundsCorrectForASendIfReceiveWormholeMessagesReverts(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testQuoteReceiverValueIsEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testQuoteReceiverValueIsNotMoreThanNecessary(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testResend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertDeliveryInsufficientRelayerFunds(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertDeliveryInvalidDeliveryVAA(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertDeliveryInvalidEmitter(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertDeliveryReentrantCall(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertDeliverySendNotSufficientlyFunded(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertDeliveryTargetChainIsNotThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertDeliveryUnexpectedRelayer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertForwardForwardRequestFromWrongAddress(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertForwardFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertForwardMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertForwardMultichainSendEmpty(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertForwardMultipleForwardsRequested(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertForwardNoDeliveryInProgress(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertMultichainSendEmpty(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertRedeliveryInsufficientRelayerFunds(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertRedeliveryInvalidEmitterInOriginalDeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertRedeliveryInvalidEmitterInRedeliveryVM(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertRedeliveryInvalidOriginalDeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertRedeliveryInvalidRedeliveryVaa(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertRedeliveryTargetChainIsNotThisChain(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertRedeliveryUnexpectedRelayer(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertResendFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertResendMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertResendMsgValueTooLow(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertSendFundsTooMuch(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertSendMaxTransactionFeeNotEnough(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertSendMsgValueTooLow(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testRevertTargetNotSupported(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testSend(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testToAndFromWormholeFormat(
      msg2: PromiseOrValue<BytesLike>,
      msg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testTwoSends(
      gasParams: WormholeRelayerTests.GasParametersStruct,
      feeParams: WormholeRelayerTests.FeeParametersStruct,
      message: PromiseOrValue<BytesLike>,
      secondMessage: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
