/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MockRelayerIntegration {
  export type FurtherInstructionsStruct = {
    keepSending: PromiseOrValue<boolean>;
    newMessages: PromiseOrValue<BytesLike>[];
    chains: PromiseOrValue<BigNumberish>[];
    gasLimits: PromiseOrValue<BigNumberish>[];
  };

  export type FurtherInstructionsStructOutput = [
    boolean,
    string[],
    number[],
    number[]
  ] & {
    keepSending: boolean;
    newMessages: string[];
    chains: number[];
    gasLimits: number[];
  };
}

export declare namespace IWormhole {
  export type SignatureStruct = {
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
    guardianIndex: PromiseOrValue<BigNumberish>;
  };

  export type SignatureStructOutput = [string, string, number, number] & {
    r: string;
    s: string;
    v: number;
    guardianIndex: number;
  };

  export type VMStruct = {
    version: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
    emitterChainId: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
    consistencyLevel: PromiseOrValue<BigNumberish>;
    payload: PromiseOrValue<BytesLike>;
    guardianSetIndex: PromiseOrValue<BigNumberish>;
    signatures: IWormhole.SignatureStruct[];
    hash: PromiseOrValue<BytesLike>;
  };

  export type VMStructOutput = [
    number,
    number,
    number,
    number,
    string,
    BigNumber,
    number,
    string,
    number,
    IWormhole.SignatureStructOutput[],
    string
  ] & {
    version: number;
    timestamp: number;
    nonce: number;
    emitterChainId: number;
    emitterAddress: string;
    sequence: BigNumber;
    consistencyLevel: number;
    payload: string;
    guardianSetIndex: number;
    signatures: IWormhole.SignatureStructOutput[];
    hash: string;
  };
}

export declare namespace Structs {
  export type XAddressStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<BytesLike>;
  };

  export type XAddressStructOutput = [number, string] & {
    chainId: number;
    addr: string;
  };
}

export interface MockRelayerIntegrationInterface extends utils.Interface {
  functions: {
    "clearPayload(bytes32)": FunctionFragment;
    "decodeFurtherInstructions(bytes)": FunctionFragment;
    "emitterAddress()": FunctionFragment;
    "encodeFurtherInstructions((bool,bytes[],uint16[],uint32[]))": FunctionFragment;
    "getMessage()": FunctionFragment;
    "getMessageHistory()": FunctionFragment;
    "getMessages()": FunctionFragment;
    "getPayload(bytes32)": FunctionFragment;
    "parseWormholeObservation(bytes)": FunctionFragment;
    "receiveWormholeMessages(bytes[],bytes[])": FunctionFragment;
    "registerEmitter(uint16,bytes32)": FunctionFragment;
    "registerEmitters((uint16,bytes32)[])": FunctionFragment;
    "sendMessage(bytes,uint16,address)": FunctionFragment;
    "sendMessageGeneral(bytes,uint16,address,address,uint256)": FunctionFragment;
    "sendMessageWithForwardedResponse(bytes,uint16,address,address)": FunctionFragment;
    "sendMessageWithRefundAddress(bytes,uint16,address,address)": FunctionFragment;
    "sendMessagesWithFurtherInstructions(bytes[],(bool,bytes[],uint16[],uint32[]),uint16[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "clearPayload"
      | "decodeFurtherInstructions"
      | "emitterAddress"
      | "encodeFurtherInstructions"
      | "getMessage"
      | "getMessageHistory"
      | "getMessages"
      | "getPayload"
      | "parseWormholeObservation"
      | "receiveWormholeMessages"
      | "registerEmitter"
      | "registerEmitters"
      | "sendMessage"
      | "sendMessageGeneral"
      | "sendMessageWithForwardedResponse"
      | "sendMessageWithRefundAddress"
      | "sendMessagesWithFurtherInstructions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clearPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeFurtherInstructions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeFurtherInstructions",
    values: [MockRelayerIntegration.FurtherInstructionsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseWormholeObservation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveWormholeMessages",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEmitter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEmitters",
    values: [Structs.XAddressStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageGeneral",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageWithForwardedResponse",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessageWithRefundAddress",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessagesWithFurtherInstructions",
    values: [
      PromiseOrValue<BytesLike>[],
      MockRelayerIntegration.FurtherInstructionsStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "clearPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeFurtherInstructions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeFurtherInstructions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayload", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseWormholeObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveWormholeMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageGeneral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageWithForwardedResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageWithRefundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessagesWithFurtherInstructions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockRelayerIntegration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockRelayerIntegrationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clearPayload(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decodeFurtherInstructions(
      encodedFurtherInstructions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [MockRelayerIntegration.FurtherInstructionsStructOutput] & {
        furtherInstructions: MockRelayerIntegration.FurtherInstructionsStructOutput;
      }
    >;

    emitterAddress(overrides?: CallOverrides): Promise<[string]>;

    encodeFurtherInstructions(
      furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encodedFurtherInstructions: string }>;

    getMessage(overrides?: CallOverrides): Promise<[string]>;

    getMessageHistory(overrides?: CallOverrides): Promise<[string[][]]>;

    getMessages(overrides?: CallOverrides): Promise<[string[]]>;

    getPayload(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parseWormholeObservation(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IWormhole.VMStructOutput]>;

    receiveWormholeMessages(
      wormholeObservations: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerEmitter(
      chainId: PromiseOrValue<BigNumberish>,
      emitterAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerEmitters(
      emitters: Structs.XAddressStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessageGeneral(
      fullMessage: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      receiverValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessageWithForwardedResponse(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessageWithRefundAddress(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessagesWithFurtherInstructions(
      messages: PromiseOrValue<BytesLike>[],
      furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
      chains: PromiseOrValue<BigNumberish>[],
      computeBudgets: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  clearPayload(
    hash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decodeFurtherInstructions(
    encodedFurtherInstructions: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MockRelayerIntegration.FurtherInstructionsStructOutput>;

  emitterAddress(overrides?: CallOverrides): Promise<string>;

  encodeFurtherInstructions(
    furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getMessage(overrides?: CallOverrides): Promise<string>;

  getMessageHistory(overrides?: CallOverrides): Promise<string[][]>;

  getMessages(overrides?: CallOverrides): Promise<string[]>;

  getPayload(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  parseWormholeObservation(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IWormhole.VMStructOutput>;

  receiveWormholeMessages(
    wormholeObservations: PromiseOrValue<BytesLike>[],
    arg1: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerEmitter(
    chainId: PromiseOrValue<BigNumberish>,
    emitterAddress: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerEmitters(
    emitters: Structs.XAddressStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    _message: PromiseOrValue<BytesLike>,
    targetChainId: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessageGeneral(
    fullMessage: PromiseOrValue<BytesLike>,
    targetChainId: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    refundAddress: PromiseOrValue<string>,
    receiverValue: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessageWithForwardedResponse(
    _message: PromiseOrValue<BytesLike>,
    targetChainId: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessageWithRefundAddress(
    _message: PromiseOrValue<BytesLike>,
    targetChainId: PromiseOrValue<BigNumberish>,
    destination: PromiseOrValue<string>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessagesWithFurtherInstructions(
    messages: PromiseOrValue<BytesLike>[],
    furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
    chains: PromiseOrValue<BigNumberish>[],
    computeBudgets: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clearPayload(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    decodeFurtherInstructions(
      encodedFurtherInstructions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MockRelayerIntegration.FurtherInstructionsStructOutput>;

    emitterAddress(overrides?: CallOverrides): Promise<string>;

    encodeFurtherInstructions(
      furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getMessage(overrides?: CallOverrides): Promise<string>;

    getMessageHistory(overrides?: CallOverrides): Promise<string[][]>;

    getMessages(overrides?: CallOverrides): Promise<string[]>;

    getPayload(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    parseWormholeObservation(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IWormhole.VMStructOutput>;

    receiveWormholeMessages(
      wormholeObservations: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerEmitter(
      chainId: PromiseOrValue<BigNumberish>,
      emitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerEmitters(
      emitters: Structs.XAddressStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessageGeneral(
      fullMessage: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      receiverValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessageWithForwardedResponse(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessageWithRefundAddress(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessagesWithFurtherInstructions(
      messages: PromiseOrValue<BytesLike>[],
      furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
      chains: PromiseOrValue<BigNumberish>[],
      computeBudgets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    clearPayload(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decodeFurtherInstructions(
      encodedFurtherInstructions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emitterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    encodeFurtherInstructions(
      furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessage(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageHistory(overrides?: CallOverrides): Promise<BigNumber>;

    getMessages(overrides?: CallOverrides): Promise<BigNumber>;

    getPayload(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseWormholeObservation(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveWormholeMessages(
      wormholeObservations: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerEmitter(
      chainId: PromiseOrValue<BigNumberish>,
      emitterAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerEmitters(
      emitters: Structs.XAddressStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessage(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessageGeneral(
      fullMessage: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      receiverValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessageWithForwardedResponse(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessageWithRefundAddress(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessagesWithFurtherInstructions(
      messages: PromiseOrValue<BytesLike>[],
      furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
      chains: PromiseOrValue<BigNumberish>[],
      computeBudgets: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearPayload(
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decodeFurtherInstructions(
      encodedFurtherInstructions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeFurtherInstructions(
      furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMessageHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayload(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseWormholeObservation(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveWormholeMessages(
      wormholeObservations: PromiseOrValue<BytesLike>[],
      arg1: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerEmitter(
      chainId: PromiseOrValue<BigNumberish>,
      emitterAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerEmitters(
      emitters: Structs.XAddressStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageGeneral(
      fullMessage: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      receiverValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageWithForwardedResponse(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessageWithRefundAddress(
      _message: PromiseOrValue<BytesLike>,
      targetChainId: PromiseOrValue<BigNumberish>,
      destination: PromiseOrValue<string>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessagesWithFurtherInstructions(
      messages: PromiseOrValue<BytesLike>[],
      furtherInstructions: MockRelayerIntegration.FurtherInstructionsStruct,
      chains: PromiseOrValue<BigNumberish>[],
      computeBudgets: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
