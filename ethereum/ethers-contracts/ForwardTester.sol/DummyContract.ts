/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IWormholeRelayer {
  export type MessageInfoStruct = {
    infoType: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
    vaaHash: PromiseOrValue<BytesLike>;
  };

  export type MessageInfoStructOutput = [number, string, BigNumber, string] & {
    infoType: number;
    emitterAddress: string;
    sequence: BigNumber;
    vaaHash: string;
  };
}

export interface DummyContractInterface extends utils.Interface {
  functions: {
    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "forward"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "forward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IWormholeRelayer.MessageInfoStruct[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;

  events: {};
}

export interface DummyContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DummyContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    forward(
      chainId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  forward(
    chainId: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<BytesLike>,
    maxTransactionFee: PromiseOrValue<BigNumberish>,
    receiverValue: PromiseOrValue<BigNumberish>,
    messages: IWormholeRelayer.MessageInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    forward(
      chainId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    forward(
      chainId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    forward(
      chainId: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
