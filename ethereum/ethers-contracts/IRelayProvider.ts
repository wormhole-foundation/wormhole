/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IRelayProviderInterface extends utils.Interface {
  functions: {
    "getAssetConversionBuffer(uint16)": FunctionFragment;
    "getConsistencyLevel()": FunctionFragment;
    "getDeliveryAddress(uint16)": FunctionFragment;
    "getRewardAddress()": FunctionFragment;
    "quoteAssetPrice(uint16)": FunctionFragment;
    "quoteDeliveryOverhead(uint16)": FunctionFragment;
    "quoteGasPrice(uint16)": FunctionFragment;
    "quoteMaximumBudget(uint16)": FunctionFragment;
    "quoteRedeliveryOverhead(uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAssetConversionBuffer"
      | "getConsistencyLevel"
      | "getDeliveryAddress"
      | "getRewardAddress"
      | "quoteAssetPrice"
      | "quoteDeliveryOverhead"
      | "quoteGasPrice"
      | "quoteMaximumBudget"
      | "quoteRedeliveryOverhead"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAssetConversionBuffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsistencyLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeliveryAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAssetPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDeliveryOverhead",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteGasPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteMaximumBudget",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteRedeliveryOverhead",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAssetConversionBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsistencyLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeliveryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteDeliveryOverhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteMaximumBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteRedeliveryOverhead",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRelayProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRelayProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAssetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { tolerance: number; toleranceDenominator: number }
    >;

    getConsistencyLevel(
      overrides?: CallOverrides
    ): Promise<[number] & { consistencyLevel: number }>;

    getDeliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { whAddress: string }>;

    getRewardAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { rewardAddress: string }>;

    quoteAssetPrice(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdPrice: BigNumber }>;

    quoteDeliveryOverhead(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deliveryOverhead: BigNumber }>;

    quoteGasPrice(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gasPriceSource: BigNumber }>;

    quoteMaximumBudget(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maximumTargetBudget: BigNumber }>;

    quoteRedeliveryOverhead(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { redeliveryOverhead: BigNumber }>;
  };

  getAssetConversionBuffer(
    targetChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { tolerance: number; toleranceDenominator: number }
  >;

  getConsistencyLevel(overrides?: CallOverrides): Promise<number>;

  getDeliveryAddress(
    targetChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRewardAddress(overrides?: CallOverrides): Promise<string>;

  quoteAssetPrice(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteDeliveryOverhead(
    targetChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteGasPrice(
    targetChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteMaximumBudget(
    targetChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteRedeliveryOverhead(
    targetChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getAssetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { tolerance: number; toleranceDenominator: number }
    >;

    getConsistencyLevel(overrides?: CallOverrides): Promise<number>;

    getDeliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRewardAddress(overrides?: CallOverrides): Promise<string>;

    quoteAssetPrice(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteDeliveryOverhead(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGasPrice(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteMaximumBudget(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteRedeliveryOverhead(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAssetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConsistencyLevel(overrides?: CallOverrides): Promise<BigNumber>;

    getDeliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAddress(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAssetPrice(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteDeliveryOverhead(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGasPrice(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteMaximumBudget(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteRedeliveryOverhead(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAssetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConsistencyLevel(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAssetPrice(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteDeliveryOverhead(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteGasPrice(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteMaximumBudget(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteRedeliveryOverhead(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
