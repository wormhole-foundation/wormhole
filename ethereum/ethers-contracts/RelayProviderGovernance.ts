/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace RelayProviderStructs {
  export type UpdatePriceStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    gasPrice: PromiseOrValue<BigNumberish>;
    nativeCurrencyPrice: PromiseOrValue<BigNumberish>;
  };

  export type UpdatePriceStructOutput = [number, BigNumber, BigNumber] & {
    chainId: number;
    gasPrice: BigNumber;
    nativeCurrencyPrice: BigNumber;
  };
}

export interface RelayProviderGovernanceInterface extends utils.Interface {
  functions: {
    "approvedSender(address)": FunctionFragment;
    "assetConversionBuffer(uint16)": FunctionFragment;
    "chainId()": FunctionFragment;
    "confirmOwnershipTransferRequest()": FunctionFragment;
    "coreRelayer()": FunctionFragment;
    "deliverGasOverhead(uint16)": FunctionFragment;
    "deliveryAddress(uint16)": FunctionFragment;
    "gasPrice(uint16)": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "maximumBudget(uint16)": FunctionFragment;
    "nativeCurrencyPrice(uint16)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "rewardAddress()": FunctionFragment;
    "submitOwnershipTransferRequest(uint16,address)": FunctionFragment;
    "updateApprovedSender(address,bool)": FunctionFragment;
    "updateAssetConversionBuffer(uint16,uint16,uint16)": FunctionFragment;
    "updateCoreRelayer(address)": FunctionFragment;
    "updateDeliverGasOverhead(uint16,uint32)": FunctionFragment;
    "updateDeliveryAddress(uint16,bytes32)": FunctionFragment;
    "updateMaximumBudget(uint16,uint256)": FunctionFragment;
    "updatePrice(uint16,uint128,uint128)": FunctionFragment;
    "updatePrices((uint16,uint128,uint128)[])": FunctionFragment;
    "updateRewardAddress(address)": FunctionFragment;
    "updateWormholeFee(uint16,uint32)": FunctionFragment;
    "upgrade(uint16,address)": FunctionFragment;
    "wormholeFee(uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvedSender"
      | "assetConversionBuffer"
      | "chainId"
      | "confirmOwnershipTransferRequest"
      | "coreRelayer"
      | "deliverGasOverhead"
      | "deliveryAddress"
      | "gasPrice"
      | "isInitialized"
      | "maximumBudget"
      | "nativeCurrencyPrice"
      | "owner"
      | "pendingOwner"
      | "rewardAddress"
      | "submitOwnershipTransferRequest"
      | "updateApprovedSender"
      | "updateAssetConversionBuffer"
      | "updateCoreRelayer"
      | "updateDeliverGasOverhead"
      | "updateDeliveryAddress"
      | "updateMaximumBudget"
      | "updatePrice"
      | "updatePrices"
      | "updateRewardAddress"
      | "updateWormholeFee"
      | "upgrade"
      | "wormholeFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvedSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetConversionBuffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmOwnershipTransferRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deliverGasOverhead",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveryAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gasPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumBudget",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeCurrencyPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitOwnershipTransferRequest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateApprovedSender",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAssetConversionBuffer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoreRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeliverGasOverhead",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeliveryAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumBudget",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrices",
    values: [RelayProviderStructs.UpdatePriceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWormholeFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wormholeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetConversionBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmOwnershipTransferRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliverGasOverhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliveryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeCurrencyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOwnershipTransferRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApprovedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAssetConversionBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoreRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeliverGasOverhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeliveryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWormholeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wormholeFee",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "ApprovedSenderUpdated(address,bool)": EventFragment;
    "AssetConversionBufferUpdated(uint16,uint16,uint16)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ContractUpgraded(address,address)": EventFragment;
    "CoreRelayerUpdated(address)": EventFragment;
    "DeliverGasOverheadUpdated(uint32,uint32)": EventFragment;
    "DeliveryAddressUpdated(uint16,bytes32)": EventFragment;
    "OwnershipTransfered(address,address)": EventFragment;
    "RewardAddressUpdated(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovedSenderUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetConversionBufferUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoreRelayerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeliverGasOverheadUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeliveryAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ApprovedSenderUpdatedEventObject {
  sender: string;
  approved: boolean;
}
export type ApprovedSenderUpdatedEvent = TypedEvent<
  [string, boolean],
  ApprovedSenderUpdatedEventObject
>;

export type ApprovedSenderUpdatedEventFilter =
  TypedEventFilter<ApprovedSenderUpdatedEvent>;

export interface AssetConversionBufferUpdatedEventObject {
  targetChain: number;
  buffer: number;
  bufferDenominator: number;
}
export type AssetConversionBufferUpdatedEvent = TypedEvent<
  [number, number, number],
  AssetConversionBufferUpdatedEventObject
>;

export type AssetConversionBufferUpdatedEventFilter =
  TypedEventFilter<AssetConversionBufferUpdatedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ContractUpgradedEventObject {
  oldContract: string;
  newContract: string;
}
export type ContractUpgradedEvent = TypedEvent<
  [string, string],
  ContractUpgradedEventObject
>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export interface CoreRelayerUpdatedEventObject {
  coreRelayer: string;
}
export type CoreRelayerUpdatedEvent = TypedEvent<
  [string],
  CoreRelayerUpdatedEventObject
>;

export type CoreRelayerUpdatedEventFilter =
  TypedEventFilter<CoreRelayerUpdatedEvent>;

export interface DeliverGasOverheadUpdatedEventObject {
  oldGasOverhead: number;
  newGasOverhead: number;
}
export type DeliverGasOverheadUpdatedEvent = TypedEvent<
  [number, number],
  DeliverGasOverheadUpdatedEventObject
>;

export type DeliverGasOverheadUpdatedEventFilter =
  TypedEventFilter<DeliverGasOverheadUpdatedEvent>;

export interface DeliveryAddressUpdatedEventObject {
  targetChainId: number;
  newAddress: string;
}
export type DeliveryAddressUpdatedEvent = TypedEvent<
  [number, string],
  DeliveryAddressUpdatedEventObject
>;

export type DeliveryAddressUpdatedEventFilter =
  TypedEventFilter<DeliveryAddressUpdatedEvent>;

export interface OwnershipTransferedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferedEvent = TypedEvent<
  [string, string],
  OwnershipTransferedEventObject
>;

export type OwnershipTransferedEventFilter =
  TypedEventFilter<OwnershipTransferedEvent>;

export interface RewardAddressUpdatedEventObject {
  newAddress: string;
}
export type RewardAddressUpdatedEvent = TypedEvent<
  [string],
  RewardAddressUpdatedEventObject
>;

export type RewardAddressUpdatedEventFilter =
  TypedEventFilter<RewardAddressUpdatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface RelayProviderGovernance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayProviderGovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    assetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { tolerance: number; toleranceDenominator: number }
    >;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    confirmOwnershipTransferRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    coreRelayer(overrides?: CallOverrides): Promise<[string]>;

    deliverGasOverhead(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    deliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { whFormatAddress: string }>;

    gasPrice(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maximumBudget(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nativeCurrencyPrice(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    rewardAddress(overrides?: CallOverrides): Promise<[string]>;

    submitOwnershipTransferRequest(
      thisRelayerChainId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateApprovedSender(
      sender: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAssetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      buffer: PromiseOrValue<BigNumberish>,
      bufferDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCoreRelayer(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDeliverGasOverhead(
      chainId: PromiseOrValue<BigNumberish>,
      newGasOverhead: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDeliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      newAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaximumBudget(
      targetChainId: PromiseOrValue<BigNumberish>,
      maximumTotalBudget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      updateChainId: PromiseOrValue<BigNumberish>,
      updateGasPrice: PromiseOrValue<BigNumberish>,
      updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrices(
      updates: RelayProviderStructs.UpdatePriceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWormholeFee(
      chainId: PromiseOrValue<BigNumberish>,
      newWormholeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      relayProviderChainId: PromiseOrValue<BigNumberish>,
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wormholeFee(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  approvedSender(
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  assetConversionBuffer(
    targetChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { tolerance: number; toleranceDenominator: number }
  >;

  chainId(overrides?: CallOverrides): Promise<number>;

  confirmOwnershipTransferRequest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  coreRelayer(overrides?: CallOverrides): Promise<string>;

  deliverGasOverhead(
    targetChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  deliveryAddress(
    targetChain: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  gasPrice(
    targetChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInitialized(
    impl: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maximumBudget(
    targetChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nativeCurrencyPrice(
    targetChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  rewardAddress(overrides?: CallOverrides): Promise<string>;

  submitOwnershipTransferRequest(
    thisRelayerChainId: PromiseOrValue<BigNumberish>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateApprovedSender(
    sender: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAssetConversionBuffer(
    targetChain: PromiseOrValue<BigNumberish>,
    buffer: PromiseOrValue<BigNumberish>,
    bufferDenominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCoreRelayer(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDeliverGasOverhead(
    chainId: PromiseOrValue<BigNumberish>,
    newGasOverhead: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDeliveryAddress(
    targetChain: PromiseOrValue<BigNumberish>,
    newAddress: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaximumBudget(
    targetChainId: PromiseOrValue<BigNumberish>,
    maximumTotalBudget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    updateChainId: PromiseOrValue<BigNumberish>,
    updateGasPrice: PromiseOrValue<BigNumberish>,
    updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrices(
    updates: RelayProviderStructs.UpdatePriceStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardAddress(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWormholeFee(
    chainId: PromiseOrValue<BigNumberish>,
    newWormholeFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    relayProviderChainId: PromiseOrValue<BigNumberish>,
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wormholeFee(
    targetChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    approvedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { tolerance: number; toleranceDenominator: number }
    >;

    chainId(overrides?: CallOverrides): Promise<number>;

    confirmOwnershipTransferRequest(overrides?: CallOverrides): Promise<void>;

    coreRelayer(overrides?: CallOverrides): Promise<string>;

    deliverGasOverhead(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    deliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    gasPrice(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maximumBudget(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeCurrencyPrice(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    rewardAddress(overrides?: CallOverrides): Promise<string>;

    submitOwnershipTransferRequest(
      thisRelayerChainId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateApprovedSender(
      sender: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAssetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      buffer: PromiseOrValue<BigNumberish>,
      bufferDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCoreRelayer(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDeliverGasOverhead(
      chainId: PromiseOrValue<BigNumberish>,
      newGasOverhead: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDeliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      newAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaximumBudget(
      targetChainId: PromiseOrValue<BigNumberish>,
      maximumTotalBudget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      updateChainId: PromiseOrValue<BigNumberish>,
      updateGasPrice: PromiseOrValue<BigNumberish>,
      updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrices(
      updates: RelayProviderStructs.UpdatePriceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWormholeFee(
      chainId: PromiseOrValue<BigNumberish>,
      newWormholeFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(
      relayProviderChainId: PromiseOrValue<BigNumberish>,
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wormholeFee(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "ApprovedSenderUpdated(address,bool)"(
      sender?: null,
      approved?: null
    ): ApprovedSenderUpdatedEventFilter;
    ApprovedSenderUpdated(
      sender?: null,
      approved?: null
    ): ApprovedSenderUpdatedEventFilter;

    "AssetConversionBufferUpdated(uint16,uint16,uint16)"(
      targetChain?: null,
      buffer?: null,
      bufferDenominator?: null
    ): AssetConversionBufferUpdatedEventFilter;
    AssetConversionBufferUpdated(
      targetChain?: null,
      buffer?: null,
      bufferDenominator?: null
    ): AssetConversionBufferUpdatedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ContractUpgraded(address,address)"(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;
    ContractUpgraded(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;

    "CoreRelayerUpdated(address)"(
      coreRelayer?: null
    ): CoreRelayerUpdatedEventFilter;
    CoreRelayerUpdated(coreRelayer?: null): CoreRelayerUpdatedEventFilter;

    "DeliverGasOverheadUpdated(uint32,uint32)"(
      oldGasOverhead?: PromiseOrValue<BigNumberish> | null,
      newGasOverhead?: PromiseOrValue<BigNumberish> | null
    ): DeliverGasOverheadUpdatedEventFilter;
    DeliverGasOverheadUpdated(
      oldGasOverhead?: PromiseOrValue<BigNumberish> | null,
      newGasOverhead?: PromiseOrValue<BigNumberish> | null
    ): DeliverGasOverheadUpdatedEventFilter;

    "DeliveryAddressUpdated(uint16,bytes32)"(
      targetChainId?: PromiseOrValue<BigNumberish> | null,
      newAddress?: PromiseOrValue<BytesLike> | null
    ): DeliveryAddressUpdatedEventFilter;
    DeliveryAddressUpdated(
      targetChainId?: PromiseOrValue<BigNumberish> | null,
      newAddress?: PromiseOrValue<BytesLike> | null
    ): DeliveryAddressUpdatedEventFilter;

    "OwnershipTransfered(address,address)"(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferedEventFilter;
    OwnershipTransfered(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferedEventFilter;

    "RewardAddressUpdated(address)"(
      newAddress?: PromiseOrValue<string> | null
    ): RewardAddressUpdatedEventFilter;
    RewardAddressUpdated(
      newAddress?: PromiseOrValue<string> | null
    ): RewardAddressUpdatedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    approvedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    confirmOwnershipTransferRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    coreRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    deliverGasOverhead(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gasPrice(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maximumBudget(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeCurrencyPrice(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    rewardAddress(overrides?: CallOverrides): Promise<BigNumber>;

    submitOwnershipTransferRequest(
      thisRelayerChainId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateApprovedSender(
      sender: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAssetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      buffer: PromiseOrValue<BigNumberish>,
      bufferDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCoreRelayer(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDeliverGasOverhead(
      chainId: PromiseOrValue<BigNumberish>,
      newGasOverhead: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDeliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      newAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaximumBudget(
      targetChainId: PromiseOrValue<BigNumberish>,
      maximumTotalBudget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrice(
      updateChainId: PromiseOrValue<BigNumberish>,
      updateGasPrice: PromiseOrValue<BigNumberish>,
      updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrices(
      updates: RelayProviderStructs.UpdatePriceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWormholeFee(
      chainId: PromiseOrValue<BigNumberish>,
      newWormholeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgrade(
      relayProviderChainId: PromiseOrValue<BigNumberish>,
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wormholeFee(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmOwnershipTransferRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    coreRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deliverGasOverhead(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasPrice(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumBudget(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeCurrencyPrice(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitOwnershipTransferRequest(
      thisRelayerChainId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateApprovedSender(
      sender: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAssetConversionBuffer(
      targetChain: PromiseOrValue<BigNumberish>,
      buffer: PromiseOrValue<BigNumberish>,
      bufferDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCoreRelayer(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDeliverGasOverhead(
      chainId: PromiseOrValue<BigNumberish>,
      newGasOverhead: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDeliveryAddress(
      targetChain: PromiseOrValue<BigNumberish>,
      newAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaximumBudget(
      targetChainId: PromiseOrValue<BigNumberish>,
      maximumTotalBudget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      updateChainId: PromiseOrValue<BigNumberish>,
      updateGasPrice: PromiseOrValue<BigNumberish>,
      updateNativeCurrencyPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrices(
      updates: RelayProviderStructs.UpdatePriceStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWormholeFee(
      chainId: PromiseOrValue<BigNumberish>,
      newWormholeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      relayProviderChainId: PromiseOrValue<BigNumberish>,
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wormholeFee(
      targetChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
