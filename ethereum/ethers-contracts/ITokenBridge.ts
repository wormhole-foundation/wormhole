/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ITokenBridge {
  export type TransferStruct = {
    payloadID: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<BytesLike>;
    tokenChain: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<BytesLike>;
    toChain: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
  };

  export type TransferStructOutput = [
    number,
    BigNumber,
    string,
    number,
    string,
    number,
    BigNumber
  ] & {
    payloadID: number;
    amount: BigNumber;
    tokenAddress: string;
    tokenChain: number;
    to: string;
    toChain: number;
    fee: BigNumber;
  };

  export type AssetMetaStruct = {
    payloadID: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<BytesLike>;
    tokenChain: PromiseOrValue<BigNumberish>;
    decimals: PromiseOrValue<BigNumberish>;
    symbol: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<BytesLike>;
  };

  export type AssetMetaStructOutput = [
    number,
    string,
    number,
    number,
    string,
    string
  ] & {
    payloadID: number;
    tokenAddress: string;
    tokenChain: number;
    decimals: number;
    symbol: string;
    name: string;
  };

  export type TransferWithPayloadStruct = {
    payloadID: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<BytesLike>;
    tokenChain: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<BytesLike>;
    toChain: PromiseOrValue<BigNumberish>;
    fromAddress: PromiseOrValue<BytesLike>;
    payload: PromiseOrValue<BytesLike>;
  };

  export type TransferWithPayloadStructOutput = [
    number,
    BigNumber,
    string,
    number,
    string,
    number,
    string,
    string
  ] & {
    payloadID: number;
    amount: BigNumber;
    tokenAddress: string;
    tokenChain: number;
    to: string;
    toChain: number;
    fromAddress: string;
    payload: string;
  };

  export type RecoverChainIdStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    evmChainId: PromiseOrValue<BigNumberish>;
    newChainId: PromiseOrValue<BigNumberish>;
  };

  export type RecoverChainIdStructOutput = [
    string,
    number,
    BigNumber,
    number
  ] & {
    module: string;
    action: number;
    evmChainId: BigNumber;
    newChainId: number;
  };

  export type RegisterChainStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chainId: PromiseOrValue<BigNumberish>;
    emitterChainID: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
  };

  export type RegisterChainStructOutput = [
    string,
    number,
    number,
    number,
    string
  ] & {
    module: string;
    action: number;
    chainId: number;
    emitterChainID: number;
    emitterAddress: string;
  };

  export type UpgradeContractStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chainId: PromiseOrValue<BigNumberish>;
    newContract: PromiseOrValue<BytesLike>;
  };

  export type UpgradeContractStructOutput = [string, number, number, string] & {
    module: string;
    action: number;
    chainId: number;
    newContract: string;
  };
}

export interface ITokenBridgeInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "_parseTransferCommon(bytes)": FunctionFragment;
    "attestToken(address,uint32)": FunctionFragment;
    "bridgeContracts(uint16)": FunctionFragment;
    "chainId()": FunctionFragment;
    "completeTransfer(bytes)": FunctionFragment;
    "completeTransferAndUnwrapETH(bytes)": FunctionFragment;
    "completeTransferAndUnwrapETHWithPayload(bytes)": FunctionFragment;
    "completeTransferWithPayload(bytes)": FunctionFragment;
    "createWrapped(bytes)": FunctionFragment;
    "encodeAssetMeta((uint8,bytes32,uint16,uint8,bytes32,bytes32))": FunctionFragment;
    "encodeTransfer((uint8,uint256,bytes32,uint16,bytes32,uint16,uint256))": FunctionFragment;
    "encodeTransferWithPayload((uint8,uint256,bytes32,uint16,bytes32,uint16,bytes32,bytes))": FunctionFragment;
    "evmChainId()": FunctionFragment;
    "finality()": FunctionFragment;
    "governanceActionIsConsumed(bytes32)": FunctionFragment;
    "governanceChainId()": FunctionFragment;
    "governanceContract()": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isFork()": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "isTransferCompleted(bytes32)": FunctionFragment;
    "isWrappedAsset(address)": FunctionFragment;
    "outstandingBridged(address)": FunctionFragment;
    "parseAssetMeta(bytes)": FunctionFragment;
    "parsePayloadID(bytes)": FunctionFragment;
    "parseRecoverChainId(bytes)": FunctionFragment;
    "parseRegisterChain(bytes)": FunctionFragment;
    "parseTransfer(bytes)": FunctionFragment;
    "parseTransferWithPayload(bytes)": FunctionFragment;
    "parseUpgrade(bytes)": FunctionFragment;
    "registerChain(bytes)": FunctionFragment;
    "submitRecoverChainId(bytes)": FunctionFragment;
    "tokenImplementation()": FunctionFragment;
    "transferTokens(address,uint256,uint16,bytes32,uint256,uint32)": FunctionFragment;
    "transferTokensWithPayload(address,uint256,uint16,bytes32,uint32,bytes)": FunctionFragment;
    "updateWrapped(bytes)": FunctionFragment;
    "upgrade(bytes)": FunctionFragment;
    "wormhole()": FunctionFragment;
    "wrapAndTransferETH(uint16,bytes32,uint256,uint32)": FunctionFragment;
    "wrapAndTransferETHWithPayload(uint16,bytes32,uint32,bytes)": FunctionFragment;
    "wrappedAsset(uint16,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH"
      | "_parseTransferCommon"
      | "attestToken"
      | "bridgeContracts"
      | "chainId"
      | "completeTransfer"
      | "completeTransferAndUnwrapETH"
      | "completeTransferAndUnwrapETHWithPayload"
      | "completeTransferWithPayload"
      | "createWrapped"
      | "encodeAssetMeta"
      | "encodeTransfer"
      | "encodeTransferWithPayload"
      | "evmChainId"
      | "finality"
      | "governanceActionIsConsumed"
      | "governanceChainId"
      | "governanceContract"
      | "implementation"
      | "initialize"
      | "isFork"
      | "isInitialized"
      | "isTransferCompleted"
      | "isWrappedAsset"
      | "outstandingBridged"
      | "parseAssetMeta"
      | "parsePayloadID"
      | "parseRecoverChainId"
      | "parseRegisterChain"
      | "parseTransfer"
      | "parseTransferWithPayload"
      | "parseUpgrade"
      | "registerChain"
      | "submitRecoverChainId"
      | "tokenImplementation"
      | "transferTokens"
      | "transferTokensWithPayload"
      | "updateWrapped"
      | "upgrade"
      | "wormhole"
      | "wrapAndTransferETH"
      | "wrapAndTransferETHWithPayload"
      | "wrappedAsset"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_parseTransferCommon",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "attestToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "completeTransfer",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTransferAndUnwrapETH",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTransferAndUnwrapETHWithPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTransferWithPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createWrapped",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeAssetMeta",
    values: [ITokenBridge.AssetMetaStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransfer",
    values: [ITokenBridge.TransferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransferWithPayload",
    values: [ITokenBridge.TransferWithPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "evmChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finality", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governanceActionIsConsumed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFork", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferCompleted",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWrappedAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingBridged",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAssetMeta",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parsePayloadID",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRecoverChainId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRegisterChain",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTransfer",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTransferWithPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseUpgrade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerChain",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRecoverChainId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokensWithPayload",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWrapped",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrapAndTransferETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapAndTransferETHWithPayload",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedAsset",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_parseTransferCommon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTransferAndUnwrapETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTransferAndUnwrapETHWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTransferWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeAssetMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransferWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evmChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finality", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceActionIsConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWrappedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outstandingBridged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseAssetMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parsePayloadID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRecoverChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRegisterChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseTransferWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRecoverChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokensWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapAndTransferETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapAndTransferETHWithPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedAsset",
    data: BytesLike
  ): Result;

  events: {
    "ContractUpgraded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
}

export interface ContractUpgradedEventObject {
  oldContract: string;
  newContract: string;
}
export type ContractUpgradedEvent = TypedEvent<
  [string, string],
  ContractUpgradedEventObject
>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export interface ITokenBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    _parseTransferCommon(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITokenBridge.TransferStructOutput] & {
        transfer: ITokenBridge.TransferStructOutput;
      }
    >;

    attestToken(
      tokenAddress: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    completeTransfer(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeTransferAndUnwrapETH(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeTransferAndUnwrapETHWithPayload(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeTransferWithPayload(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createWrapped(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encodeAssetMeta(
      meta: ITokenBridge.AssetMetaStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encoded: string }>;

    encodeTransfer(
      transfer: ITokenBridge.TransferStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encoded: string }>;

    encodeTransferWithPayload(
      transfer: ITokenBridge.TransferWithPayloadStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { encoded: string }>;

    evmChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    finality(overrides?: CallOverrides): Promise<[number]>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governanceChainId(overrides?: CallOverrides): Promise<[number]>;

    governanceContract(overrides?: CallOverrides): Promise<[string]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isFork(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTransferCompleted(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWrappedAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    outstandingBridged(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parseAssetMeta(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITokenBridge.AssetMetaStructOutput] & {
        meta: ITokenBridge.AssetMetaStructOutput;
      }
    >;

    parsePayloadID(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number] & { payloadID: number }>;

    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITokenBridge.RecoverChainIdStructOutput] & {
        rci: ITokenBridge.RecoverChainIdStructOutput;
      }
    >;

    parseRegisterChain(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITokenBridge.RegisterChainStructOutput] & {
        chain: ITokenBridge.RegisterChainStructOutput;
      }
    >;

    parseTransfer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITokenBridge.TransferStructOutput] & {
        transfer: ITokenBridge.TransferStructOutput;
      }
    >;

    parseTransferWithPayload(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITokenBridge.TransferWithPayloadStructOutput] & {
        transfer: ITokenBridge.TransferWithPayloadStructOutput;
      }
    >;

    parseUpgrade(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ITokenBridge.UpgradeContractStructOutput] & {
        chain: ITokenBridge.UpgradeContractStructOutput;
      }
    >;

    registerChain(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitRecoverChainId(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    transferTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      arbiterFee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTokensWithPayload(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWrapped(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;

    wrapAndTransferETH(
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      arbiterFee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrapAndTransferETHWithPayload(
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrappedAsset(
      tokenChainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  _parseTransferCommon(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITokenBridge.TransferStructOutput>;

  attestToken(
    tokenAddress: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeContracts(
    chainId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<number>;

  completeTransfer(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeTransferAndUnwrapETH(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeTransferAndUnwrapETHWithPayload(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeTransferWithPayload(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createWrapped(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encodeAssetMeta(
    meta: ITokenBridge.AssetMetaStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeTransfer(
    transfer: ITokenBridge.TransferStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeTransferWithPayload(
    transfer: ITokenBridge.TransferWithPayloadStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

  finality(overrides?: CallOverrides): Promise<number>;

  governanceActionIsConsumed(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governanceChainId(overrides?: CallOverrides): Promise<number>;

  governanceContract(overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isFork(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(
    impl: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTransferCompleted(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWrappedAsset(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  outstandingBridged(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  parseAssetMeta(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITokenBridge.AssetMetaStructOutput>;

  parsePayloadID(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  parseRecoverChainId(
    encodedRecoverChainId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITokenBridge.RecoverChainIdStructOutput>;

  parseRegisterChain(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITokenBridge.RegisterChainStructOutput>;

  parseTransfer(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITokenBridge.TransferStructOutput>;

  parseTransferWithPayload(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITokenBridge.TransferWithPayloadStructOutput>;

  parseUpgrade(
    encoded: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITokenBridge.UpgradeContractStructOutput>;

  registerChain(
    encodedVM: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitRecoverChainId(
    encodedVM: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenImplementation(overrides?: CallOverrides): Promise<string>;

  transferTokens(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    arbiterFee: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTokensWithPayload(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    nonce: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWrapped(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    encodedVM: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  wrapAndTransferETH(
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    arbiterFee: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrapAndTransferETHWithPayload(
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    nonce: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrappedAsset(
    tokenChainId: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    _parseTransferCommon(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITokenBridge.TransferStructOutput>;

    attestToken(
      tokenAddress: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bridgeContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<number>;

    completeTransfer(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeTransferAndUnwrapETH(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeTransferAndUnwrapETHWithPayload(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    completeTransferWithPayload(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    createWrapped(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeAssetMeta(
      meta: ITokenBridge.AssetMetaStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeTransfer(
      transfer: ITokenBridge.TransferStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeTransferWithPayload(
      transfer: ITokenBridge.TransferWithPayloadStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    finality(overrides?: CallOverrides): Promise<number>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governanceChainId(overrides?: CallOverrides): Promise<number>;

    governanceContract(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isFork(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTransferCompleted(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWrappedAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    outstandingBridged(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseAssetMeta(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITokenBridge.AssetMetaStructOutput>;

    parsePayloadID(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITokenBridge.RecoverChainIdStructOutput>;

    parseRegisterChain(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITokenBridge.RegisterChainStructOutput>;

    parseTransfer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITokenBridge.TransferStructOutput>;

    parseTransferWithPayload(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITokenBridge.TransferWithPayloadStructOutput>;

    parseUpgrade(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITokenBridge.UpgradeContractStructOutput>;

    registerChain(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitRecoverChainId(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenImplementation(overrides?: CallOverrides): Promise<string>;

    transferTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      arbiterFee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferTokensWithPayload(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateWrapped(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    upgrade(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    wormhole(overrides?: CallOverrides): Promise<string>;

    wrapAndTransferETH(
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      arbiterFee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrapAndTransferETHWithPayload(
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrappedAsset(
      tokenChainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ContractUpgraded(address,address)"(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;
    ContractUpgraded(
      oldContract?: PromiseOrValue<string> | null,
      newContract?: PromiseOrValue<string> | null
    ): ContractUpgradedEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    _parseTransferCommon(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    attestToken(
      tokenAddress: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    completeTransfer(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeTransferAndUnwrapETH(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeTransferAndUnwrapETHWithPayload(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeTransferWithPayload(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createWrapped(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encodeAssetMeta(
      meta: ITokenBridge.AssetMetaStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeTransfer(
      transfer: ITokenBridge.TransferStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeTransferWithPayload(
      transfer: ITokenBridge.TransferWithPayloadStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    finality(overrides?: CallOverrides): Promise<BigNumber>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceContract(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isFork(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransferCompleted(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWrappedAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    outstandingBridged(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseAssetMeta(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parsePayloadID(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseRegisterChain(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseTransfer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseTransferWithPayload(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseUpgrade(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerChain(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitRecoverChainId(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    transferTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      arbiterFee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTokensWithPayload(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWrapped(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgrade(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;

    wrapAndTransferETH(
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      arbiterFee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrapAndTransferETHWithPayload(
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrappedAsset(
      tokenChainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _parseTransferCommon(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    attestToken(
      tokenAddress: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeContracts(
      chainId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeTransfer(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeTransferAndUnwrapETH(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeTransferAndUnwrapETHWithPayload(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeTransferWithPayload(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createWrapped(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encodeAssetMeta(
      meta: ITokenBridge.AssetMetaStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeTransfer(
      transfer: ITokenBridge.TransferStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeTransferWithPayload(
      transfer: ITokenBridge.TransferWithPayloadStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finality(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceActionIsConsumed(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isFork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(
      impl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransferCompleted(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWrappedAsset(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    outstandingBridged(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseAssetMeta(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parsePayloadID(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseRecoverChainId(
      encodedRecoverChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseRegisterChain(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseTransfer(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseTransferWithPayload(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseUpgrade(
      encoded: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerChain(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitRecoverChainId(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferTokens(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      arbiterFee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTokensWithPayload(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWrapped(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapAndTransferETH(
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      arbiterFee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrapAndTransferETHWithPayload(
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrappedAsset(
      tokenChainId: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
