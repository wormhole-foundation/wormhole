/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IWormholeRelayer {
  export type MessageInfoStruct = {
    infoType: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
    sequence: PromiseOrValue<BigNumberish>;
    vaaHash: PromiseOrValue<BytesLike>;
  };

  export type MessageInfoStructOutput = [number, string, BigNumber, string] & {
    infoType: number;
    emitterAddress: string;
    sequence: BigNumber;
    vaaHash: string;
  };

  export type SendStruct = {
    targetChain: PromiseOrValue<BigNumberish>;
    targetAddress: PromiseOrValue<BytesLike>;
    refundAddress: PromiseOrValue<BytesLike>;
    maxTransactionFee: PromiseOrValue<BigNumberish>;
    receiverValue: PromiseOrValue<BigNumberish>;
    relayParameters: PromiseOrValue<BytesLike>;
  };

  export type SendStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    targetChain: number;
    targetAddress: string;
    refundAddress: string;
    maxTransactionFee: BigNumber;
    receiverValue: BigNumber;
    relayParameters: string;
  };

  export type MultichainSendStruct = {
    relayProviderAddress: PromiseOrValue<string>;
    messages: IWormholeRelayer.MessageInfoStruct[];
    requests: IWormholeRelayer.SendStruct[];
  };

  export type MultichainSendStructOutput = [
    string,
    IWormholeRelayer.MessageInfoStructOutput[],
    IWormholeRelayer.SendStructOutput[]
  ] & {
    relayProviderAddress: string;
    messages: IWormholeRelayer.MessageInfoStructOutput[];
    requests: IWormholeRelayer.SendStructOutput[];
  };

  export type ResendByTxStruct = {
    sourceChain: PromiseOrValue<BigNumberish>;
    sourceTxHash: PromiseOrValue<BytesLike>;
    deliveryVAASequence: PromiseOrValue<BigNumberish>;
    targetChain: PromiseOrValue<BigNumberish>;
    multisendIndex: PromiseOrValue<BigNumberish>;
    newMaxTransactionFee: PromiseOrValue<BigNumberish>;
    newReceiverValue: PromiseOrValue<BigNumberish>;
    newRelayParameters: PromiseOrValue<BytesLike>;
  };

  export type ResendByTxStructOutput = [
    number,
    string,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber,
    string
  ] & {
    sourceChain: number;
    sourceTxHash: string;
    deliveryVAASequence: BigNumber;
    targetChain: number;
    multisendIndex: number;
    newMaxTransactionFee: BigNumber;
    newReceiverValue: BigNumber;
    newRelayParameters: string;
  };
}

export interface IWormholeRelayerInterface extends utils.Interface {
  functions: {
    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])": FunctionFragment;
    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)": FunctionFragment;
    "fromWormholeFormat(bytes32)": FunctionFragment;
    "getDefaultRelayParams()": FunctionFragment;
    "getDefaultRelayProvider()": FunctionFragment;
    "multichainForward((address,(uint8,bytes32,uint64,bytes32)[],(uint16,bytes32,bytes32,uint256,uint256,bytes)[]))": FunctionFragment;
    "multichainSend((address,(uint8,bytes32,uint64,bytes32)[],(uint16,bytes32,bytes32,uint256,uint256,bytes)[]))": FunctionFragment;
    "quoteGas(uint16,uint32,address)": FunctionFragment;
    "quoteGasResend(uint16,uint32,address)": FunctionFragment;
    "quoteReceiverValue(uint16,uint256,address)": FunctionFragment;
    "resend((uint16,bytes32,uint64,uint16,uint8,uint256,uint256,bytes),address)": FunctionFragment;
    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])": FunctionFragment;
    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)": FunctionFragment;
    "toWormholeFormat(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"
      | "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"
      | "fromWormholeFormat"
      | "getDefaultRelayParams"
      | "getDefaultRelayProvider"
      | "multichainForward"
      | "multichainSend"
      | "quoteGas"
      | "quoteGasResend"
      | "quoteReceiverValue"
      | "resend"
      | "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"
      | "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"
      | "toWormholeFormat"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IWormholeRelayer.MessageInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)",
    values: [
      IWormholeRelayer.SendStruct,
      IWormholeRelayer.MessageInfoStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fromWormholeFormat",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRelayParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultRelayProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multichainForward",
    values: [IWormholeRelayer.MultichainSendStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "multichainSend",
    values: [IWormholeRelayer.MultichainSendStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteGas",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteGasResend",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteReceiverValue",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resend",
    values: [IWormholeRelayer.ResendByTxStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IWormholeRelayer.MessageInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)",
    values: [
      IWormholeRelayer.SendStruct,
      IWormholeRelayer.MessageInfoStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toWormholeFormat",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromWormholeFormat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRelayParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultRelayProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multichainForward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multichainSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteGasResend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteReceiverValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toWormholeFormat",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IWormholeRelayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWormholeRelayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    getDefaultRelayParams(
      overrides?: CallOverrides
    ): Promise<[string] & { relayParams: string }>;

    getDefaultRelayProvider(
      overrides?: CallOverrides
    ): Promise<[string] & { relayProvider: string }>;

    multichainForward(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multichainSend(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoteGas(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxTransactionFee: BigNumber }>;

    quoteGasResend(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxTransactionFee: BigNumber }>;

    quoteReceiverValue(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { receiverValue: BigNumber }>;

    resend(
      request: IWormholeRelayer.ResendByTxStruct,
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { whFormat: string }>;
  };

  "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
    targetChain: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<BytesLike>,
    maxTransactionFee: PromiseOrValue<BigNumberish>,
    receiverValue: PromiseOrValue<BigNumberish>,
    messages: IWormholeRelayer.MessageInfoStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
    request: IWormholeRelayer.SendStruct,
    messages: IWormholeRelayer.MessageInfoStruct[],
    relayProvider: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fromWormholeFormat(
    whFormatAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDefaultRelayParams(overrides?: CallOverrides): Promise<string>;

  getDefaultRelayProvider(overrides?: CallOverrides): Promise<string>;

  multichainForward(
    sendContainer: IWormholeRelayer.MultichainSendStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multichainSend(
    sendContainer: IWormholeRelayer.MultichainSendStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoteGas(
    targetChain: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    relayProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteGasResend(
    targetChain: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    relayProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteReceiverValue(
    targetChain: PromiseOrValue<BigNumberish>,
    targetAmount: PromiseOrValue<BigNumberish>,
    relayProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  resend(
    request: IWormholeRelayer.ResendByTxStruct,
    relayProvider: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
    targetChain: PromiseOrValue<BigNumberish>,
    targetAddress: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<BytesLike>,
    maxTransactionFee: PromiseOrValue<BigNumberish>,
    receiverValue: PromiseOrValue<BigNumberish>,
    messages: IWormholeRelayer.MessageInfoStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
    request: IWormholeRelayer.SendStruct,
    messages: IWormholeRelayer.MessageInfoStruct[],
    relayProvider: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toWormholeFormat(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDefaultRelayParams(overrides?: CallOverrides): Promise<string>;

    getDefaultRelayProvider(overrides?: CallOverrides): Promise<string>;

    multichainForward(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    multichainSend(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGas(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGasResend(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteReceiverValue(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resend(
      request: IWormholeRelayer.ResendByTxStruct,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultRelayParams(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultRelayProvider(overrides?: CallOverrides): Promise<BigNumber>;

    multichainForward(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multichainSend(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoteGas(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGasResend(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteReceiverValue(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resend(
      request: IWormholeRelayer.ResendByTxStruct,
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "forward(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "forward((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fromWormholeFormat(
      whFormatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultRelayParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultRelayProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multichainForward(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multichainSend(
      sendContainer: IWormholeRelayer.MultichainSendStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoteGas(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteGasResend(
      targetChain: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteReceiverValue(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAmount: PromiseOrValue<BigNumberish>,
      relayProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resend(
      request: IWormholeRelayer.ResendByTxStruct,
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "send(uint16,bytes32,bytes32,uint256,uint256,(uint8,bytes32,uint64,bytes32)[])"(
      targetChain: PromiseOrValue<BigNumberish>,
      targetAddress: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<BytesLike>,
      maxTransactionFee: PromiseOrValue<BigNumberish>,
      receiverValue: PromiseOrValue<BigNumberish>,
      messages: IWormholeRelayer.MessageInfoStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "send((uint16,bytes32,bytes32,uint256,uint256,bytes),(uint8,bytes32,uint64,bytes32)[],address)"(
      request: IWormholeRelayer.SendStruct,
      messages: IWormholeRelayer.MessageInfoStruct[],
      relayProvider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toWormholeFormat(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
