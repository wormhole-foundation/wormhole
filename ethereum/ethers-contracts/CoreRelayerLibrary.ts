/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CoreRelayerLibrary {
  export type RegisterChainStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    emitterChain: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
  };

  export type RegisterChainStructOutput = [
    string,
    number,
    number,
    number,
    string
  ] & {
    module: string;
    action: number;
    chain: number;
    emitterChain: number;
    emitterAddress: string;
  };

  export type UpdateDefaultProviderStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    newProvider: PromiseOrValue<string>;
  };

  export type UpdateDefaultProviderStructOutput = [
    string,
    number,
    number,
    string
  ] & { module: string; action: number; chain: number; newProvider: string };

  export type ContractUpgradeStruct = {
    module: PromiseOrValue<BytesLike>;
    action: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    newContract: PromiseOrValue<string>;
  };

  export type ContractUpgradeStructOutput = [string, number, number, string] & {
    module: string;
    action: number;
    chain: number;
    newContract: string;
  };
}

export interface CoreRelayerLibraryInterface extends utils.Interface {
  functions: {
    "parseRegisterChain(bytes,bytes32)": FunctionFragment;
    "parseUpdateDefaultProvider(bytes,bytes32)": FunctionFragment;
    "parseUpgrade(bytes,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "parseRegisterChain"
      | "parseUpdateDefaultProvider"
      | "parseUpgrade"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "parseRegisterChain",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseUpdateDefaultProvider",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseUpgrade",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "parseRegisterChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseUpdateDefaultProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseUpgrade",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CoreRelayerLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreRelayerLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    parseRegisterChain(
      encodedRegistration: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [CoreRelayerLibrary.RegisterChainStructOutput] & {
        registerChain: CoreRelayerLibrary.RegisterChainStructOutput;
      }
    >;

    parseUpdateDefaultProvider(
      encodedDefaultProvider: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [CoreRelayerLibrary.UpdateDefaultProviderStructOutput] & {
        defaultProvider: CoreRelayerLibrary.UpdateDefaultProviderStructOutput;
      }
    >;

    parseUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [CoreRelayerLibrary.ContractUpgradeStructOutput] & {
        cu: CoreRelayerLibrary.ContractUpgradeStructOutput;
      }
    >;
  };

  parseRegisterChain(
    encodedRegistration: PromiseOrValue<BytesLike>,
    module: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CoreRelayerLibrary.RegisterChainStructOutput>;

  parseUpdateDefaultProvider(
    encodedDefaultProvider: PromiseOrValue<BytesLike>,
    module: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CoreRelayerLibrary.UpdateDefaultProviderStructOutput>;

  parseUpgrade(
    encodedUpgrade: PromiseOrValue<BytesLike>,
    module: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CoreRelayerLibrary.ContractUpgradeStructOutput>;

  callStatic: {
    parseRegisterChain(
      encodedRegistration: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CoreRelayerLibrary.RegisterChainStructOutput>;

    parseUpdateDefaultProvider(
      encodedDefaultProvider: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CoreRelayerLibrary.UpdateDefaultProviderStructOutput>;

    parseUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CoreRelayerLibrary.ContractUpgradeStructOutput>;
  };

  filters: {};

  estimateGas: {
    parseRegisterChain(
      encodedRegistration: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseUpdateDefaultProvider(
      encodedDefaultProvider: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    parseRegisterChain(
      encodedRegistration: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseUpdateDefaultProvider(
      encodedDefaultProvider: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseUpgrade(
      encodedUpgrade: PromiseOrValue<BytesLike>,
      module: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
