#!/bin/bash

set -euo pipefail

network=$1
module=$2
chain=$3
evm_chain_id=$4
rpc_url=$5
private_key=$6


secret=$MNEMONIC
guardian_secret=""

if [ "$network" = testnet ]; then
  guardian_secret=$GUARDIAN_MNEMONIC
fi

SCRIPT=""
verify_module=""
case "$module" in
    Core)
        SCRIPT_NAME="DeployCoreImplementationOnly"
        FILE="build-forge/Implementation.sol/Implementation.json"
        verify_module="core"
        ;;
    TokenBridge)
        SCRIPT_NAME="DeployTokenBridgeImplementationOnly"
        FILE="build-forge/BridgeImplementation.sol/BridgeImplementation.json"
        verify_module="token_bridge"
        ;;
    NFTBridge)
        SCRIPT_NAME="DeployNFTBridgeImplementationOnly"
        FILE="build-forge/NFTBridgeImplementation.sol/NFTBridgeImplementation.json"
        verify_module="nft_bridge"
        ;;
    *) echo "unknown module $module" >&2
       ;;
esac

SCRIPT="./forge-scripts/$SCRIPT_NAME.s.sol:$SCRIPT_NAME"

# TODO: add option to not compile (but compile by default)

ret=0
implementation=$(worm evm info -c "$chain" -m "$module" -n "$network" -i 2>/dev/null) || ret=$?

if [ $ret != 0 ]; then
  printf "☐ %s %s: skipping (no deployment available)\n" "$chain" "$module"
  exit 1
fi

ret=0
(./verify -n "$network" -c "$chain" $FILE "$implementation" > /dev/null) || ret=$?

if [ $ret = 0 ]; then
  printf "✔ %s %s: skipping (implementation matches same bytecode)\n" "$chain" "$module"
  exit
fi

forge script $SCRIPT --rpc-url $rpc_url --private-key $private_key --broadcast --via-ir || ( echo "✘ $chain $module: $deploy_output" && exit 1 )
returnInfo=$(cat ./broadcast/$SCRIPT_NAME.s.sol/$evm_chain_id/run-latest.json) 
new_implementation=$(jq -r '.returns.deployedAddress.value' <<< "$returnInfo")

ret=0
(./verify -n "$network" -c "$chain" $FILE "$new_implementation" > /dev/null) || ret=$?

if [ $ret = 0 ]; then
  printf "✔ %s %s: deployed (%s)\n" "$chain" "$module" "$new_implementation"
else
  printf "✘ %s %s: deployed (%s) but failed to match bytecode\n"  "$chain" "$module" "$new_implementation"
  exit 1
fi

if [ "$network" = testnet ]; then
  worm submit $(worm generate upgrade -c "$chain" -a "$new_implementation" -m "$module" -g "$guardian_secret") -n "$network"
else
  echo "./scripts/contract-upgrade-governance.sh -c $chain -m $verify_module -a $new_implementation"
fi
