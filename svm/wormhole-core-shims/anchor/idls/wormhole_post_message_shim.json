{
  "address": "EtZMZM22ViKMo4r5y4Anovs3wKQ2owUmDpjygnMMcdEX",
  "metadata": {
    "name": "wormhole_post_message_shim",
    "version": "0.0.0",
    "spec": "0.1.0",
    "description": "Anchor Interface for Wormhole Post Message Shim"
  },
  "instructions": [
    {
      "name": "post_message",
      "docs": [
        "This instruction is intended to be a significantly cheaper alternative",
        "to `post_message` on the core bridge. It achieves this by reusing the",
        "message account, per emitter, via `post_message_unreliable` and emitting",
        "a CPI event for the guardian to observe containing the information",
        "previously only found in the resulting message account. Since this",
        "passes through the emitter and calls `post_message_unreliable` on the",
        "core bridge, it can be used (or not used) without disruption.",
        "",
        "NOTE: In the initial message publication for a new emitter, this will",
        "require one additional CPI call depth when compared to using the core",
        "bridge directly. If that is an issue, simply emit an empty message on",
        "initialization (or migration) in order to instantiate the account. This",
        "will result in a VAA from your emitter, so be careful to avoid any",
        "issues that may result in.",
        "",
        "Direct case",
        "shim `PostMessage` -> core `0x8`",
        "-> shim `MesssageEvent`",
        "",
        "Integration case",
        "Integrator Program -> shim `PostMessage` -> core `0x8`",
        "-> shim `MesssageEvent`"
      ],
      "discriminator": [
        214,
        50,
        100,
        209,
        38,
        34,
        7,
        76
      ],
      "accounts": [
        {
          "name": "bridge",
          "docs": [
            "Wormhole bridge config. [`wormhole::post_message`] requires this",
            "account to be mutable."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  66,
                  114,
                  105,
                  100,
                  103,
                  101
                ]
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                14,
                10,
                88,
                154,
                65,
                165,
                95,
                189,
                102,
                197,
                42,
                71,
                95,
                45,
                146,
                166,
                211,
                220,
                155,
                71,
                71,
                17,
                76,
                185,
                175,
                130,
                90,
                152,
                181,
                69,
                211,
                206
              ]
            }
          }
        },
        {
          "name": "message",
          "docs": [
            "Wormhole Message. [`wormhole::post_message`] requires this account to be",
            "a mutable signer.",
            "",
            "This program uses a PDA per emitter, since these are already",
            "bottle-necked by sequence and the bridge enforces that emitter must be",
            "identical for reused accounts. While this could be managed by the",
            "integrator, it seems more effective to have the shim manage these",
            "accounts.",
            "",
            "Bonus, this also allows Anchor to automatically handle deriving the",
            "address."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "emitter"
              }
            ]
          }
        },
        {
          "name": "emitter",
          "docs": [
            "Emitter of the VAA. [`wormhole::post_message`] requires this account to",
            "be a signer."
          ],
          "signer": true
        },
        {
          "name": "sequence",
          "docs": [
            "Emitter's sequence account. [`wormhole::post_message`] requires this",
            "account to be mutable.",
            "",
            "Explicitly do not re-derive this account. The core bridge verifies the",
            "derivation anyway and as of Anchor 0.30.1, auto-derivation for other",
            "programs' accounts via IDL doesn't work."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  83,
                  101,
                  113,
                  117,
                  101,
                  110,
                  99,
                  101
                ]
              },
              {
                "kind": "account",
                "path": "emitter"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                14,
                10,
                88,
                154,
                65,
                165,
                95,
                189,
                102,
                197,
                42,
                71,
                95,
                45,
                146,
                166,
                211,
                220,
                155,
                71,
                71,
                17,
                76,
                185,
                175,
                130,
                90,
                152,
                181,
                69,
                211,
                206
              ]
            }
          }
        },
        {
          "name": "payer",
          "docs": [
            "Payer will pay the rent for the Wormhole Core Bridge emitter sequence",
            "and message on the first post message call. Subsequent calls will not",
            "require more lamports for rent."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "fee_collector",
          "docs": [
            "Wormhole fee collector. [`wormhole::post_message`] requires this account",
            "to be mutable."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  102,
                  101,
                  101,
                  95,
                  99,
                  111,
                  108,
                  108,
                  101,
                  99,
                  116,
                  111,
                  114
                ]
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                14,
                10,
                88,
                154,
                65,
                165,
                95,
                189,
                102,
                197,
                42,
                71,
                95,
                45,
                146,
                166,
                211,
                220,
                155,
                71,
                71,
                17,
                76,
                185,
                175,
                130,
                90,
                152,
                181,
                69,
                211,
                206
              ]
            }
          }
        },
        {
          "name": "clock",
          "docs": [
            "Clock sysvar."
          ],
          "address": "SysvarC1ock11111111111111111111111111111111"
        },
        {
          "name": "system_program",
          "docs": [
            "System program."
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "wormhole_program",
          "docs": [
            "Wormhole program."
          ],
          "address": "worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth"
        },
        {
          "name": "event_authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          "name": "program"
        }
      ],
      "args": [
        {
          "name": "nonce",
          "type": "u32"
        },
        {
          "name": "consistency_level",
          "type": {
            "defined": {
              "name": "Finality"
            }
          }
        },
        {
          "name": "payload",
          "type": "bytes"
        }
      ]
    }
  ],
  "events": [
    {
      "name": "MessageEvent",
      "discriminator": [
        68,
        27,
        143,
        0,
        77,
        76,
        137,
        112
      ]
    }
  ],
  "types": [
    {
      "name": "Finality",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Confirmed"
          },
          {
            "name": "Finalized"
          }
        ]
      }
    },
    {
      "name": "MessageEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "emitter",
            "type": "pubkey"
          },
          {
            "name": "sequence",
            "type": "u64"
          },
          {
            "name": "submission_time",
            "type": "u32"
          }
        ]
      }
    }
  ]
}