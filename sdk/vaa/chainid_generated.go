// Code generated by go generate; DO NOT EDIT.

package vaa

import (
	"fmt"
	"strings"
)

// String returns the string representation of the ChainID
func (c ChainID) String() string {
	switch c {
	case ChainIDUnset:
		return "unset"
	case ChainIDSolana:
		return "solana"
	case ChainIDEthereum:
		return "ethereum"
	case ChainIDTerra:
		return "terra"
	case ChainIDBSC:
		return "bsc"
	case ChainIDPolygon:
		return "polygon"
	case ChainIDAvalanche:
		return "avalanche"
	case ChainIDOasis:
		return "oasis"
	case ChainIDAlgorand:
		return "algorand"
	case ChainIDAurora:
		return "aurora"
	case ChainIDFantom:
		return "fantom"
	case ChainIDKarura:
		return "karura"
	case ChainIDAcala:
		return "acala"
	case ChainIDKlaytn:
		return "klaytn"
	case ChainIDCelo:
		return "celo"
	case ChainIDNear:
		return "near"
	case ChainIDMoonbeam:
		return "moonbeam"
	case ChainIDTerra2:
		return "terra2"
	case ChainIDInjective:
		return "injective"
	case ChainIDOsmosis:
		return "osmosis"
	case ChainIDSui:
		return "sui"
	case ChainIDAptos:
		return "aptos"
	case ChainIDArbitrum:
		return "arbitrum"
	case ChainIDOptimism:
		return "optimism"
	case ChainIDGnosis:
		return "gnosis"
	case ChainIDPythNet:
		return "pythnet"
	case ChainIDXpla:
		return "xpla"
	case ChainIDBtc:
		return "btc"
	case ChainIDBase:
		return "base"
	case ChainIDFileCoin:
		return "filecoin"
	case ChainIDSei:
		return "sei"
	case ChainIDRootstock:
		return "rootstock"
	case ChainIDScroll:
		return "scroll"
	case ChainIDMantle:
		return "mantle"
	case ChainIDBlast:
		return "blast"
	case ChainIDXLayer:
		return "xlayer"
	case ChainIDLinea:
		return "linea"
	case ChainIDBerachain:
		return "berachain"
	case ChainIDSeiEVM:
		return "seievm"
	case ChainIDEclipse:
		return "eclipse"
	case ChainIDBOB:
		return "bob"
	case ChainIDSnaxchain:
		return "snaxchain"
	case ChainIDUnichain:
		return "unichain"
	case ChainIDWorldchain:
		return "worldchain"
	case ChainIDInk:
		return "ink"
	case ChainIDHyperEVM:
		return "hyperevm"
	case ChainIDMonad:
		return "monad"
	case ChainIDMovement:
		return "movement"
	case ChainIDMezo:
		return "mezo"
	case ChainIDFogo:
		return "fogo"
	case ChainIDSonic:
		return "sonic"
	case ChainIDConverge:
		return "converge"
	case ChainIDCodex:
		return "codex"
	case ChainIDPlume:
		return "plume"
	case ChainIDWormchain:
		return "wormchain"
	case ChainIDCosmoshub:
		return "cosmoshub"
	case ChainIDEvmos:
		return "evmos"
	case ChainIDKujira:
		return "kujira"
	case ChainIDNeutron:
		return "neutron"
	case ChainIDCelestia:
		return "celestia"
	case ChainIDStargaze:
		return "stargaze"
	case ChainIDSeda:
		return "seda"
	case ChainIDDymension:
		return "dymension"
	case ChainIDProvenance:
		return "provenance"
	case ChainIDNoble:
		return "noble"
	case ChainIDSepolia:
		return "sepolia"
	case ChainIDArbitrumSepolia:
		return "arbitrum_sepolia"
	case ChainIDBaseSepolia:
		return "base_sepolia"
	case ChainIDOptimismSepolia:
		return "optimism_sepolia"
	case ChainIDHolesky:
		return "holesky"
	case ChainIDPolygonSepolia:
		return "polygon_sepolia"
	default:
		return fmt.Sprintf("unknown chain ID: %d", c)
	}
}

// ChainIDFromString converts from a chain's full name to its corresponding ChainID.
func ChainIDFromString(s string) (ChainID, error) {
	s = strings.ToLower(s)

	switch s {
	case "solana":
		return ChainIDSolana, nil
	case "ethereum":
		return ChainIDEthereum, nil
	case "terra":
		return ChainIDTerra, nil
	case "bsc":
		return ChainIDBSC, nil
	case "polygon":
		return ChainIDPolygon, nil
	case "avalanche":
		return ChainIDAvalanche, nil
	case "oasis":
		return ChainIDOasis, nil
	case "algorand":
		return ChainIDAlgorand, nil
	case "aurora":
		return ChainIDAurora, nil
	case "fantom":
		return ChainIDFantom, nil
	case "karura":
		return ChainIDKarura, nil
	case "acala":
		return ChainIDAcala, nil
	case "klaytn":
		return ChainIDKlaytn, nil
	case "celo":
		return ChainIDCelo, nil
	case "near":
		return ChainIDNear, nil
	case "moonbeam":
		return ChainIDMoonbeam, nil
	case "terra2":
		return ChainIDTerra2, nil
	case "injective":
		return ChainIDInjective, nil
	case "osmosis":
		return ChainIDOsmosis, nil
	case "sui":
		return ChainIDSui, nil
	case "aptos":
		return ChainIDAptos, nil
	case "arbitrum":
		return ChainIDArbitrum, nil
	case "optimism":
		return ChainIDOptimism, nil
	case "gnosis":
		return ChainIDGnosis, nil
	case "pythnet":
		return ChainIDPythNet, nil
	case "xpla":
		return ChainIDXpla, nil
	case "btc":
		return ChainIDBtc, nil
	case "base":
		return ChainIDBase, nil
	case "filecoin":
		return ChainIDFileCoin, nil
	case "sei":
		return ChainIDSei, nil
	case "rootstock":
		return ChainIDRootstock, nil
	case "scroll":
		return ChainIDScroll, nil
	case "mantle":
		return ChainIDMantle, nil
	case "blast":
		return ChainIDBlast, nil
	case "xlayer":
		return ChainIDXLayer, nil
	case "linea":
		return ChainIDLinea, nil
	case "berachain":
		return ChainIDBerachain, nil
	case "seievm":
		return ChainIDSeiEVM, nil
	case "eclipse":
		return ChainIDEclipse, nil
	case "bob":
		return ChainIDBOB, nil
	case "snaxchain":
		return ChainIDSnaxchain, nil
	case "unichain":
		return ChainIDUnichain, nil
	case "worldchain":
		return ChainIDWorldchain, nil
	case "ink":
		return ChainIDInk, nil
	case "hyperevm":
		return ChainIDHyperEVM, nil
	case "monad":
		return ChainIDMonad, nil
	case "movement":
		return ChainIDMovement, nil
	case "mezo":
		return ChainIDMezo, nil
	case "fogo":
		return ChainIDFogo, nil
	case "sonic":
		return ChainIDSonic, nil
	case "converge":
		return ChainIDConverge, nil
	case "codex":
		return ChainIDCodex, nil
	case "plume":
		return ChainIDPlume, nil
	case "wormchain":
		return ChainIDWormchain, nil
	case "cosmoshub":
		return ChainIDCosmoshub, nil
	case "evmos":
		return ChainIDEvmos, nil
	case "kujira":
		return ChainIDKujira, nil
	case "neutron":
		return ChainIDNeutron, nil
	case "celestia":
		return ChainIDCelestia, nil
	case "stargaze":
		return ChainIDStargaze, nil
	case "seda":
		return ChainIDSeda, nil
	case "dymension":
		return ChainIDDymension, nil
	case "provenance":
		return ChainIDProvenance, nil
	case "noble":
		return ChainIDNoble, nil
	case "sepolia":
		return ChainIDSepolia, nil
	case "arbitrum_sepolia":
		return ChainIDArbitrumSepolia, nil
	case "base_sepolia":
		return ChainIDBaseSepolia, nil
	case "optimism_sepolia":
		return ChainIDOptimismSepolia, nil
	case "holesky":
		return ChainIDHolesky, nil
	case "polygon_sepolia":
		return ChainIDPolygonSepolia, nil
	default:
		return ChainIDUnset, fmt.Errorf("unknown chain ID: %s", s)
	}
}

// GetAllNetworkIDs returns all known ChainIDs
func GetAllNetworkIDs() []ChainID {
	return []ChainID{
		ChainIDSolana,
		ChainIDEthereum,
		ChainIDTerra,
		ChainIDBSC,
		ChainIDPolygon,
		ChainIDAvalanche,
		ChainIDOasis,
		ChainIDAlgorand,
		ChainIDAurora,
		ChainIDFantom,
		ChainIDKarura,
		ChainIDAcala,
		ChainIDKlaytn,
		ChainIDCelo,
		ChainIDNear,
		ChainIDMoonbeam,
		ChainIDTerra2,
		ChainIDInjective,
		ChainIDOsmosis,
		ChainIDSui,
		ChainIDAptos,
		ChainIDArbitrum,
		ChainIDOptimism,
		ChainIDGnosis,
		ChainIDPythNet,
		ChainIDXpla,
		ChainIDBtc,
		ChainIDBase,
		ChainIDFileCoin,
		ChainIDSei,
		ChainIDRootstock,
		ChainIDScroll,
		ChainIDMantle,
		ChainIDBlast,
		ChainIDXLayer,
		ChainIDLinea,
		ChainIDBerachain,
		ChainIDSeiEVM,
		ChainIDEclipse,
		ChainIDBOB,
		ChainIDSnaxchain,
		ChainIDUnichain,
		ChainIDWorldchain,
		ChainIDInk,
		ChainIDHyperEVM,
		ChainIDMonad,
		ChainIDMovement,
		ChainIDMezo,
		ChainIDFogo,
		ChainIDSonic,
		ChainIDConverge,
		ChainIDCodex,
		ChainIDPlume,
		ChainIDWormchain,
		ChainIDCosmoshub,
		ChainIDEvmos,
		ChainIDKujira,
		ChainIDNeutron,
		ChainIDCelestia,
		ChainIDStargaze,
		ChainIDSeda,
		ChainIDDymension,
		ChainIDProvenance,
		ChainIDNoble,
		ChainIDSepolia,
		ChainIDArbitrumSepolia,
		ChainIDBaseSepolia,
		ChainIDOptimismSepolia,
		ChainIDHolesky,
		ChainIDPolygonSepolia,
	}
}
