use byteorder::{BigEndian, ReadBytesExt};
use std::io::{Cursor, Read};

// akin to /sdk/js/src/relayer/structs.ts

// Example testnet delivery VAA https://wormholescan.io/#/tx/0xb6de172a31d41e0aff2c928c4601d5328b05ccfd382ad853d0b1a61c3bfed869?network=TESTNET&view=rawdata
// 010000000001000bd93f481e47872d345503d995fd56cb14bccf330d7f1861f0d34cf8fed0c71a3de7d57ff4c6d9a8ced5af186e32f69544cfdd5ed57fdfe2bafeb5c8787173fe0065d6cc010000000027130000000000000000000000007b1bd7a6b4e61c2a123ac6bc2cbfc614437d047000000000000001030f01271200000000000000000000000079689ce600d3fd3524ec2b4bedcc70131eda67b60000009f9945ff10000000000000000000000000e493cc4f069821404d272b994bb80b1ba1631914007900000000000000070000000000000000000000008f26a0025dccc6cfc07a7d38756280a10e295ad7004f994e54540800000000000003e8000000000000000000000000a88085e6370a551cc046fb6b1e3fb9be23ac3a210000000000000000000000008f26a0025dccc6cfc07a7d38756280a10e295ad7271200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000046f5399e7271200000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a0a53847776f7e94cc35742971acb2217b0db810000000000000000000000007a0a53847776f7e94cc35742971acb2217b0db81000000000000000000000000e493cc4f069821404d272b994bb80b1ba163191400

#[derive(Debug, PartialEq, Eq)]
pub struct DeliveryInstruction {
    pub target_chain: u16,
    pub target_address: [u8; 32],
    pub payload: Vec<u8>,
    pub requested_reciever_value: [u8; 32],
    pub extra_reciever_value: [u8; 32],
    pub encoded_execution_info: Vec<u8>,
    pub refund_chain_id: u16,
    pub refund_address: [u8; 32],
    pub refund_delivery_provider: [u8; 32],
    pub source_delivery_provider: [u8; 32],
    pub sender_address: [u8; 32],
    pub messages: Vec<MessageKey>,
}

impl DeliveryInstruction {
    pub const PAYLOAD_ID: u8 = 1;

    pub fn deserialize(data: &[u8]) -> std::result::Result<DeliveryInstruction, std::io::Error> {
        let mut rdr = Cursor::new(data);
        Self::deserialize_from_reader(&mut rdr)
    }

    pub fn deserialize_from_reader(
        rdr: &mut Cursor<&[u8]>,
    ) -> std::result::Result<DeliveryInstruction, std::io::Error> {
        let payload_id = rdr.read_u8()?;
        if payload_id != Self::PAYLOAD_ID {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "PayloadMismatch",
            ));
        }

        let target_chain = rdr.read_u16::<BigEndian>()?;

        let mut target_address = [0u8; 32];
        rdr.read_exact(&mut target_address)?;

        let payload_len = rdr.read_u32::<BigEndian>()?;
        let mut payload = vec![0u8; payload_len.try_into().unwrap()];
        rdr.read_exact(&mut payload)?;

        let mut requested_reciever_value = [0u8; 32];
        rdr.read_exact(&mut requested_reciever_value)?;

        let mut extra_reciever_value = [0u8; 32];
        rdr.read_exact(&mut extra_reciever_value)?;

        let encoded_execution_info_len = rdr.read_u32::<BigEndian>()?;
        let mut encoded_execution_info = vec![0u8; encoded_execution_info_len.try_into().unwrap()];
        rdr.read_exact(&mut encoded_execution_info)?;

        let refund_chain_id = rdr.read_u16::<BigEndian>()?;

        let mut refund_address = [0u8; 32];
        rdr.read_exact(&mut refund_address)?;

        let mut refund_delivery_provider = [0u8; 32];
        rdr.read_exact(&mut refund_delivery_provider)?;

        let mut source_delivery_provider = [0u8; 32];
        rdr.read_exact(&mut source_delivery_provider)?;

        let mut sender_address = [0u8; 32];
        rdr.read_exact(&mut sender_address)?;

        let num_messages = rdr.read_u8()?;

        let mut messages: Vec<MessageKey> = Vec::with_capacity(num_messages.into());
        for _idx in 0..num_messages {
            messages.push(MessageKey::deserialize_from_reader(rdr)?)
        }

        if rdr.position() != rdr.get_ref().len() as u64 {
            return Err(std::io::Error::new(
                std::io::ErrorKind::InvalidData,
                "InvalidPayloadLength",
            ));
        }

        Ok(DeliveryInstruction {
            target_chain,
            target_address,
            payload,
            requested_reciever_value,
            extra_reciever_value,
            encoded_execution_info,
            refund_chain_id,
            refund_address,
            refund_delivery_provider,
            source_delivery_provider,
            sender_address,
            messages,
        })
    }
}

#[derive(Debug, PartialEq, Eq)]
pub struct MessageKey {
    pub key_type: u8,
    pub key: Vec<u8>,
}

impl MessageKey {
    pub const KEY_TYPE_VAA: u8 = 1;

    pub fn deserialize(data: &[u8]) -> std::result::Result<MessageKey, std::io::Error> {
        let mut rdr = Cursor::new(data);
        Self::deserialize_from_reader(&mut rdr)
    }

    pub fn deserialize_from_reader(
        rdr: &mut Cursor<&[u8]>,
    ) -> std::result::Result<MessageKey, std::io::Error> {
        let key_type = rdr.read_u8()?;

        let key_len = if key_type == Self::KEY_TYPE_VAA {
            2 + 32 + 8
        } else {
            rdr.read_u32::<BigEndian>()?
        };
        let mut key: Vec<u8> = vec![0u8; key_len.try_into().unwrap()];
        rdr.read_exact(&mut key)?;

        Ok(MessageKey { key_type, key })
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    pub fn delivery() {
        let payload = [
            0x01, 0x27, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x79, 0x68, 0x9c, 0xe6, 0x00, 0xd3, 0xfd, 0x35, 0x24, 0xec, 0x2b, 0x4b, 0xed,
            0xcc, 0x70, 0x13, 0x1e, 0xda, 0x67, 0xb6, 0x00, 0x00, 0x00, 0x9f, 0x99, 0x45, 0xff,
            0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4,
            0x93, 0xcc, 0x4f, 0x06, 0x98, 0x21, 0x40, 0x4d, 0x27, 0x2b, 0x99, 0x4b, 0xb8, 0x0b,
            0x1b, 0xa1, 0x63, 0x19, 0x14, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f,
            0x26, 0xa0, 0x02, 0x5d, 0xcc, 0xc6, 0xcf, 0xc0, 0x7a, 0x7d, 0x38, 0x75, 0x62, 0x80,
            0xa1, 0x0e, 0x29, 0x5a, 0xd7, 0x00, 0x4f, 0x99, 0x4e, 0x54, 0x54, 0x08, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xa8, 0x80, 0x85, 0xe6, 0x37, 0x0a, 0x55, 0x1c, 0xc0, 0x46,
            0xfb, 0x6b, 0x1e, 0x3f, 0xb9, 0xbe, 0x23, 0xac, 0x3a, 0x21, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x26, 0xa0, 0x02, 0x5d, 0xcc,
            0xc6, 0xcf, 0xc0, 0x7a, 0x7d, 0x38, 0x75, 0x62, 0x80, 0xa1, 0x0e, 0x29, 0x5a, 0xd7,
            0x27, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa1, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6f, 0x53, 0x99, 0xe7, 0x27, 0x12,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x7a, 0x0a, 0x53, 0x84, 0x77, 0x76, 0xf7, 0xe9, 0x4c, 0xc3, 0x57, 0x42,
            0x97, 0x1a, 0xcb, 0x22, 0x17, 0xb0, 0xdb, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x0a, 0x53, 0x84, 0x77, 0x76, 0xf7, 0xe9,
            0x4c, 0xc3, 0x57, 0x42, 0x97, 0x1a, 0xcb, 0x22, 0x17, 0xb0, 0xdb, 0x81, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x93, 0xcc, 0x4f,
            0x06, 0x98, 0x21, 0x40, 0x4d, 0x27, 0x2b, 0x99, 0x4b, 0xb8, 0x0b, 0x1b, 0xa1, 0x63,
            0x19, 0x14, 0x00,
        ];
        let delivery = DeliveryInstruction::deserialize(&payload).unwrap();

        assert_eq!(
            delivery,
            DeliveryInstruction {
                target_chain: 10002,
                target_address: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79,
                    0x68, 0x9c, 0xe6, 0x00, 0xd3, 0xfd, 0x35, 0x24, 0xec, 0x2b, 0x4b, 0xed, 0xcc,
                    0x70, 0x13, 0x1e, 0xda, 0x67, 0xb6,
                ],
                payload: vec![
                    0x99, 0x45, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0xe4, 0x93, 0xcc, 0x4f, 0x06, 0x98, 0x21, 0x40, 0x4d, 0x27,
                    0x2b, 0x99, 0x4b, 0xb8, 0x0b, 0x1b, 0xa1, 0x63, 0x19, 0x14, 0x00, 0x79, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x26, 0xa0, 0x02, 0x5d, 0xcc, 0xc6,
                    0xcf, 0xc0, 0x7a, 0x7d, 0x38, 0x75, 0x62, 0x80, 0xa1, 0x0e, 0x29, 0x5a, 0xd7,
                    0x00, 0x4f, 0x99, 0x4e, 0x54, 0x54, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x03, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0xa8, 0x80, 0x85, 0xe6, 0x37, 0x0a, 0x55, 0x1c, 0xc0, 0x46, 0xfb, 0x6b,
                    0x1e, 0x3f, 0xb9, 0xbe, 0x23, 0xac, 0x3a, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x26, 0xa0, 0x02, 0x5d, 0xcc,
                    0xc6, 0xcf, 0xc0, 0x7a, 0x7d, 0x38, 0x75, 0x62, 0x80, 0xa1, 0x0e, 0x29, 0x5a,
                    0xd7, 0x27, 0x12,
                ],
                requested_reciever_value: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                extra_reciever_value: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                encoded_execution_info: vec![
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa1, 0x20, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x04, 0x6f, 0x53, 0x99, 0xe7,
                ],
                refund_chain_id: 10002,
                refund_address: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                refund_delivery_provider: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a,
                    0x0a, 0x53, 0x84, 0x77, 0x76, 0xf7, 0xe9, 0x4c, 0xc3, 0x57, 0x42, 0x97, 0x1a,
                    0xcb, 0x22, 0x17, 0xb0, 0xdb, 0x81,
                ],
                source_delivery_provider: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a,
                    0x0a, 0x53, 0x84, 0x77, 0x76, 0xf7, 0xe9, 0x4c, 0xc3, 0x57, 0x42, 0x97, 0x1a,
                    0xcb, 0x22, 0x17, 0xb0, 0xdb, 0x81
                ],
                sender_address: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4,
                    0x93, 0xcc, 0x4f, 0x06, 0x98, 0x21, 0x40, 0x4d, 0x27, 0x2b, 0x99, 0x4b, 0xb8,
                    0x0b, 0x1b, 0xa1, 0x63, 0x19, 0x14
                ],
                messages: Vec::new()
            }
        )
    }
}
