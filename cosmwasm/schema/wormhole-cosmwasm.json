{
    "contract_name": "wormhole-cosmwasm",
    "contract_version": "0.1.0",
    "idl_version": "1.0.0",
    "instantiate": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InstantiateMsg",
      "description": "The instantiation parameters of the core bridge contract. See [`crate::state::ConfigInfo`] for more details on what these fields mean.",
      "type": "object",
      "required": [
        "chain_id",
        "fee_denom",
        "gov_address",
        "gov_chain",
        "guardian_set_expirity",
        "initial_guardian_set"
      ],
      "properties": {
        "chain_id": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "fee_denom": {
          "type": "string"
        },
        "gov_address": {
          "$ref": "#/definitions/Binary"
        },
        "gov_chain": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "guardian_set_expirity": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "initial_guardian_set": {
          "description": "Guardian set to initialise the contract with.",
          "allOf": [
            {
              "$ref": "#/definitions/GuardianSetInfo"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "GuardianAddress": {
          "type": "object",
          "required": [
            "bytes"
          ],
          "properties": {
            "bytes": {
              "$ref": "#/definitions/Binary"
            }
          }
        },
        "GuardianSetInfo": {
          "type": "object",
          "required": [
            "addresses",
            "expiration_time"
          ],
          "properties": {
            "addresses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GuardianAddress"
              }
            },
            "expiration_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      }
    },
    "execute": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ExecuteMsg",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "submit_v_a_a"
          ],
          "properties": {
            "submit_v_a_a": {
              "type": "object",
              "required": [
                "vaa"
              ],
              "properties": {
                "vaa": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "post_message"
          ],
          "properties": {
            "post_message": {
              "type": "object",
              "required": [
                "message",
                "nonce"
              ],
              "properties": {
                "message": {
                  "$ref": "#/definitions/Binary"
                },
                "nonce": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        }
      }
    },
    "query": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryMsg",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "guardian_set_info"
          ],
          "properties": {
            "guardian_set_info": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "verify_v_a_a"
          ],
          "properties": {
            "verify_v_a_a": {
              "type": "object",
              "required": [
                "block_time",
                "vaa"
              ],
              "properties": {
                "block_time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "vaa": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "get_state"
          ],
          "properties": {
            "get_state": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "query_address_hex"
          ],
          "properties": {
            "query_address_hex": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        }
      }
    },
    "migrate": null,
    "sudo": null,
    "responses": {
      "get_state": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "GetStateResponse",
        "type": "object",
        "required": [
          "fee"
        ],
        "properties": {
          "fee": {
            "$ref": "#/definitions/Coin"
          }
        },
        "additionalProperties": false,
        "definitions": {
          "Coin": {
            "type": "object",
            "required": [
              "amount",
              "denom"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "denom": {
                "type": "string"
              }
            }
          },
          "Uint128": {
            "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
            "type": "string"
          }
        }
      },
      "guardian_set_info": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "GuardianSetInfoResponse",
        "type": "object",
        "required": [
          "addresses",
          "guardian_set_index"
        ],
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GuardianAddress"
            }
          },
          "guardian_set_index": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false,
        "definitions": {
          "Binary": {
            "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
            "type": "string"
          },
          "GuardianAddress": {
            "type": "object",
            "required": [
              "bytes"
            ],
            "properties": {
              "bytes": {
                "$ref": "#/definitions/Binary"
              }
            }
          }
        }
      },
      "query_address_hex": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "GetAddressHexResponse",
        "type": "object",
        "required": [
          "hex"
        ],
        "properties": {
          "hex": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "verify_v_a_a": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ParsedVAA",
        "type": "object",
        "required": [
          "consistency_level",
          "emitter_address",
          "emitter_chain",
          "guardian_set_index",
          "hash",
          "len_signers",
          "nonce",
          "payload",
          "sequence",
          "timestamp",
          "version"
        ],
        "properties": {
          "consistency_level": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "emitter_address": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "emitter_chain": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "guardian_set_index": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "hash": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "len_signers": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "nonce": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "payload": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "sequence": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "timestamp": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "version": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      }
    }
  }