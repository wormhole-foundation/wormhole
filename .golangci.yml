version: "2"
linters:
  default: none
  enable:
    # Malicious unicode characters that change the meaning are not in the source code.
    - bidichk
    # Ensure that the body is closed on HTTP and websocket conns
    - bodyclose
    - contextcheck
    # Duplicate word usage, such as 'and and' in a comment.
    - dupword
    - errcheck
    # Type assertion and comparison validation on errors. https://github.com/polyfloyd/go-errorlint
    - errorlint
    # Enum and maps used on switch statements are exhaustive
    - exhaustive
    - exhaustruct
    - forcetypeassert
    - gocritic
    - gosec
    - govet
    - ineffassign
    - loggercheck
    # Check for simple misspellings of words. 
    - misspell
    - noctx
    # Require explanations for nolint comments
    - nolintlint
    - prealloc
    # Overwriting predeclared Golang names such as 'len' and 'min'.
    - predeclared
    # Validate common mistakes in Golang, such as invalid time.Parse format, invalid regular expression, etc.
    - staticcheck
    - unparam
    # Unused constants, variables, functions and types
    - unused
  settings:
    errorlint:
      errorf: false
    exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
      check:
        - switch
        - map
      ignore-enum-types: "vaa.ChainID" # This type is used all over and doesn't need to be exhaustive
      #default-signifies-exhaustive: true
    exhaustruct:
      include:
        # List of regular expressions to match struct packages and their names.
        # Regular expressions must match complete canonical struct package/name/structname.
        # If this list is empty, all structs are tested.
        # Default: []
        - ./+governor.tokenConfigEntry$
        - ./_common.MessagePublication$
      exclude:
        - .+/cobra\.Command$
        - .+/http\.Client$
        - .+/prometheus.+
    gocritic:
      disable-all: true
    # disabled-checks:
    #   - exitAfterDefer
    #   - assignOp
    #   - ifElseChain
    #   - elseif
      enabled-checks:
        - argOrder
        - badCall
        - badCond
        - badLock
        - badRegexp
        - badSorting
        - builtinShadow
        - builtinShadowDecl
        - caseOrder
        - dupArg
        - dupBranchBody
        - dupCase
        - dupSubExpr
        - externalErrorReassign
        - importShadow
        - mapKey
        - newDeref
        - offBy1
        - regexpPattern
        - sloppyReassign
        - truncateCmp
        - uncheckedInlineErr
        - weakCond
      # performance lints
        - indexAlloc
    nolintlint:
      # Disable to ensure that all nolint directives actually have an effect.
      # Default: false
      allow-unused: false
      # Exclude following linters from requiring an explanation.
      # Default: []
      allow-no-explanation: [dupWord]
      # Enable to require an explanation of nonzero length after each nolint directive.
      # Default: false
      require-explanation: true
      # Enable to require nolint directives to mention the specific linter being suppressed.
      # Default: false
      require-specific: true
    staticcheck:
      checks:
        # All of these lints should eventually be added.
        # They occurred during the migration to v2 and were disabled to make the upgrade easier.
        # https://golangci-lint.run/usage/linters/#staticcheck
        ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022", "-SA9003", "-QF1003", "-QF1006", "-QF1008", "-QF1011", "-S1009", "-ST1005", "-ST1008", "-ST1011", "-ST1017", "-ST1018", "-ST1019", "-ST1023"]
    unparam:
          # Inspect exported functions.
          #
          # Set to true if no external program/library imports your code.
          # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
          # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
          # with golangci-lint call it on a directory with the changed file.
          #
          # Default: false
          check-exported: true
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      - linters:
          - unused
        path: pkg/supervisor/supervisor_testhelpers.go
        text: ^func.*supervisor.*(waitSettle|waitSettleError).*$
        # This file contains hard-coded Sui core contract addresses that are marked as hardcoded credentials.
      - path: pkg/txverifier/sui_test.go
        text: 'G101: Potential hardcoded credentials'
      - linters:
          - dupword
          - misspell
        path: .*generated_mainnet_tokens\.go$
        text: ".*" # This matches any text in the file
      - linters:
          - godox
        path: node/hack/
      # Ignore test files for these tools.
      - linters:
          - contextcheck
          - dupWord
          - exhaustruct
          - nolintlint
        path: _test\.go
      - linters:
          - exhaustruct
        path: (?i).*mock.*
    paths:
      - third_party$
      - builtin$
      - examples$
issues:
  max-issues-per-linter: 0
  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
formatters:
  exclusions:
    generated: lax
    paths:
      - third_party$
      - builtin$
      - examples$
